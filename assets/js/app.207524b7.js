"use strict";(self.webpackChunkblog_demo=self.webpackChunkblog_demo||[]).push([[143],{663:(n,a,s)=>{s.d(a,{g:()=>J});var e=s(7478),t=s(5748),p=s(1598),o=s(6665),l=s(1843),r=s(8580),i=s(9146),c=s(881),u=s(1301),m=s(7621),d=s(6252);const h=(0,d._)("h1",{style:{margin:"0 auto"}},"注册组件测试",-1),b=(0,d._)("div",{style:{width:"30rem",height:"30rem",background:"plum",margin:"0 auto"}},null,-1),k={name:"Mycom"};var g=s(3744);const v=(0,g.Z)(k,[["render",function(n,a,s,e,t,p){const o=(0,d.up)("aurora-footer"),l=(0,d.up)("aurora-global");return(0,d.wg)(),(0,d.j4)(l,{"show-bg":!0,"show-style-menu":!0,"show-navbar":!0},{top:(0,d.w5)((()=>[h])),center:(0,d.w5)((()=>[b])),bottom:(0,d.w5)((()=>[(0,d.Wm)(o)])),_:1})}]]);var x=s(4482);const f=n=>((0,d.dD)("data-v-006c0c4a"),n=n(),(0,d.Cn)(),n),y=f((()=>(0,d._)("div",{class:"imgUrl"},null,-1))),P=f((()=>(0,d._)("li",null,null,-1))),T=f((()=>(0,d._)("h1",{style:{margin:"8%"},class:"images"},[(0,d._)("div",null,"相册(bug)功能还在开发中...")],-1))),w=f((()=>(0,d._)("div",{class:"content"},[(0,d._)("div",{class:"top"},[(0,d._)("img",{src:"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/9.jpg"})]),(0,d._)("div",{class:"bottom"},[(0,d._)("img",{src:"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/33.jpg"})]),(0,d._)("div",{class:"left"},[(0,d._)("img",{src:"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/25.jpg"})]),(0,d._)("div",{class:"right"},[(0,d._)("img",{src:"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/15.jpg"})]),(0,d._)("div",{class:"front"},[(0,d._)("img",{src:"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/7.jpg"})]),(0,d._)("div",{class:"after"},[(0,d._)("img",{src:"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/24.jpg"})])],-1))),F=f((()=>(0,d._)("div",{class:"arr"},null,-1))),j=f((()=>(0,d._)("div",{id:"box"},[(0,d._)("img",{src:x}),(0,d._)("img",{src:x}),(0,d._)("img",{src:x}),(0,d._)("img",{src:x}),(0,d._)("img",{src:x}),(0,d._)("img",{src:x}),(0,d._)("img",{src:x}),(0,d._)("img",{src:x}),(0,d._)("img",{src:x}),(0,d._)("img",{src:x})],-1))),N={name:"Photo",props:{},components:{},data:()=>({}),methods:{},computed:{},watch:{},created(){}},C=(0,g.Z)(N,[["render",function(n,a,s,e,t,p){const o=(0,d.up)("aurora-global");return(0,d.wg)(),(0,d.iD)(d.HY,null,[y,P,(0,d.Wm)(o,{"show-bg":!0,"show-style-menu":!0,"show-navbar":!0},{top:(0,d.w5)((()=>[T])),center:(0,d.w5)((()=>[])),bottom:(0,d.w5)((()=>[w,F,j])),_:1})],64)}],["__scopeId","data-v-006c0c4a"]]),R=(n=>((0,d.dD)("data-v-0c9e6ae0"),n=n(),(0,d.Cn)(),n))((()=>(0,d._)("h1",{style:{margin:"8%"},class:"images"},[(0,d._)("div",null,"日记功能还在开发中...")],-1))),A={name:"XXX",props:{},components:{},data:()=>({}),methods:{},computed:{},watch:{},created(){}},_=(0,g.Z)(A,[["render",function(n,a,s,e,t,p){const o=(0,d.up)("aurora-global");return(0,d.wg)(),(0,d.j4)(o,{"show-bg":!0,"show-style-menu":!0,"show-navbar":!0},{top:(0,d.w5)((()=>[R])),bottom:(0,d.w5)((()=>[])),_:1})}],["__scopeId","data-v-0c9e6ae0"]]);var D=s(3577);const H=n=>((0,d.dD)("data-v-f55934f4"),n=n(),(0,d.Cn)(),n),M=[H((()=>(0,d._)("img",{src:"",alt:""},null,-1)))],E=["src"],I=H((()=>(0,d._)("h1",{style:{margin:"8%"},class:"images"},[(0,d._)("div",null,"bug还在编写中...")],-1))),q=[s(8307),s(4445),s(731)],S={name:"XXX",props:{},components:{},data:()=>({allBackgroundImages:q}),methods:{},computed:{allBackgroundImages(){const n=Math.floor(Math.random()*this.allBackgroundImages.length);return{backgroundImage:`url(${this.allBackgroundImages[n]})`}}},mounted(){},watch:{},created(){}},L=(0,g.Z)(S,[["render",function(n,a,s,e,t,p){const o=(0,d.up)("aurora-global");return(0,d.wg)(),(0,d.iD)(d.HY,null,[(0,d._)("div",{class:"imgUrl",style:(0,D.j5)(p.allBackgroundImages)},M,4),(0,d.Wm)(o,{"show-bg":!1,"show-style-menu":!0,"show-navbar":!0},{top:(0,d.w5)((()=>[(0,d._)("img",{src:p.allBackgroundImages,alt:""},null,8,E),I])),bottom:(0,d.w5)((()=>[])),_:1})],64)}],["__scopeId","data-v-f55934f4"]]),z=n=>((0,d.dD)("data-v-9dca3572"),n=n(),(0,d.Cn)(),n),G=z((()=>(0,d._)("div",{class:"imgUrl",style:{}},null,-1))),B=z((()=>(0,d._)("li",null,null,-1))),V={name:"XXX",props:{},components:{},data:()=>({}),methods:{},computed:{},watch:{},created(){}},$=(0,g.Z)(V,[["render",function(n,a,s,e,t,p){const o=(0,d.up)("aurora-global");return(0,d.wg)(),(0,d.iD)(d.HY,null,[G,B,(0,d.Wm)(o,{"show-bg":!1,"show-style-menu":!0,"show-navbar":!0},{top:(0,d.w5)((()=>[])),bottom:(0,d.w5)((()=>[])),_:1})],64)}],["__scopeId","data-v-9dca3572"]]),U=(0,m.vW)((({app:n,router:a})=>{n.component("UseBlog",v),n.component("Photo",C),n.component("Mood",_),n.component("NextMood",L),n.component("Live2d",$)})),J=[e.Z,t.Z,p.Z,o.Z,l.Z,r.Z,i.Z,c.Z,u.Z,U]},9947:(n,a,s)=>{s.d(a,{p:()=>o});var e=s(3051),t=s(7790),p=s(9796);const o=[e.Z,t.Z,p.Z]},4611:(n,a,s)=>{s.d(a,{l:()=>o});var e=s(1263),t=s(6243),p=s(7593);const o=[e.Z,t.Z,p.Z]},4150:(n,a,s)=>{s.d(a,{Z:()=>t});var e=s(6252);const t={404:(0,e.RC)((()=>Promise.all([s.e(973),s.e(431)]).then(s.bind(s,2431)))),Layout:(0,e.RC)((()=>s.e(887).then(s.bind(s,8697))))}},6056:(n,a,s)=>{s.d(a,{b:()=>t});var e=s(6252);const t={"v-245bbacd":(0,e.RC)((()=>s.e(685).then(s.bind(s,1099)))),"v-e9f472bc":(0,e.RC)((()=>s.e(781).then(s.bind(s,4987)))),"v-7128c52e":(0,e.RC)((()=>s.e(62).then(s.bind(s,8646)))),"v-2c4aad21":(0,e.RC)((()=>s.e(602).then(s.bind(s,1770)))),"v-a1c53cc0":(0,e.RC)((()=>s.e(538).then(s.bind(s,317)))),"v-79dc7caa":(0,e.RC)((()=>s.e(8).then(s.bind(s,8841)))),"v-7d76a0cf":(0,e.RC)((()=>s.e(203).then(s.bind(s,3219)))),"v-ed98bed8":(0,e.RC)((()=>s.e(890).then(s.bind(s,9675)))),"v-4cf350f9":(0,e.RC)((()=>s.e(845).then(s.bind(s,7846)))),"v-48959c4c":(0,e.RC)((()=>s.e(984).then(s.bind(s,6887)))),"v-711e77e0":(0,e.RC)((()=>s.e(723).then(s.bind(s,1377)))),"v-e54ae01a":(0,e.RC)((()=>s.e(791).then(s.bind(s,532)))),"v-7e1e277e":(0,e.RC)((()=>s.e(695).then(s.bind(s,3498)))),"v-12d0fdc2":(0,e.RC)((()=>s.e(751).then(s.bind(s,5400)))),"v-75aebe31":(0,e.RC)((()=>s.e(936).then(s.bind(s,4846)))),"v-4a48c612":(0,e.RC)((()=>s.e(926).then(s.bind(s,6069)))),"v-62e92bf6":(0,e.RC)((()=>s.e(420).then(s.bind(s,5800)))),"v-87ea532c":(0,e.RC)((()=>s.e(23).then(s.bind(s,8802)))),"v-f956f2a2":(0,e.RC)((()=>s.e(335).then(s.bind(s,5540)))),"v-4b663a7c":(0,e.RC)((()=>s.e(14).then(s.bind(s,3622)))),"v-3706649a":(0,e.RC)((()=>s.e(88).then(s.bind(s,8109)))),"v-8daa1a0e":(0,e.RC)((()=>s.e(509).then(s.bind(s,1829)))),"v-74bc627b":(0,e.RC)((()=>s.e(5).then(s.bind(s,9085)))),"v-14f724bf":(0,e.RC)((()=>s.e(69).then(s.bind(s,8784)))),"v-14e6501c":(0,e.RC)((()=>s.e(713).then(s.bind(s,779)))),"v-744d024e":(0,e.RC)((()=>s.e(146).then(s.bind(s,7034)))),"v-705c21a6":(0,e.RC)((()=>s.e(888).then(s.bind(s,8099)))),"v-6629f178":(0,e.RC)((()=>s.e(158).then(s.bind(s,7984)))),"v-031dfb13":(0,e.RC)((()=>s.e(722).then(s.bind(s,7659)))),"v-e2acc714":(0,e.RC)((()=>s.e(356).then(s.bind(s,5506)))),"v-4382d077":(0,e.RC)((()=>s.e(740).then(s.bind(s,7072)))),"v-3279cf61":(0,e.RC)((()=>s.e(118).then(s.bind(s,1973)))),"v-3c506944":(0,e.RC)((()=>s.e(219).then(s.bind(s,5455))))}},9706:(n,a,s)=>{s.d(a,{T:()=>e});const e={"v-245bbacd":()=>s.e(685).then(s.bind(s,7018)).then((({data:n})=>n)),"v-e9f472bc":()=>s.e(781).then(s.bind(s,5500)).then((({data:n})=>n)),"v-7128c52e":()=>s.e(62).then(s.bind(s,6858)).then((({data:n})=>n)),"v-2c4aad21":()=>s.e(602).then(s.bind(s,1844)).then((({data:n})=>n)),"v-a1c53cc0":()=>s.e(538).then(s.bind(s,9512)).then((({data:n})=>n)),"v-79dc7caa":()=>s.e(8).then(s.bind(s,2860)).then((({data:n})=>n)),"v-7d76a0cf":()=>s.e(203).then(s.bind(s,7775)).then((({data:n})=>n)),"v-ed98bed8":()=>s.e(890).then(s.bind(s,4959)).then((({data:n})=>n)),"v-4cf350f9":()=>s.e(845).then(s.bind(s,1544)).then((({data:n})=>n)),"v-48959c4c":()=>s.e(984).then(s.bind(s,8086)).then((({data:n})=>n)),"v-711e77e0":()=>s.e(723).then(s.bind(s,8410)).then((({data:n})=>n)),"v-e54ae01a":()=>s.e(791).then(s.bind(s,2171)).then((({data:n})=>n)),"v-7e1e277e":()=>s.e(695).then(s.bind(s,8343)).then((({data:n})=>n)),"v-12d0fdc2":()=>s.e(751).then(s.bind(s,8172)).then((({data:n})=>n)),"v-75aebe31":()=>s.e(936).then(s.bind(s,5014)).then((({data:n})=>n)),"v-4a48c612":()=>s.e(926).then(s.bind(s,3245)).then((({data:n})=>n)),"v-62e92bf6":()=>s.e(420).then(s.bind(s,4135)).then((({data:n})=>n)),"v-87ea532c":()=>s.e(23).then(s.bind(s,8245)).then((({data:n})=>n)),"v-f956f2a2":()=>s.e(335).then(s.bind(s,854)).then((({data:n})=>n)),"v-4b663a7c":()=>s.e(14).then(s.bind(s,6960)).then((({data:n})=>n)),"v-3706649a":()=>s.e(88).then(s.bind(s,1801)).then((({data:n})=>n)),"v-8daa1a0e":()=>s.e(509).then(s.bind(s,6464)).then((({data:n})=>n)),"v-74bc627b":()=>s.e(5).then(s.bind(s,2988)).then((({data:n})=>n)),"v-14f724bf":()=>s.e(69).then(s.bind(s,4770)).then((({data:n})=>n)),"v-14e6501c":()=>s.e(713).then(s.bind(s,4502)).then((({data:n})=>n)),"v-744d024e":()=>s.e(146).then(s.bind(s,6041)).then((({data:n})=>n)),"v-705c21a6":()=>s.e(888).then(s.bind(s,6762)).then((({data:n})=>n)),"v-6629f178":()=>s.e(158).then(s.bind(s,4141)).then((({data:n})=>n)),"v-031dfb13":()=>s.e(722).then(s.bind(s,8332)).then((({data:n})=>n)),"v-e2acc714":()=>s.e(356).then(s.bind(s,6790)).then((({data:n})=>n)),"v-4382d077":()=>s.e(740).then(s.bind(s,7629)).then((({data:n})=>n)),"v-3279cf61":()=>s.e(118).then(s.bind(s,8588)).then((({data:n})=>n)),"v-3c506944":()=>s.e(219).then(s.bind(s,3350)).then((({data:n})=>n))}},4634:(n,a,s)=>{s.d(a,{g:()=>t});var e=s(4802);const t=[["v-245bbacd","/how-to-write-article.html",{},["/how-to-write-article","/how-to-write-article.md"]],["v-e9f472bc","/live2d.html",{},["/live2d","/live2d.md"]],["v-7128c52e","/mood.html",{},["/mood","/mood.md"]],["v-2c4aad21","/next-mood.html",{},["/next-mood","/next-mood.md"]],["v-a1c53cc0","/photo.html",{},["/photo","/photo.md"]],["v-79dc7caa","/use.html",{},["/use","/use.md"]],["v-7d76a0cf","/base/admin.html",{},["/base/admin","/base/admin.md"]],["v-ed98bed8","/base/Agreement.html",{},["/base/Agreement","/base/Agreement.md"]],["v-4cf350f9","/base/docs.html",{},["/base/docs","/base/docs.md"]],["v-48959c4c","/base/Interaction.html",{},["/base/Interaction","/base/Interaction.md"]],["v-711e77e0","/base/mini%20apps.html",{},["/base/mini apps.html","/base/mini%20apps","/base/mini apps.md","/base/mini%20apps.md"]],["v-e54ae01a","/base/npm.html",{},["/base/npm","/base/npm.md"]],["v-7e1e277e","/base/plugin.html",{},["/base/plugin","/base/plugin.md"]],["v-12d0fdc2","/base/Vuex.html",{},["/base/Vuex","/base/Vuex.md"]],["v-75aebe31","/base/webpack.html",{},["/base/webpack","/base/webpack.md"]],["v-4a48c612","/issue/axios.html",{},["/issue/axios","/issue/axios.md"]],["v-62e92bf6","/issue/git.html",{},["/issue/git","/issue/git.md"]],["v-87ea532c","/issue/mini%20apps.html",{},["/issue/mini apps.html","/issue/mini%20apps","/issue/mini apps.md","/issue/mini%20apps.md"]],["v-f956f2a2","/issue/",{},["/issue/index.html","/issue/README.md"]],["v-4b663a7c","/issue/vue.html",{},["/issue/vue","/issue/vue.md"]],["v-3706649a","/404.html",{},["/404"]],["v-8daa1a0e","/",{},["/index.html"]],["v-74bc627b","/about/",{},["/about/index.html"]],["v-14f724bf","/mood/",{},["/mood/index.html"]],["v-14e6501c","/link/",{},["/link/index.html"]],["v-744d024e","/tag/",{},["/tag/index.html"]],["v-705c21a6","/archive/",{},["/archive/index.html"]],["v-6629f178","/aurora-coze/",{},["/aurora-coze/index.html"]],["v-031dfb13","/register/",{},["/register/index.html"]],["v-e2acc714","/photo/",{},["/photo/index.html"]],["v-4382d077","/next-mood/",{},["/next-mood/index.html"]],["v-3279cf61","/aurora-archive/",{},["/aurora-archive/index.html"]],["v-3c506944","/aurora-music/",{},["/aurora-music/index.html"]]].reduce(((n,[a,s,t,p])=>(n.push({name:a,path:s,component:e.Y,meta:t},...p.map((n=>({path:n,redirect:s})))),n)),[{name:"404",path:"/:catchAll(.*)",component:e.Y}])},5472:(n,a,s)=>{s.d(a,{D:()=>e});const e=[{title:"主题配置",headers:[],path:"/how-to-write-article.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/live2d.html",pathLocale:"/",extraFields:[]},{title:"",headers:[{level:2,title:"layout: Mood",slug:"layout-mood",children:[{level:3,title:"xx日记",slug:"xx日记",children:[]}]}],path:"/mood.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/next-mood.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/photo.html",pathLocale:"/",extraFields:[]},{title:"代码测试",headers:[{level:2,title:"代码测试",slug:"代码测试",children:[{level:3,title:"312",slug:"_312",children:[]},{level:3,title:"123",slug:"_123",children:[]}]}],path:"/use.html",pathLocale:"/",extraFields:[]},{title:"CMD",headers:[],path:"/base/admin.html",pathLocale:"/",extraFields:[]},{title:"HTTP协议",headers:[{level:2,title:"http协议详解",slug:"http协议详解",children:[{level:3,title:"HTTP状态码",slug:"http状态码",children:[]}]}],path:"/base/Agreement.html",pathLocale:"/",extraFields:[]},{title:"Vue...",headers:[{level:2,title:"vue...",slug:"vue",children:[]}],path:"/base/docs.html",pathLocale:"/",extraFields:[]},{title:"前后端交互详细步骤",headers:[{level:2,title:"前后端交互",slug:"前后端交互",children:[]}],path:"/base/Interaction.html",pathLocale:"/",extraFields:[]},{title:"微信小程序",headers:[{level:2,title:"微信小程序",slug:"微信小程序",children:[]}],path:"/base/mini%20apps.html",pathLocale:"/",extraFields:[]},{title:"npm指令",headers:[{level:2,title:"npm指令",slug:"npm指令",children:[]}],path:"/base/npm.html",pathLocale:"/",extraFields:[]},{title:"vue项目中的接口调用",headers:[],path:"/base/plugin.html",pathLocale:"/",extraFields:[]},{title:"Vuex深入理解 modules",headers:[{level:3,title:"一、什么是module？",slug:"一、什么是module",children:[]},{level:3,title:"二、怎么用module？",slug:"二、怎么用module",children:[]},{level:3,title:"三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save",slug:"三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save",children:[]},{level:3,title:"5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.",slug:"_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state",children:[]},{level:3,title:"6, 局部参数",slug:"_6-局部参数",children:[]},{level:3,title:"7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：",slug:"_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性",children:[]}],path:"/base/Vuex.html",pathLocale:"/",extraFields:[]},{title:"Webpack",headers:[{level:3,title:"Webpack打包",slug:"webpack打包",children:[]}],path:"/base/webpack.html",pathLocale:"/",extraFields:[]},{title:"Axios",headers:[{level:3,title:"axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined",slug:"axios报错-typeerror-cannot-read-property-canceltoken-of-undefined",children:[]}],path:"/issue/axios.html",pathLocale:"/",extraFields:[]},{title:"Git",headers:[{level:2,title:"Git报错:“ERROR: Permission to XXX.git denied to user”",slug:"git报错-error-permission-to-xxx-git-denied-to-user",children:[]}],path:"/issue/git.html",pathLocale:"/",extraFields:[]},{title:"Mini Apps",headers:[{level:2,title:"小程序错误：[app.json文件内容错误]app.json未找到",slug:"小程序错误-app-json文件内容错误-app-json未找到",children:[]}],path:"/issue/mini%20apps.html",pathLocale:"/",extraFields:[]},{title:"欢迎🎉🎉🎉🎉🎉",headers:[],path:"/issue/",pathLocale:"/",extraFields:[]},{title:"Vue",headers:[{level:2,title:"Missing required prop: “value” 报错的解决办法",slug:"missing-required-prop-value-报错的解决办法",children:[]},{level:2,title:"解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题",slug:"解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题",children:[]}],path:"/issue/vue.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/404.html",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/about/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/link/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/tag/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-coze/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/register/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/photo/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/next-mood/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-archive/",pathLocale:"/",extraFields:[]},{title:"",headers:[],path:"/aurora-music/",pathLocale:"/",extraFields:[]}]},5220:(n,a,s)=>{s.d(a,{H:()=>e});const e={base:"/",lang:"zh-CN",title:"To be is to be perceived",description:"This is a blog.",head:[["script",{src:"https://at.alicdn.com/t/font_2849934_v6y652peian.js"}],["link",{href:"/avatar.png",rel:"icon"}],["link",{rel:"stylesheet",type:"text/css",href:"//at.alicdn.com/t/font_2932340_r7zitafg82.css"}]],locales:{}}},2232:(n,a,s)=>{s.d(a,{f:()=>e});const e={navbar:[{text:"笔记",iconClass:"aurora-navbar-si-glyph-billiard-ball",children:[{text:"前后端交互详细步骤+http协议详解",children:["/base/Interaction.md","/base/Agreement.md"]},{text:"Vue",children:["/base/plugin.md","/base/docs.md"]},{text:"Vuex",children:["/base/Vuex.md"]},{text:"Webpack",children:["/base/webpack.md"]},{text:"npm常见命令",children:["/base/npm.md"]},{text:"微信小程序",children:["/base/mini apps.md"]}]},{text:"问题和bug",iconClass:"aurora-navbar-shoulijindu-xuanzhong",children:[{text:"bug记录和优化",children:["/issue/mini apps.md","/issue/vue.md","/issue/axios.md","/issue/git.md"]},{text:"...",children:[]}]},{text:"主题所用的插件",iconClass:"aurora-navbar-si-glyph-egg",children:[{children:[],text:"时间轴"},{children:[],text:"浪漫气泡"},{children:[],text:"说说"},{children:[],text:"音乐播放器"},{text:"Live-2d",children:[]}]},{text:"空间",iconClass:"aurora-navbar-hua2",children:[{children:[{text:"自我介绍",link:"/about"}],text:"自我介绍"},{text:"说说",children:[{text:"??日记",link:"/mood.html"},{text:"日志",link:"/next-mood.html"}]},{text:"相册",children:[{text:"photo",link:"/photo.html"}]}]},{text:"page",iconClass:"aurora-navbar-a-ziyuan107",children:[{text:"标签",children:[{text:"tag",link:"/tag"}]},{text:"时间轴",children:[{text:"archive",link:"/archive"}]}]},{text:"友情链接",link:"/link",iconClass:"aurora-navbar-guide"},{text:"测试",link:"/use.html",iconClass:"aurora-navbar-si-glyph-load"},{text:"Wan",link:"",iconClass:"aurora-navbar-github1"}],darkMode:!1,repo:"https://github.com/qsyyke/vuepress-theme-aurora",repoIconClass:"aurora-navbar-github",docsRepo:"#",githubActions:!1,docsBranch:"main",repoLabel:"Aurora-theme",editLink:!0,editLinkText:"edit",lastUpdated:!0,lastUpdatedText:"最后的提交时间",logoColor:"#2c3e50",showFont:"程",heroImg:"/avatar.jpg",logo:"/avatar.png",lazyLoadingImg:"/ljz.gif",homePageLazyLoadingImg:"/aurora-loading.gif",customRandomSay:!1,customRandomValue:"Vuepress-theme-Aurora",socials:[{aHref:"tencent://message/?uin=917675036",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-qq"},{aHref:"javascript:;",showImgSrc:"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/wx.jpg",isHome:!0,show:!0,symbol:"#icon-weixin",sidebar:!0},{aHref:"https://github.com",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-github-fill"},{aHref:"https://stackoverflow.com/",isHome:!0,show:!0,symbol:"#icon-stackoverflow",sidebar:!0},{aHref:"https://bilibili.com/",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-bilibili-1"},{aHref:"https://music.163.com/#/user/home?id=411356819",isHome:!0,show:!0,symbol:"#icon-wangyiyunyinle",sidebar:!0},{aHref:"mailto:917675036@qq.com",isHome:!0,show:!0,sidebar:!0,symbol:"#icon-email"}],logoTitle:"晚",headTitle:"this is headTitle",description:"vuepress-theme-Aurora是一款简洁,美观,功能强大的静态主题",keyword:"vuepress主题,vuepress theme,生活琐事,二次元博客,简约博客,博客主题,静态主题",slideTime:3e5,randomSaw:"https://international.v1.hitokoto.cn/?c=b&max_length=45",about:[{bar:!1,title:"我",describe:["喜欢听音乐,什么类型都可","喜欢安静,不喜社交","喜欢技术,coding","目前正在学习Vue3.0","前端太菜了,希望大家多多包涵`Σ(￣□￣||)` "],tag:["兴趣:","Ctrl+C/V","写BUG","敲代码","番剧","安静","音乐","小说","宅"],showTag:!0},{bar:!1,title:"规划",describe:["敲项目","提升英语！！","提升编码能力","良好的编程风格","做点什么有意义的事"],tag:[" 加油..."],showTag:!0},{bar:!1,title:"未来规划",describe:["前端工程师",""],tag:["一步一个脚印"],showTag:!0},{bar:!0,title:"技  能",describe:[{name:"HTML5/HTML",score:82},{name:"JavaScript",score:76},{name:"CSS3/CSS",score:70},{name:"Vue",score:79},{name:"React",score:60},{name:"Nodejs",score:70},{name:"Webpack",score:80},{name:"Git",score:85},{name:"Ctrl C V",score:101}],showTag:!1},{showTag:!1,bar:!0,title:"掌握 框架/组件库",describe:[{name:"Ajax",score:71},{name:"Axios",score:75},{name:"Uni-APP",score:70},{name:"VueX",score:75},{name:"Vuet2",score:75},{name:"View-Ui",score:75},{name:"Element-UI",score:80},{name:"Cube-UI",score:75},{name:"Mint UI",score:75}]},{title:"关于主题",tag:["感谢作者Aurora!!!"],describe:["该主题是我自己通过cv开发出来的,是一款基于vuepress,对默认主题进行了大量修改的博客主题。因为cv太难了,所以有bug也正常,还请大家多多包涵, Thanks♪(･ω･)ﾉ"]},{bar:!1,title:"开发日志",describe:["...","...","开发永不止步......"],tag:["`(⌒▽⌒)`"],showTag:!0},{title:"闲话",bar:!1,tag:[""],showTag:!1,describe:["没有话"]}],randomColor:["#ffcad4","#d8e2dc","#8d99ae","#b8f2e6","#84c7d0","#aed9e0","#00b4d8","#caf0f8","#fbc4ab","#fdc5f5","#84dcc6","#a9def9","#fcf6bd","#f0a6ca","#b9faf8","#42a5f5","#ff9800","#b39ddb","#6d45bb","#b388ff","#1565c0","#26c6da","#5e548e","#90f1ef","#5b5f97","#bbe6e4","#42bfdd","#72ddf7","#8093f1","#9ed8d8","#7ea8be","#ef90b3","#b892ef","#c0b9dd","#c0d9dd","#75c9c8","#ded9e2","#b5e2fa","#62b6cb","#5fa8d3","#0fa3b1","#b5e2fa","#5fa8d3","#62b6cb","#b892ff"],maxFontColorArr:8,fontColor:["#2c3e50","#42a5f5","#8093f1","#FF6EC7","#FF7F00","#8FBC8F","#EAADEA","#3299CC","#CDCDCD","#CC3299","#FF7F00","#2F4F4F"],friendLinks:[{title:"我的朋友",links:[{title:"Aurora",url:"https://mhuanjih.github.io",logo:"/avatar.jpg",describe:"...",cover:"/friendimg/myself.png"}]},{title:"大佬",links:[{title:"Aurora",url:"https://mhuanjih.github.io",logo:"/avatar.jpg",describe:"",cover:"/friendimg/myself.png"}]},{title:"小伙伴",links:[{title:"Aurora",url:"https://mhuanjih.github.io",logo:"/avatar.jpg",describe:"人生若只是初见,何事秋风悲画扇",cover:"/friendimg/myself.png"}]}],siteInformation:{title:"Lateness-theme",url:"https://mhuanjih.github.io",logo:"/avatar.jpg",describe:"...",cover:"/my-cover.png",contact:"QQ邮箱: 9176**036@qq.com , qq:9176**036",otherDescribe:["..."]},fontFamily:["-apple-system","hlt","tzt","sst","lf","xsf","lsf","cgt"],footer:["Copyright © by qsyyke All Rights Reserved.","<a target='_blank' href='http://www.beian.gov.cn/portal/registerSystemInfo?recordcode=53060202000142' style='display:inline-block;text-decoration:none;height:20px;line-height:20px;'><img src='' style='float:left;'/><p style='float:left;height:20px;line-height:20px;margin: 0px 0px 0px 5px;'>滇公网安备 53060202200142号</p></a>"],isShowFooter:!0,isShowThemeCopyright:!0,isShowRunTime:!0,startRunTime:"8/21/2022 12:10:00",prefixRuntime:"小破站已运行",message:["...(省略一千字)","开发中..."],recommendPageLength:30,recommendNoTitle:"`╮(￣▽￣)╭`",tagNoTitle:"暂时还没有标题哟",mood:"青衫烟雨客",isFitter:!0,defaultBorderRadius:10,defaultOpacity:1,isHomePageFollow:!1,defaultBlur:1,mobilePageSidebar:!1,split:"~",donate:{donateImg:["/aurora/wxpay.png","/aurora/zfbpay.jpg"],articlePage:!0,aboutPage:!0,donateProduct:[{name:"奶茶",img:"/aurora/nc.jpeg",price:18,prefix:"$"},{name:"全味奶茶",img:"/aurora/image-20210911233612031.png?",price:11,prefix:"￥"},{name:"热可可",img:"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/03.jpg",price:0,prefix:"￥"}],donateList:[{name:"初尘",msg:"主题太棒了",img:"/aurora/nc.jpeg",price:7,prefix:"￥"},{name:"糍粑不巴",msg:"你是好人",img:"/https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/9.jpg",price:.02,prefix:"￥"}]},comment:{showComment:!0,serverURL:"https://aurora-local-7hrjb6mp8-qsyyke.vercel.app/",emojis:["https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/alus","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/bilibili","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/tieba","https://cdn.jsdelivr.net/gh/walinejs/emojis@1.0.0/weibo"],avatar:"monsterid"},poster:{description:"阿巴阿巴",author:"qsyyke",preBlog:"Aurora",suffixBlog:" theme",avatar:"/avatar.jpg"},showOnlineMood:!0,showMoodEdit:!1,addMood:{siteName:"localhost:8080",appId:"q4LlYVTTk2r39sNrJr7BL9A6p",appKey:"VxezWTppppyX2LTx4TUK8w6e2"},customTopImg:{custom:!1,page:["/bg/555260.png","/bg/404901.png","/bg/734386.png"],friend:["/bg/669.png","/bg/5332.png"],tag:["/bg/763311.png"],mood:["/bg/5849.png"]},homeWps:["https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/%E8%83%8C%E6%99%AF/9.jpg","/bg/9.png"],homeWpsMobile:["https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/%E8%83%8C%E6%99%AF/6.jpg","/bg/6.png"],pageSize:4,githubUrl:"https://github.com/qsyyke/vuepress-theme-aurora",latestPageSize:6,showHomePageImg:!1,sidebarCatalogLevel:3,homePageImgApi:"https://www.dmoe.cc/random.php?return=text?time=-Infinity",mobileCutText:"Aurora",sidebarTag:"categories",showAddMood:!0,postImgApi:"https://picture.cco.vin/pic/rmimg?type=bing",articleH2Icon:"🌸",articleH3Icon:"🐳",articleH4Icon:"⛄",sidebarAvatar:"/avatar.jpg",sugCountPerMin:300,showRecommend:!0,articlePagination:!0,global:{sidebar:{showStatus:!0,perData:!1,social:!1,friendLink:!0,navbar:!1,latestPage:!0,message:!1,tag:!0,siteData:!1},footer:!1},excludePath:["/footer.html","/v1.3.0/","/plugin/","/node.html","/style.html"],categoriesIncludeFolderName:!1,wave:{showWave:!0},bubble:{show:!0,bubbleNumber:.14,bubbleAlpha:.6,alphaChangeSpeed:1e-5,size:.4,sizeChangeSpeed:2e-4,riseSpeed:.4,color:"255,255,255"},leanCloud:{appId:"2A2Dyd2AffrnldhwftlEddVn-MdYXbMMI",appKey:"qHYTbb91iOPLelyC9lpbXxLH",masterKey:"eUwfvS3luIPnPiHS5SpEhDYr"},showPageMeta:!0,randomSayApi:{method:"GET",urlApi:"https://v1.hitokoto.cn/?encode=text&c=a"},afDianUrl:"https://afdian.net/@qsyyke",homeTopText:"置顶",sidebarDesc:"努力学习，勤奋工作，让青春更加光彩。",showAboutPageBubble:!0,locales:{"/":{selectLanguageName:"English"}},selectLanguageText:"Languages",selectLanguageAriaLabel:"Select language",sidebar:"auto",sidebarDepth:2,contributors:!0,contributorsText:"Contributors",notFound:["There's nothing here.","How did we get here?","That's a Four-Oh-Four.","Looks like we've got some broken links."],backToHome:"Take me home",openInNewWindow:"open in new window"}},4125:(n,a,s)=>{s.d(a,{Z:()=>e});const e=[{data:{key:"v-245bbacd",path:"/how-to-write-article.html",title:"主题配置",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:08"},excerpt:"",headers:[],git:{updatedTime:1661586831e3,contributors:[{name:"LIU",email:"917675036@qq.com",commits:1}]}},key:"v-245bbacd",path:"/how-to-write-article.html",title:"主题配置",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:08"},excerpt:"",headers:[],content:'# 主题配置\n``` js\n# date是手动设置此篇文章编写的时间\ndate: "2021/11/26 20:08"\n\n# 手动设置此篇文章封面\ncoverUrl: "https://h2.ioliu.cn/bing/BrassBandTrumpet_ZH-CN8703910231_640x480.jpg?imageslim"\n\n# 是否置顶\nsticky: true\n\n# 设置keyword 多个以,分开\nkeyword: 设置keyword,设置keyword,设置keyword,设置keyword\n\n# 设置description\ndescription: 这是此篇文章的描述\n\n# 手动设置标题，否则使用h1标签作为标题\ntitle: 这是一篇demo文章\n\n# 这是设置标签，数组形式\ntag: [Aurora,demo]\n\n# 这里设置类别，数组形式\ncategories: [类别,demo类别]\n```\n\n\x3c!-- 写内容 --\x3e\n',contentRendered:'<h1 id="主题配置" tabindex="-1"><a class="header-anchor" href="#主题配置" aria-hidden="true">#</a> 主题配置</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code># date是手动设置此篇文章编写的时间\n<span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">"2021/11/26 20:08"</span>\n\n# 手动设置此篇文章封面\n<span class="token literal-property property">coverUrl</span><span class="token operator">:</span> <span class="token string">"https://h2.ioliu.cn/bing/BrassBandTrumpet_ZH-CN8703910231_640x480.jpg?imageslim"</span>\n\n# 是否置顶\n<span class="token literal-property property">sticky</span><span class="token operator">:</span> <span class="token boolean">true</span>\n\n# 设置keyword 多个以<span class="token punctuation">,</span>分开\n<span class="token literal-property property">keyword</span><span class="token operator">:</span> 设置keyword<span class="token punctuation">,</span>设置keyword<span class="token punctuation">,</span>设置keyword<span class="token punctuation">,</span>设置keyword\n\n# 设置description\n<span class="token literal-property property">description</span><span class="token operator">:</span> 这是此篇文章的描述\n\n# 手动设置标题，否则使用h1标签作为标题\n<span class="token literal-property property">title</span><span class="token operator">:</span> 这是一篇demo文章\n\n# 这是设置标签，数组形式\n<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token punctuation">[</span>Aurora<span class="token punctuation">,</span>demo<span class="token punctuation">]</span>\n\n# 这里设置类别，数组形式\n<span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">[</span>类别<span class="token punctuation">,</span>demo类别<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>\x3c!-- 写内容 --\x3e\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/how-to-write-article.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"how-to-write-article",filePath:"D:/个人博客/blog-demo/docs/how-to-write-article.md",filePathRelative:"how-to-write-article.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/how-to-write-article.html.vue",componentFilePathRelative:"pages/how-to-write-article.html.vue",componentFileChunkName:"v-245bbacd",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/how-to-write-article.html.js",dataFilePathRelative:"pages/how-to-write-article.html.js",dataFileChunkName:"v-245bbacd",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/how-to-write-article.html",htmlFilePathRelative:"how-to-write-article.html"},{data:{key:"v-e9f472bc",path:"/live2d.html",title:"",lang:"zh-CN",frontmatter:{layout:"Live2d"},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-e9f472bc",path:"/live2d.html",title:"",lang:"zh-CN",frontmatter:{layout:"Live2d"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/live2d.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"live2d",filePath:"D:/个人博客/blog-demo/docs/live2d.md",filePathRelative:"live2d.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/live2d.html.vue",componentFilePathRelative:"pages/live2d.html.vue",componentFileChunkName:"v-e9f472bc",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/live2d.html.js",dataFilePathRelative:"pages/live2d.html.js",dataFileChunkName:"v-e9f472bc",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/live2d.html",htmlFilePathRelative:"live2d.html"},{data:{key:"v-7128c52e",path:"/mood.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"layout: Mood",slug:"layout-mood",children:[{level:3,title:"xx日记",slug:"xx日记",children:[]}]}],git:{updatedTime:null,contributors:[]}},key:"v-7128c52e",path:"/mood.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"layout: Mood",slug:"layout-mood",children:[{level:3,title:"xx日记",slug:"xx日记",children:[]}]}],content:"\r\n---\r\nlayout: Mood\r\n---\r\n### xx日记",contentRendered:'<hr>\n<h2 id="layout-mood" tabindex="-1"><a class="header-anchor" href="#layout-mood" aria-hidden="true">#</a> layout: Mood</h2>\n<h3 id="xx日记" tabindex="-1"><a class="header-anchor" href="#xx日记" aria-hidden="true">#</a> xx日记</h3>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/mood.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"mood",filePath:"D:/个人博客/blog-demo/docs/mood.md",filePathRelative:"mood.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/mood.html.vue",componentFilePathRelative:"pages/mood.html.vue",componentFileChunkName:"v-7128c52e",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/mood.html.js",dataFilePathRelative:"pages/mood.html.js",dataFileChunkName:"v-7128c52e",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/mood.html",htmlFilePathRelative:"mood.html"},{data:{key:"v-2c4aad21",path:"/next-mood.html",title:"",lang:"zh-CN",frontmatter:{layout:"NextMood"},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-2c4aad21",path:"/next-mood.html",title:"",lang:"zh-CN",frontmatter:{layout:"NextMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/next-mood.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"next-mood",filePath:"D:/个人博客/blog-demo/docs/next-mood.md",filePathRelative:"next-mood.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/next-mood.html.vue",componentFilePathRelative:"pages/next-mood.html.vue",componentFileChunkName:"v-2c4aad21",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/next-mood.html.js",dataFilePathRelative:"pages/next-mood.html.js",dataFileChunkName:"v-2c4aad21",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/next-mood.html",htmlFilePathRelative:"next-mood.html"},{data:{key:"v-a1c53cc0",path:"/photo.html",title:"",lang:"zh-CN",frontmatter:{layout:"Photo"},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-a1c53cc0",path:"/photo.html",title:"",lang:"zh-CN",frontmatter:{layout:"Photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/photo.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"photo",filePath:"D:/个人博客/blog-demo/docs/photo.md",filePathRelative:"photo.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/photo.html.vue",componentFilePathRelative:"pages/photo.html.vue",componentFileChunkName:"v-a1c53cc0",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/photo.html.js",dataFilePathRelative:"pages/photo.html.js",dataFileChunkName:"v-a1c53cc0",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/photo.html",htmlFilePathRelative:"photo.html"},{data:{key:"v-79dc7caa",path:"/use.html",title:"代码测试",lang:"zh-CN",frontmatter:{date:"2021/12/20 11:05",sticky:!0,title:"代码测试"},excerpt:"",headers:[{level:2,title:"代码测试",slug:"代码测试",children:[{level:3,title:"312",slug:"_312",children:[]},{level:3,title:"123",slug:"_123",children:[]}]}],git:{updatedTime:1661586831e3,contributors:[{name:"LIU",email:"917675036@qq.com",commits:1}]}},key:"v-79dc7caa",path:"/use.html",title:"代码测试",lang:"zh-CN",frontmatter:{date:"2021/12/20 11:05",sticky:!0,title:"代码测试"},excerpt:"",headers:[{level:2,title:"代码测试",slug:"代码测试",children:[{level:3,title:"312",slug:"_312",children:[]},{level:3,title:"123",slug:"_123",children:[]}]}],content:'## 代码测试<badge text="132"/>\n`AABB上上下下左左右右`\n\n![image-20211026234805318](https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/55.jpg)\n\n### 312 \n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8A%A8%E5%9B%BE/53.gif" alt="">\n\n###  123 <badge text=""/>\n\n``` js\n132\n```\n\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/04.jpg" alt="">\n',contentRendered:'<h2 id="代码测试" tabindex="-1"><a class="header-anchor" href="#代码测试" aria-hidden="true">#</a> 代码测试<badge text="132"/></h2>\n<p><code>AABB上上下下左左右右</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20211026234805318" originSrc="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/55.jpg" data="aurora"></p>\n<h3 id="_312" tabindex="-1"><a class="header-anchor" href="#_312" aria-hidden="true">#</a> 312</h3>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/动图/53.gif" alt="">\n<h3 id="_123" tabindex="-1"><a class="header-anchor" href="#_123" aria-hidden="true">#</a> 123 <badge text=""/></h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token number">132</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/04.jpg" alt="">\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/use.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"use",filePath:"D:/个人博客/blog-demo/docs/use.md",filePathRelative:"use.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/use.html.vue",componentFilePathRelative:"pages/use.html.vue",componentFileChunkName:"v-79dc7caa",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/use.html.js",dataFilePathRelative:"pages/use.html.js",dataFileChunkName:"v-79dc7caa",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/use.html",htmlFilePathRelative:"use.html"},{data:{key:"v-7d76a0cf",path:"/base/admin.html",title:"CMD",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"CMD",description:"..."},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-7d76a0cf",path:"/base/admin.html",title:"CMD",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"CMD",description:"..."},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/admin.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"admin",filePath:"D:/个人博客/blog-demo/docs/base/admin.md",filePathRelative:"base/admin.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/admin.html.vue",componentFilePathRelative:"pages/base/admin.html.vue",componentFileChunkName:"v-7d76a0cf",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/admin.html.js",dataFilePathRelative:"pages/base/admin.html.js",dataFileChunkName:"v-7d76a0cf",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/admin.html",htmlFilePathRelative:"base/admin.html"},{data:{key:"v-ed98bed8",path:"/base/Agreement.html",title:"HTTP协议",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:50",title:"HTTP协议",tag:["HTTP"]},excerpt:"",headers:[{level:2,title:"http协议详解",slug:"http协议详解",children:[{level:3,title:"HTTP状态码",slug:"http状态码",children:[]}]}],git:{updatedTime:null,contributors:[]}},key:"v-ed98bed8",path:"/base/Agreement.html",title:"HTTP协议",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:50",title:"HTTP协议",tag:["HTTP"]},excerpt:"",headers:[{level:2,title:"http协议详解",slug:"http协议详解",children:[{level:3,title:"HTTP状态码",slug:"http状态码",children:[]}]}],content:'\r\n## http协议详解\r\n#### 超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网数据通信的基础。\r\n##### HTTP协议概述\r\n\r\nHTTP是一个客户终端（用户）和服务器端（网站)请求和答应是标准（TCP）。通过使用网页浏览，网络爬虫或者其他的工具，客户端发起一个HTTP协议到服务器上指定端口（默认端口为80）。我们成这个客户端为用户代理程序（user agent）。应答的服务器上存着一些资源，比如HTML文件和图像。我们称这个应答服务器为原服务器（origin server）。在用户代理和原服务器中间可能存在多个中间层，比如代理服务器、网关或者隧道（tunnel）。\r\n\r\n尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用他或他支持的层。事实上，HTTP协议可以在任何互联网协议上，或其他网络上实现。HRRP假定其它下层协议提供可靠传输。因此，任何能够提供这种保证的协议都可以被其他使用。因此也就是在其他TCP/IP协议族中使用TCP作为其传输层。\r\n\r\n通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器就会向客户端返回一个状态，比如"HTTP/1.1 200 OK"，以及返回的内容，如请求文件、错误消息、或者其他信息。\r\n\r\n##### HTTP工作原理\r\n\r\nHTTP协议定义web客户端如何从web服务器请求web页面，以及服务器如何把web页面传给客户端。HTTP协议采用了请求/相应模型。客户端向服务器发送一个请求报文，请求报文含请求的方法、URL、协议版本、请求头部和请求数据。\r\n\r\n注：**套接字**(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口。\r\n\r\n**以下是HTTP请求/相应的步骤**\r\n\r\n**1.客户端连接到web服务器**\r\n\r\n一个HTTP客户端，通常是浏览器，与web服务器的HTTP端口建立一个TCP套接字连接。\r\n\r\n **2.发送HTTP请求**\r\n\r\n通过TCP套接字，客户端向web服务器发送一个文本的请求报文。HTTP请求报文由3部分组成（请求行+请求头+请求体）\r\n\r\n**3.服务器接收请求并返回HTTP响应**\r\n\r\nweb服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。响应头由三部分组成\r\n\r\n1、一个数字和文字组成的状态码，用来显示请求成功或者失败。\r\n\r\n2、响应头，和请求头一样，响应头也包含许多有用的信息，比如服务器类型、日期时间、内容类型和长度等。\r\n\r\n3、响应体，也就是响应报文。\r\n\r\n**4.释放连接TCP连接**\r\n\r\n若connection模式为close，则服务器主动关闭连接，客户端被动关闭连接，释放TCP连接。\r\n\r\n若connection模式为keepalive，组该连接会保持一段时间，再改时间内可以说基础接收请求。\r\n\r\n**5.客户端浏览器解析HTML内容**\r\n\r\n客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。\r\n\r\n##### 举个例子\r\n**在浏览器地址栏输入URL之后会经历以下流程**\r\n1.浏览器向DNS服务器清洁解析该URL中是域名所对应的IP地址；\r\n\r\n2.解析出ip地址之后，根据IP地址和默认端口80，和服务器建立TCP连接；\r\n\r\n3.浏览器发出读取文件（URL中域名后面部分对应的文件）的HTTP请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器；\r\n\r\n4.服务器对浏览器请求做出相应，并把对应的html文本发送给浏览器；\r\n\r\n5.释放TCP连接；\r\n\r\n6.浏览器将该html文本解析，并显示内容\r\n\r\n##### 重点知识点\r\n- http协议是基于TCP/IP协议之上的应用层协议\r\n\r\n- 基于请求-响应的模式\r\n\r\n**http协议规定，请求从客户端发出，最后服务器响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收请求之前不会发送响应。**\r\n\r\n- 无状态保存\r\n\r\nHTTP是一种不保存状态，即无状态协议。http协议自身不对请求和响应之间的状态进行保存。也就是说在http这个级别，协议对于发送过的请求或响应都不做持久化处理。\r\n\r\n使用HTTP协议，每当有新的请求发送时，就会有对应的新的响应产生。协议本身并不能保留之前的一切的请求或响应报文信息。这是为了更快的处理大量事务，确保协议的可伸缩性，而特意吧HTTP协议设计成如此简单。可是，随着web的不断发展，因无状态而导致业务处理变得棘手的情况增多了。跳转页面却任然需要保存登录状态这种情况就需要保存状态。http为无状态协议，但是为了实现这种功能就引入了cookie技术。有了cookie再使用HTTP协议，就可以管理状态了。有关cookie的讲解稍后继续。\r\n\r\n**无连接**\r\n\r\n无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并受到客户的应答后，即断开连接。才用这种方式，可以节省传输时间，并且可以提高并发性，不能和每个用户建立长久的连接，请求一次响应一次，服务器和客户端连接就中断了。早期的http是请求一个相应之后直接就断开了，但是现在的http协议1.1版本不是直接断开，而是等待几秒钟，目的是等待用户的后续操作，如果用户在这几秒内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒中，用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数。默认3秒\r\n\r\n#### 七层网络模型\r\n物理层 > 数据链路层 > 网络层 > 传输层 > 会话层 > 表示层 > 应用层\r\n\r\n- 应用层：网络服务与最终用户的一个接口（ 协议有：http，https）\r\n- 表示层：数据的表示安全压缩（五层模型已合并到应用层）\r\n- 会话层：建立、管理、终止会话（五层模型已合并到应用层）对应主机进程，指本地主机与远程主机正在进行的会话\r\n- 传输层：定义传输数据的协议端口号，以及流控和差错校验。（协议有：TCP, UDP数据一旦离开网卡即进入网络传输层）\r\n- 网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。（协议有：ICMP IGMP IP（IPV4 IPV6））\r\n- 数据链路层：建立逻辑连接，进行硬件地址寻址，差错校验等功能（由底层网络定义协议）将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。\r\n- 物理层：建立维护断开物理连接（由底层网络定义协议）TCP/IP层级模型结构，应用层之间的协议通过逐级调用传输层、网络层和物理数据链路层而可以实现应用层的应用程序通讯互联。\r\n#### HTTP请求方法\r\n\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/%E7%AC%94%E8%AE%B0/1.png" alt="">\r\n\r\n##### 比较get和post\r\n**结论：get和post没有实质区别，只是报文格式不同**\r\n**get - 从指定的资源请求数据**\r\n**post - 向指定的资源提交要被处理的数据**\r\n\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/%E7%AC%94%E8%AE%B0/2.png" alt="">\r\n\r\n##### GET方法\r\n请注意查询字符串（名称/值对）是在get请求的url中发送的\r\n\r\n- get请求可被缓存\r\n- get请求保存在浏览器历史记录中\r\n- get请求可被收藏为书签\r\n- get请求不应在处理敏感数据时使用\r\n- get请求有长度限制\r\n- get请求只应当用于取回数据\r\n##### POST方法\r\n请注意，查询字符串（名称/值对）是在post请求的http**主体**中发送的\r\n\r\n- post请求不会被缓存\r\n\r\n- post请求不会保留在浏览器历史记录中\r\n\r\n- post请求不能被收藏为书签\r\n\r\n- post请求对数据长度没有要求\r\n\r\n**post与get安全性比较**\r\n按照网上大部分文章解释，post比get安全，因为地址栏看不见。\r\n\r\n然而从传输角度来说他们都是不安全的，因为http在网络上是明文传输的只要在网络节点上捉包，就能完整的获取数据报文。要想安全传输，就只有加密也就是https。\r\n\r\n**GET产生一个TCP数据包，POST产生两个数据包**\r\n对于get方式请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）\r\n\r\n而对于post，浏览器先发送header，服务器响应100continue，浏览器再发送data，服务器响应200（返回数据）\r\n\r\nso，基于这一点三个注意\r\n\r\n1.get与post都有自己的语义，不能随便混用。\r\n\r\n2.据研究，在网络环境好的情况下，发一次包和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次保的TCP在验证数据包的完整性上，有非常大的优点。\r\n\r\n3.并不是所有的浏览器都发送两次包，Firefox就只发送一次。\r\n\r\n### HTTP状态码\r\n所有HTTP响应的第一行都是状态行，依次是当前http版本号，三位数字组成的状态码，以及描述状态的短语，彼此由空格分隔。\r\n\r\n状态码的第一个数字代表当前响应的类型：\r\n\r\n- 1xx消息——请求已被服务器接收，继续处理\r\n- 2xx成功——请求已成功被服务器接收、理解、并接受\r\n- 3xx重定向——需要后续操作才能完成这一请求\r\n- 4xx请求错误——请求含有词法错误或者无法被执行\r\n- 5xx服务器错误——服务器在处理某个正确请求时发生错误\r\n\r\n|      |             **类型**             |        **原因短语**        |\r\n| ---- | :------------------------------: | :------------------------: |\r\n| 1xx  |    information（信息状态码）     |     接收的请求正在处理     |\r\n| 2xx  |      success（成功状态码）       |     请求正常，处理完毕     |\r\n| 3xx  |   redirection（重定向状态码）    | 需求进行附加操作已完成请求 |\r\n| 4xx  | client error（客户端错误状态码） |     服务器无法处理请求     |\r\n| 5xx  | server error（服务器错误状态码)  |     服务器处理请求出错     |\r\n\r\n\r\n\r\n#### URL\r\nurl = 协议 + 域名或IP + 端口号 + 路径 + 查询字符串 + 锚点\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/%E7%AC%94%E8%AE%B0/3.png" alt="">\r\n\r\n超文本传输协议（http）的统一资源定位符，将从因特网获取信息的五个基本元素，包括在一个简单的地址中；\r\n\r\n路径没有必要有后缀\r\nURL的全称是统一资源定位符\r\n锚点不支持中文，锚点不会传给服务器，无法在network面板看到\r\nDNS\r\nNDS就像是个翻译官，能够把baidu.com翻译成220.181.111.188 让机器理解。\r\n\r\nDNS是用来做域名解析的，他会在你上网输入网址后，把它转换成IP，然后去访问服务器。\r\n\r\n参考文档：https://www.cnblogs.com/weibanggang/p/9454581.html\r\n\r\n参考文档：https://www.w3school.com.cn/tags/html_ref_httpmethods.asp\r\n\r\n参考文档：https://www.cnblogs.com/an-wen/p/11180076.html\r\n\r\n\r\n————————————————\r\n\r\n原文链接：https://blog.csdn.net/weixin_45948938/article/details/104530330',contentRendered:'<h2 id="http协议详解" tabindex="-1"><a class="header-anchor" href="#http协议详解" aria-hidden="true">#</a> http协议详解</h2>\n<h4 id="超文本传输协议-是一种用于分布式、协作式和超媒体信息系统的应用层协议。http是万维网数据通信的基础。" tabindex="-1"><a class="header-anchor" href="#超文本传输协议-是一种用于分布式、协作式和超媒体信息系统的应用层协议。http是万维网数据通信的基础。" aria-hidden="true">#</a> 超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网数据通信的基础。</h4>\n<h5 id="http协议概述" tabindex="-1"><a class="header-anchor" href="#http协议概述" aria-hidden="true">#</a> HTTP协议概述</h5>\n<p>HTTP是一个客户终端（用户）和服务器端（网站)请求和答应是标准（TCP）。通过使用网页浏览，网络爬虫或者其他的工具，客户端发起一个HTTP协议到服务器上指定端口（默认端口为80）。我们成这个客户端为用户代理程序（user agent）。应答的服务器上存着一些资源，比如HTML文件和图像。我们称这个应答服务器为原服务器（origin server）。在用户代理和原服务器中间可能存在多个中间层，比如代理服务器、网关或者隧道（tunnel）。</p>\n<p>尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用他或他支持的层。事实上，HTTP协议可以在任何互联网协议上，或其他网络上实现。HRRP假定其它下层协议提供可靠传输。因此，任何能够提供这种保证的协议都可以被其他使用。因此也就是在其他TCP/IP协议族中使用TCP作为其传输层。</p>\n<p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器就会向客户端返回一个状态，比如&quot;HTTP/1.1 200 OK&quot;，以及返回的内容，如请求文件、错误消息、或者其他信息。</p>\n<h5 id="http工作原理" tabindex="-1"><a class="header-anchor" href="#http工作原理" aria-hidden="true">#</a> HTTP工作原理</h5>\n<p>HTTP协议定义web客户端如何从web服务器请求web页面，以及服务器如何把web页面传给客户端。HTTP协议采用了请求/相应模型。客户端向服务器发送一个请求报文，请求报文含请求的方法、URL、协议版本、请求头部和请求数据。</p>\n<p>注：<strong>套接字</strong>(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口。</p>\n<p><strong>以下是HTTP请求/相应的步骤</strong></p>\n<p><strong>1.客户端连接到web服务器</strong></p>\n<p>一个HTTP客户端，通常是浏览器，与web服务器的HTTP端口建立一个TCP套接字连接。</p>\n<p><strong>2.发送HTTP请求</strong></p>\n<p>通过TCP套接字，客户端向web服务器发送一个文本的请求报文。HTTP请求报文由3部分组成（请求行+请求头+请求体）</p>\n<p><strong>3.服务器接收请求并返回HTTP响应</strong></p>\n<p>web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。响应头由三部分组成</p>\n<p>1、一个数字和文字组成的状态码，用来显示请求成功或者失败。</p>\n<p>2、响应头，和请求头一样，响应头也包含许多有用的信息，比如服务器类型、日期时间、内容类型和长度等。</p>\n<p>3、响应体，也就是响应报文。</p>\n<p><strong>4.释放连接TCP连接</strong></p>\n<p>若connection模式为close，则服务器主动关闭连接，客户端被动关闭连接，释放TCP连接。</p>\n<p>若connection模式为keepalive，组该连接会保持一段时间，再改时间内可以说基础接收请求。</p>\n<p><strong>5.客户端浏览器解析HTML内容</strong></p>\n<p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p>\n<h5 id="举个例子" tabindex="-1"><a class="header-anchor" href="#举个例子" aria-hidden="true">#</a> 举个例子</h5>\n<p><strong>在浏览器地址栏输入URL之后会经历以下流程</strong>\n1.浏览器向DNS服务器清洁解析该URL中是域名所对应的IP地址；</p>\n<p>2.解析出ip地址之后，根据IP地址和默认端口80，和服务器建立TCP连接；</p>\n<p>3.浏览器发出读取文件（URL中域名后面部分对应的文件）的HTTP请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器；</p>\n<p>4.服务器对浏览器请求做出相应，并把对应的html文本发送给浏览器；</p>\n<p>5.释放TCP连接；</p>\n<p>6.浏览器将该html文本解析，并显示内容</p>\n<h5 id="重点知识点" tabindex="-1"><a class="header-anchor" href="#重点知识点" aria-hidden="true">#</a> 重点知识点</h5>\n<ul>\n<li>\n<p>http协议是基于TCP/IP协议之上的应用层协议</p>\n</li>\n<li>\n<p>基于请求-响应的模式</p>\n</li>\n</ul>\n<p><strong>http协议规定，请求从客户端发出，最后服务器响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收请求之前不会发送响应。</strong></p>\n<ul>\n<li>无状态保存</li>\n</ul>\n<p>HTTP是一种不保存状态，即无状态协议。http协议自身不对请求和响应之间的状态进行保存。也就是说在http这个级别，协议对于发送过的请求或响应都不做持久化处理。</p>\n<p>使用HTTP协议，每当有新的请求发送时，就会有对应的新的响应产生。协议本身并不能保留之前的一切的请求或响应报文信息。这是为了更快的处理大量事务，确保协议的可伸缩性，而特意吧HTTP协议设计成如此简单。可是，随着web的不断发展，因无状态而导致业务处理变得棘手的情况增多了。跳转页面却任然需要保存登录状态这种情况就需要保存状态。http为无状态协议，但是为了实现这种功能就引入了cookie技术。有了cookie再使用HTTP协议，就可以管理状态了。有关cookie的讲解稍后继续。</p>\n<p><strong>无连接</strong></p>\n<p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并受到客户的应答后，即断开连接。才用这种方式，可以节省传输时间，并且可以提高并发性，不能和每个用户建立长久的连接，请求一次响应一次，服务器和客户端连接就中断了。早期的http是请求一个相应之后直接就断开了，但是现在的http协议1.1版本不是直接断开，而是等待几秒钟，目的是等待用户的后续操作，如果用户在这几秒内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒中，用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数。默认3秒</p>\n<h4 id="七层网络模型" tabindex="-1"><a class="header-anchor" href="#七层网络模型" aria-hidden="true">#</a> 七层网络模型</h4>\n<p>物理层 &gt; 数据链路层 &gt; 网络层 &gt; 传输层 &gt; 会话层 &gt; 表示层 &gt; 应用层</p>\n<ul>\n<li>应用层：网络服务与最终用户的一个接口（ 协议有：http，https）</li>\n<li>表示层：数据的表示安全压缩（五层模型已合并到应用层）</li>\n<li>会话层：建立、管理、终止会话（五层模型已合并到应用层）对应主机进程，指本地主机与远程主机正在进行的会话</li>\n<li>传输层：定义传输数据的协议端口号，以及流控和差错校验。（协议有：TCP, UDP数据一旦离开网卡即进入网络传输层）</li>\n<li>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。（协议有：ICMP IGMP IP（IPV4 IPV6））</li>\n<li>数据链路层：建立逻辑连接，进行硬件地址寻址，差错校验等功能（由底层网络定义协议）将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</li>\n<li>物理层：建立维护断开物理连接（由底层网络定义协议）TCP/IP层级模型结构，应用层之间的协议通过逐级调用传输层、网络层和物理数据链路层而可以实现应用层的应用程序通讯互联。</li>\n</ul>\n<h4 id="http请求方法" tabindex="-1"><a class="header-anchor" href="#http请求方法" aria-hidden="true">#</a> HTTP请求方法</h4>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/笔记/1.png" alt="">\n<h5 id="比较get和post" tabindex="-1"><a class="header-anchor" href="#比较get和post" aria-hidden="true">#</a> 比较get和post</h5>\n<p><strong>结论：get和post没有实质区别，只是报文格式不同</strong>\n<strong>get - 从指定的资源请求数据</strong>\n<strong>post - 向指定的资源提交要被处理的数据</strong></p>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/笔记/2.png" alt="">\n<h5 id="get方法" tabindex="-1"><a class="header-anchor" href="#get方法" aria-hidden="true">#</a> GET方法</h5>\n<p>请注意查询字符串（名称/值对）是在get请求的url中发送的</p>\n<ul>\n<li>get请求可被缓存</li>\n<li>get请求保存在浏览器历史记录中</li>\n<li>get请求可被收藏为书签</li>\n<li>get请求不应在处理敏感数据时使用</li>\n<li>get请求有长度限制</li>\n<li>get请求只应当用于取回数据</li>\n</ul>\n<h5 id="post方法" tabindex="-1"><a class="header-anchor" href="#post方法" aria-hidden="true">#</a> POST方法</h5>\n<p>请注意，查询字符串（名称/值对）是在post请求的http<strong>主体</strong>中发送的</p>\n<ul>\n<li>\n<p>post请求不会被缓存</p>\n</li>\n<li>\n<p>post请求不会保留在浏览器历史记录中</p>\n</li>\n<li>\n<p>post请求不能被收藏为书签</p>\n</li>\n<li>\n<p>post请求对数据长度没有要求</p>\n</li>\n</ul>\n<p><strong>post与get安全性比较</strong>\n按照网上大部分文章解释，post比get安全，因为地址栏看不见。</p>\n<p>然而从传输角度来说他们都是不安全的，因为http在网络上是明文传输的只要在网络节点上捉包，就能完整的获取数据报文。要想安全传输，就只有加密也就是https。</p>\n<p><strong>GET产生一个TCP数据包，POST产生两个数据包</strong>\n对于get方式请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）</p>\n<p>而对于post，浏览器先发送header，服务器响应100continue，浏览器再发送data，服务器响应200（返回数据）</p>\n<p>so，基于这一点三个注意</p>\n<p>1.get与post都有自己的语义，不能随便混用。</p>\n<p>2.据研究，在网络环境好的情况下，发一次包和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次保的TCP在验证数据包的完整性上，有非常大的优点。</p>\n<p>3.并不是所有的浏览器都发送两次包，Firefox就只发送一次。</p>\n<h3 id="http状态码" tabindex="-1"><a class="header-anchor" href="#http状态码" aria-hidden="true">#</a> HTTP状态码</h3>\n<p>所有HTTP响应的第一行都是状态行，依次是当前http版本号，三位数字组成的状态码，以及描述状态的短语，彼此由空格分隔。</p>\n<p>状态码的第一个数字代表当前响应的类型：</p>\n<ul>\n<li>1xx消息——请求已被服务器接收，继续处理</li>\n<li>2xx成功——请求已成功被服务器接收、理解、并接受</li>\n<li>3xx重定向——需要后续操作才能完成这一请求</li>\n<li>4xx请求错误——请求含有词法错误或者无法被执行</li>\n<li>5xx服务器错误——服务器在处理某个正确请求时发生错误</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style="text-align:center"><strong>类型</strong></th>\n<th style="text-align:center"><strong>原因短语</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td style="text-align:center">information（信息状态码）</td>\n<td style="text-align:center">接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td style="text-align:center">success（成功状态码）</td>\n<td style="text-align:center">请求正常，处理完毕</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td style="text-align:center">redirection（重定向状态码）</td>\n<td style="text-align:center">需求进行附加操作已完成请求</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td style="text-align:center">client error（客户端错误状态码）</td>\n<td style="text-align:center">服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td style="text-align:center">server error（服务器错误状态码)</td>\n<td style="text-align:center">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<h4 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> URL</h4>\n<p>url = 协议 + 域名或IP + 端口号 + 路径 + 查询字符串 + 锚点\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/笔记/3.png" alt=""></p>\n<p>超文本传输协议（http）的统一资源定位符，将从因特网获取信息的五个基本元素，包括在一个简单的地址中；</p>\n<p>路径没有必要有后缀\nURL的全称是统一资源定位符\n锚点不支持中文，锚点不会传给服务器，无法在network面板看到\nDNS\nNDS就像是个翻译官，能够把baidu.com翻译成220.181.111.188 让机器理解。</p>\n<p>DNS是用来做域名解析的，他会在你上网输入网址后，把它转换成IP，然后去访问服务器。</p>\n<p>参考文档：https://www.cnblogs.com/weibanggang/p/9454581.html</p>\n<p>参考文档：https://www.w3school.com.cn/tags/html_ref_httpmethods.asp</p>\n<p>参考文档：https://www.cnblogs.com/an-wen/p/11180076.html</p>\n<p>————————————————</p>\n<p>原文链接：https://blog.csdn.net/weixin_45948938/article/details/104530330</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/Agreement.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Agreement",filePath:"D:/个人博客/blog-demo/docs/base/Agreement.md",filePathRelative:"base/Agreement.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Agreement.html.vue",componentFilePathRelative:"pages/base/Agreement.html.vue",componentFileChunkName:"v-ed98bed8",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Agreement.html.js",dataFilePathRelative:"pages/base/Agreement.html.js",dataFileChunkName:"v-ed98bed8",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/Agreement.html",htmlFilePathRelative:"base/Agreement.html"},{data:{key:"v-4cf350f9",path:"/base/docs.html",title:"Vue...",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"Vue..."},excerpt:"",headers:[{level:2,title:"vue...",slug:"vue",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-4cf350f9",path:"/base/docs.html",title:"Vue...",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"Vue..."},excerpt:"",headers:[{level:2,title:"vue...",slug:"vue",children:[]}],content:"## vue...",contentRendered:'<h2 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> vue...</h2>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/docs.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"docs",filePath:"D:/个人博客/blog-demo/docs/base/docs.md",filePathRelative:"base/docs.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/docs.html.vue",componentFilePathRelative:"pages/base/docs.html.vue",componentFileChunkName:"v-4cf350f9",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/docs.html.js",dataFilePathRelative:"pages/base/docs.html.js",dataFileChunkName:"v-4cf350f9",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/docs.html",htmlFilePathRelative:"base/docs.html"},{data:{key:"v-48959c4c",path:"/base/Interaction.html",title:"前后端交互详细步骤",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:46",title:"前后端交互详细步骤"},excerpt:"",headers:[{level:2,title:"前后端交互",slug:"前后端交互",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-48959c4c",path:"/base/Interaction.html",title:"前后端交互详细步骤",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:46",title:"前后端交互详细步骤"},excerpt:"",headers:[{level:2,title:"前后端交互",slug:"前后端交互",children:[]}],content:'\r\n## 前后端交互\r\n浏览器输入域名到页面显示完整的流程\r\n##### 1.浏览器输入地址比如http://www.baidu.com，根据域名和端口号通过DNS解析成IP地址\r\n##### 2.根据IP地址以及端口号找到对应的服务器\r\n<a href="http://www.imooc.com/wiki/httplesson/socketprotocol.html">(http协议中的tcp协议) 协议三次握手和四次挥手</a>\r\nhttp的默认端口号80\r\nhttps默认端口号443\r\nftp默认端口21\r\nmysql默认端口号3306\r\n\r\n##### 3.服务器接收到来自前端的请求，分配到对应路由‘/’\r\n\r\n##### 4.在路由里取到对应的文件。例如 index.html\r\n **（1）直接将index.html文件返回**\r\n``` \r\n\ta.有可能首页没什么数据，就是个静态页\r\n\tb.也有可能页面并不完整，但是后端不渲染，先返回给前端，后期前端通过ajax重新渲染\r\n```\r\n  **（2）先取出index.html，然后再从数据库里拿到数据，根据数据完成页面模板替换，数据填充，得到完整的页面html字符串，再返回给前端（后端渲染）**\r\n注：1.前端渲染减轻服务器压力，但是不利于搜索引擎优化**\r\n2.后端渲染服务器压力较大，但是利于搜索引擎优化\r\n\r\n##### 5.浏览器拿到index.html了，就开始渲染\r\n##### 6.如果遇到了link标签，继续向对应服务器发送一个http请求，请求css文件，渲染样式\r\n##### 7.如果遇到了script标签，继续向对应服务器发送一个http请求，请求js文件，执行逻辑\r\n##### 8.如果js里有ajax请求，就会请求对应服务器\r\n（1）异步请求，再回调里才能拿到结果，或者可以使用promise\r\n（2）状态码\r\n（3）数据格式，一般来讲都是json\r\n\r\n##### 9.服务器进入相应的路由，在这个路由代码里就会去查找数据库，得到json格式的数据，再返回给前端\r\n##### 10.前端拿到json数据以后更新页面的部分内容\r\n',contentRendered:'<h2 id="前后端交互" tabindex="-1"><a class="header-anchor" href="#前后端交互" aria-hidden="true">#</a> 前后端交互</h2>\n<p>浏览器输入域名到页面显示完整的流程</p>\n<h5 id="_1-浏览器输入地址比如http-www-baidu-com-根据域名和端口号通过dns解析成ip地址" tabindex="-1"><a class="header-anchor" href="#_1-浏览器输入地址比如http-www-baidu-com-根据域名和端口号通过dns解析成ip地址" aria-hidden="true">#</a> 1.浏览器输入地址比如http://www.baidu.com，根据域名和端口号通过DNS解析成IP地址</h5>\n<h5 id="_2-根据ip地址以及端口号找到对应的服务器" tabindex="-1"><a class="header-anchor" href="#_2-根据ip地址以及端口号找到对应的服务器" aria-hidden="true">#</a> 2.根据IP地址以及端口号找到对应的服务器</h5>\n<p><a href="http://www.imooc.com/wiki/httplesson/socketprotocol.html">(http协议中的tcp协议) 协议三次握手和四次挥手</a>\nhttp的默认端口号80\nhttps默认端口号443\nftp默认端口21\nmysql默认端口号3306</p>\n<h5 id="_3-服务器接收到来自前端的请求-分配到对应路由" tabindex="-1"><a class="header-anchor" href="#_3-服务器接收到来自前端的请求-分配到对应路由" aria-hidden="true">#</a> 3.服务器接收到来自前端的请求，分配到对应路由‘/’</h5>\n<h5 id="_4-在路由里取到对应的文件。例如-index-html" tabindex="-1"><a class="header-anchor" href="#_4-在路由里取到对应的文件。例如-index-html" aria-hidden="true">#</a> 4.在路由里取到对应的文件。例如 index.html</h5>\n<p><strong>（1）直接将index.html文件返回</strong></p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>\ta.有可能首页没什么数据，就是个静态页\n\tb.也有可能页面并不完整，但是后端不渲染，先返回给前端，后期前端通过ajax重新渲染\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>（2）先取出index.html，然后再从数据库里拿到数据，根据数据完成页面模板替换，数据填充，得到完整的页面html字符串，再返回给前端（后端渲染）</strong>\n注：1.前端渲染减轻服务器压力，但是不利于搜索引擎优化**\n2.后端渲染服务器压力较大，但是利于搜索引擎优化</p>\n<h5 id="_5-浏览器拿到index-html了-就开始渲染" tabindex="-1"><a class="header-anchor" href="#_5-浏览器拿到index-html了-就开始渲染" aria-hidden="true">#</a> 5.浏览器拿到index.html了，就开始渲染</h5>\n<h5 id="_6-如果遇到了link标签-继续向对应服务器发送一个http请求-请求css文件-渲染样式" tabindex="-1"><a class="header-anchor" href="#_6-如果遇到了link标签-继续向对应服务器发送一个http请求-请求css文件-渲染样式" aria-hidden="true">#</a> 6.如果遇到了link标签，继续向对应服务器发送一个http请求，请求css文件，渲染样式</h5>\n<h5 id="_7-如果遇到了script标签-继续向对应服务器发送一个http请求-请求js文件-执行逻辑" tabindex="-1"><a class="header-anchor" href="#_7-如果遇到了script标签-继续向对应服务器发送一个http请求-请求js文件-执行逻辑" aria-hidden="true">#</a> 7.如果遇到了script标签，继续向对应服务器发送一个http请求，请求js文件，执行逻辑</h5>\n<h5 id="_8-如果js里有ajax请求-就会请求对应服务器" tabindex="-1"><a class="header-anchor" href="#_8-如果js里有ajax请求-就会请求对应服务器" aria-hidden="true">#</a> 8.如果js里有ajax请求，就会请求对应服务器</h5>\n<p>（1）异步请求，再回调里才能拿到结果，或者可以使用promise\n（2）状态码\n（3）数据格式，一般来讲都是json</p>\n<h5 id="_9-服务器进入相应的路由-在这个路由代码里就会去查找数据库-得到json格式的数据-再返回给前端" tabindex="-1"><a class="header-anchor" href="#_9-服务器进入相应的路由-在这个路由代码里就会去查找数据库-得到json格式的数据-再返回给前端" aria-hidden="true">#</a> 9.服务器进入相应的路由，在这个路由代码里就会去查找数据库，得到json格式的数据，再返回给前端</h5>\n<h5 id="_10-前端拿到json数据以后更新页面的部分内容" tabindex="-1"><a class="header-anchor" href="#_10-前端拿到json数据以后更新页面的部分内容" aria-hidden="true">#</a> 10.前端拿到json数据以后更新页面的部分内容</h5>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/Interaction.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Interaction",filePath:"D:/个人博客/blog-demo/docs/base/Interaction.md",filePathRelative:"base/Interaction.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Interaction.html.vue",componentFilePathRelative:"pages/base/Interaction.html.vue",componentFileChunkName:"v-48959c4c",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Interaction.html.js",dataFilePathRelative:"pages/base/Interaction.html.js",dataFileChunkName:"v-48959c4c",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/Interaction.html",htmlFilePathRelative:"base/Interaction.html"},{data:{key:"v-711e77e0",path:"/base/mini%20apps.html",title:"微信小程序",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:46",title:"微信小程序",tag:["小程序"]},excerpt:"",headers:[{level:2,title:"微信小程序",slug:"微信小程序",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-711e77e0",path:"/base/mini%20apps.html",title:"微信小程序",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:46",title:"微信小程序",tag:["小程序"]},excerpt:"",headers:[{level:2,title:"微信小程序",slug:"微信小程序",children:[]}],content:"## 微信小程序\r\n",contentRendered:'<h2 id="微信小程序" tabindex="-1"><a class="header-anchor" href="#微信小程序" aria-hidden="true">#</a> 微信小程序</h2>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/mini apps.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"mini apps",filePath:"D:/个人博客/blog-demo/docs/base/mini apps.md",filePathRelative:"base/mini apps.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/mini apps.html.vue",componentFilePathRelative:"pages/base/mini apps.html.vue",componentFileChunkName:"v-711e77e0",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/mini apps.html.js",dataFilePathRelative:"pages/base/mini apps.html.js",dataFileChunkName:"v-711e77e0",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/mini apps.html",htmlFilePathRelative:"base/mini apps.html"},{data:{key:"v-e54ae01a",path:"/base/npm.html",title:"npm指令",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"npm指令",tag:["npm"]},excerpt:"",headers:[{level:2,title:"npm指令",slug:"npm指令",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-e54ae01a",path:"/base/npm.html",title:"npm指令",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"npm指令",tag:["npm"]},excerpt:"",headers:[{level:2,title:"npm指令",slug:"npm指令",children:[]}],content:"## npm指令\r\n...",contentRendered:'<h2 id="npm指令" tabindex="-1"><a class="header-anchor" href="#npm指令" aria-hidden="true">#</a> npm指令</h2>\n<p>...</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/npm.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"npm",filePath:"D:/个人博客/blog-demo/docs/base/npm.md",filePathRelative:"base/npm.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/npm.html.vue",componentFilePathRelative:"pages/base/npm.html.vue",componentFileChunkName:"v-e54ae01a",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/npm.html.js",dataFilePathRelative:"pages/base/npm.html.js",dataFileChunkName:"v-e54ae01a",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/npm.html",htmlFilePathRelative:"base/npm.html"},{data:{key:"v-7e1e277e",path:"/base/plugin.html",title:"vue项目中的接口调用",lang:"zh-CN",frontmatter:{date:"2022/1/15 12:42 ",title:"vue项目中的接口调用",tag:["Vue"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-7e1e277e",path:"/base/plugin.html",title:"vue项目中的接口调用",lang:"zh-CN",frontmatter:{date:"2022/1/15 12:42 ",title:"vue项目中的接口调用",tag:["Vue"]},excerpt:"",headers:[],content:"\r\n\r\n在企业开发过程中，往往有着明确的前后端的分工，前端负责接收、使用接口，后端负责编写、处理接口。\r\n\r\n对于前端如何使用接口，今天在Vue中进行讲解。\r\n\r\n一个项目往往由这几个部分组成。\r\n\r\n<img src=\"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/note/1.png\" alt=\"\">\r\n<img src=\"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/note/2.png\" alt=\"\" > \r\n\r\n在src文件夹中,有这么些内容。\r\n\r\n\r\n\r\n我们常常把接口文件，新建一个文件夹在src下，命名为api，api内的文件便是接口文件。\r\n\r\n\r\n\r\n \r\n\r\n通常把后端的接口写在api文件夹下，自己命名为xxx.js\r\n\r\n```js\r\n// 登录\r\nexport function login(data) {\r\n  return request({\r\n    url: '/api/court/login',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n// 获取验证码\r\nexport function captchaImage(params) {\r\n  return request({\r\n    url: '/api/captchaImage',\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n对于需要添加信息在头部的，可以这么写\r\n\r\n// 获取登录用户信息\r\nexport function getInfo(params) {\r\n  return request({\r\n    url: '/api/court/getInfo',\r\n    method: 'get',\r\n    params,\r\n    headers: {\r\n      'Authorization': JSON.parse(localStorage.Authorization)\r\n  }\r\n  })\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n 这个就是request.js 文件的内容 \r\n\r\n \r\n\r\n``` js\r\nimport axios from 'axios'\r\n// import { getToken } from '@/utils/auth'\r\n\r\n// create an axios instance\r\nconst service = axios.create({\r\n  // 外网更新\r\n  // baseURL: 'http://xxxxx',\r\n  baseURL: '/xxxxx',  \r\n  timeout: 5000 // request timeout\r\n})\r\nexport default service\r\n\r\n```\r\n项目的页面往往写在views中，每个页面设一个文件夹，其中index.vue 内容则是本页面的内容\r\n\r\n\r\n\r\n \r\n\r\n \r\n\r\n ，在页面中，如果我们需要使用某个接口。则需要进行引入操作。通过 import {接口名1、接口名2} from ' api文件地址 '\r\n\r\n```js\r\nimport { login,captchaImage,getInfo,logOut,reset } from '@/api/login'\r\nfrom后所跟的就是api中文件的地址路径\r\n```\r\n\r\n接口往往是在方法中进行调用，对于不同接口 ，需要的参数也不一样，根据需求，我们传入对应的参数即可。图中的 captchaImage、以及login就是接口信息。\r\n\r\n接口的使用格式：\r\n\r\n \r\n\r\n``` js\r\n接口名({参数1:页面中的参1，参数2：页面中的参数2}).then(res => {\r\n            console.log(res)//res就是调用接口后，后台返回过来的结果，一般数据储存在res.data.data中，具体情况而论\r\n           \r\n            })\r\n\r\n```\r\n\r\n \r\n\r\n \r\n\r\n \r\n\r\n 这样就是接口调用的全部过程了。附上控制台信息图以及apipost接口图。\r\n\r\n\r\n\r\n \r\n\r\n \r\n\r\n \r\n\r\n ",contentRendered:'<p>在企业开发过程中，往往有着明确的前后端的分工，前端负责接收、使用接口，后端负责编写、处理接口。</p>\n<p>对于前端如何使用接口，今天在Vue中进行讲解。</p>\n<p>一个项目往往由这几个部分组成。</p>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/note/1.png" alt="">\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/note/2.png" alt="" > \n<p>在src文件夹中,有这么些内容。</p>\n<p>我们常常把接口文件，新建一个文件夹在src下，命名为api，api内的文件便是接口文件。</p>\n<p>通常把后端的接口写在api文件夹下，自己命名为xxx.js</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 登录</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">\'/api/court/login\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span>\n    data\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 获取验证码</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">captchaImage</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">\'/api/captchaImage\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span>\n    params\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n对于需要添加信息在头部的，可以这么写\n\n<span class="token comment">// 获取登录用户信息</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">\'/api/court/getInfo\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'Authorization\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>Authorization<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这个就是request.js 文件的内容</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">\'axios\'</span>\n<span class="token comment">// import { getToken } from \'@/utils/auth\'</span>\n\n<span class="token comment">// create an axios instance</span>\n<span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 外网更新</span>\n  <span class="token comment">// baseURL: \'http://xxxxx\',</span>\n  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">\'/xxxxx\'</span><span class="token punctuation">,</span>  \n  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token comment">// request timeout</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> service\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>项目的页面往往写在views中，每个页面设一个文件夹，其中index.vue 内容则是本页面的内容</p>\n<p>，在页面中，如果我们需要使用某个接口。则需要进行引入操作。通过 import {接口名1、接口名2} from \' api文件地址 \'</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> login<span class="token punctuation">,</span>captchaImage<span class="token punctuation">,</span>getInfo<span class="token punctuation">,</span>logOut<span class="token punctuation">,</span>reset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@/api/login\'</span>\nfrom后所跟的就是api中文件的地址路径\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接口往往是在方法中进行调用，对于不同接口 ，需要的参数也不一样，根据需求，我们传入对应的参数即可。图中的 captchaImage、以及login就是接口信息。</p>\n<p>接口的使用格式：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">接口名</span><span class="token punctuation">(</span><span class="token punctuation">{</span>参数<span class="token number">1</span><span class="token operator">:</span>页面中的参<span class="token number">1</span>，参数<span class="token number">2</span>：页面中的参数<span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//res就是调用接口后，后台返回过来的结果，一般数据储存在res.data.data中，具体情况而论</span>\n           \n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样就是接口调用的全部过程了。附上控制台信息图以及apipost接口图。</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/plugin.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"plugin",filePath:"D:/个人博客/blog-demo/docs/base/plugin.md",filePathRelative:"base/plugin.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/plugin.html.vue",componentFilePathRelative:"pages/base/plugin.html.vue",componentFileChunkName:"v-7e1e277e",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/plugin.html.js",dataFilePathRelative:"pages/base/plugin.html.js",dataFileChunkName:"v-7e1e277e",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/plugin.html",htmlFilePathRelative:"base/plugin.html"},{data:{key:"v-12d0fdc2",path:"/base/Vuex.html",title:"Vuex深入理解 modules",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"Vuex深入理解 modules",tag:["Vuex"]},excerpt:"",headers:[{level:3,title:"一、什么是module？",slug:"一、什么是module",children:[]},{level:3,title:"二、怎么用module？",slug:"二、怎么用module",children:[]},{level:3,title:"三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save",slug:"三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save",children:[]},{level:3,title:"5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.",slug:"_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state",children:[]},{level:3,title:"6, 局部参数",slug:"_6-局部参数",children:[]},{level:3,title:"7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：",slug:"_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-12d0fdc2",path:"/base/Vuex.html",title:"Vuex深入理解 modules",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"Vuex深入理解 modules",tag:["Vuex"]},excerpt:"",headers:[{level:3,title:"一、什么是module？",slug:"一、什么是module",children:[]},{level:3,title:"二、怎么用module？",slug:"二、怎么用module",children:[]},{level:3,title:"三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save",slug:"三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save",children:[]},{level:3,title:"5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.",slug:"_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state",children:[]},{level:3,title:"6, 局部参数",slug:"_6-局部参数",children:[]},{level:3,title:"7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：",slug:"_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性",children:[]}],content:'\r\n### 一、什么是module？\r\n::: tip\r\n背景：在Vue中State使用是单一状态树结构，应该的所有的状态都放在state里面，如果项目比较复杂，那state是一个很大的对象，store对象也将对变得非常大，难于管理。\r\nmodule：可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。\r\n:::\r\n\r\n### 二、怎么用module？\r\n一般结构\r\n``` js\r\nconst moduleA = {\r\n state: { ... },\r\n mutations: { ... },\r\n actions: { ... },\r\n getters: { ... }\r\n }\r\nconst moduleB = {\r\n state: { ... },\r\n mutations: { ... },\r\n actions: { ... }\r\n }\r\n \r\nconst store = new Vuex.Store({\r\n modules: {\r\n  a: moduleA,\r\n  b: moduleB})\r\n```\r\n  ::: tip\r\n模块内部的数据：①内部state，模块内部的state是局部的，也就是模块私有的，比如是car.js模块state中的list数据，我们要通过this.store.state.car.carGetter的结结果是undefined，而通过this.$store.state.carGetter则可以拿到。\r\n\r\n传参：\r\ngetters====({state(局部状态),getters（全局getters对象),roosState（根状态）})；actions====({state(局部状态),commit,roosState(根状态)}).\r\n\r\n  :::\r\n  ### 三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save\r\n::: tip\r\n  ps: 想了解更多vuex相关知识请点击<a href="https://vuex.vuejs.org/zh/guide/">vuex官网</a>\r\n:::\r\n\r\n**1, 在src 目录下新一个login文件夹，在里面新建index.js 用于存放login 模块的状态。 为了简单起见，我把模块下的state, actions,mutations, getters 全放在index.js文件中。**\r\n\r\n先简单给它增加一个状态，userName: “sam”\r\n``` js\r\nconst state = {\r\n  useName: "sam"\r\n};\r\nconst mutations = {\r\n \r\n};\r\nconst actions = {\r\n \r\n};\r\nconst getters = {\r\n \r\n};\r\n \r\n// 不要忘记把state, mutations等暴露出去。\r\nexport default {\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}\r\n```\r\n**2，在src 目录下，再新建一个 store.js 这是根store, 它通过modules 属性引入 login模块。**\r\n``` js\r\nimport Vue from "vue";\r\nimport Vuex from "vuex";\r\n \r\nVue.use(Vuex);\r\n \r\n// 引入login 模块\r\nimport login from "./login"\r\n \r\nexport default new Vuex.Store({\r\n  // 通过modules属性引入login 模块。\r\n  modules: {\r\n    login: login\r\n  }\r\n})\r\n```\r\n**3, 在main.js中引入store, 并注入到vue 根实例中。**\r\n``` js\r\nimport Vue from \'vue\'\r\nimport App from \'./App.vue\'\r\n \r\n// 引入store\r\nimport store from "./store"\r\n \r\nnew Vue({\r\n el: \'#app\',\r\n store, // 注入到根实例中。\r\n render: h => h(App)\r\n})\r\n```\r\n**4，在 app.vue 中通过computed属性获取到login下的state. 这里要注意，在没有modules 的情况下，组件中通过 this.**\r\n\r\n**store.state.模块名.属性名，在这里是 this.$store.state.login.userName**\r\n``` vue\r\n<template>\r\n <div id="app">\r\n  <img src="./assets/logo.png">\r\n  <h1>{{useName}}</h1>\r\n </div>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n // computed属性，从store 中获取状态state，不要忘记login命名空间。\r\n computed: {\r\n  useName: function() {\r\n   return this.$store.state.login.useName\r\n  }\r\n }\r\n}\r\n<\/script>\r\n```\r\n\r\n组件中成功获取到状态。项目目录和展示如下\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/%E7%AC%94%E8%AE%B0/vuex/1.webp" alt="">\r\n\r\n### 5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.\r\n先在login 文件夹 index.js中添加changeName action 和 change_name mutations.\r\n\r\n``` js\r\nconst mutations = {\r\n  change_name (state, anotherName) {\r\n    state.useName = anotherName;\r\n  }\r\n};\r\n \r\nconst actions = {\r\n  changeName ({commit},anotherName) {\r\n    commit("change_name", anotherName)\r\n  }\r\n};\r\n```\r\n在app.vue 中添加一个按钮：<button> change to json</button>， 点击时，dispatch 一个 action. 那在组件中怎么dispatch actions 呢？\r\n::: tip\r\n在模块中，state 是被限制到模块的命名空间下，需要命名空间才能访问。 但actions 和mutations, 其实还有 getters 却没有被限制，在默认情况下，它们是注册到全局命名空间下的，所谓的注册到全局命名空间下，其实就是我们访问它们的方式和原来没有module 的时候是一样的。比如没有module 的时候，this.store.dispatch(“changeName”)， 组件中的getters, 也是通过 this.$store.getters.module中getters 来获取。\r\n:::\r\n``` vue\r\n<template>\r\n <div id="app">\r\n  <img src="./assets/logo.png">\r\n  <h1>{{useName}}</h1>\r\n  \x3c!-- 添加按钮 --\x3e\r\n  <div>\r\n   <button @click="changeName"> change to json</button>\r\n  </div>\r\n </div>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n // computed属性，从store 中获取状态state，不要忘记login命名空间。\r\n computed: {\r\n  useName: function() {\r\n   return this.$store.state.login.useName\r\n  }\r\n },\r\n methods: {\r\n \r\n　　// 和没有modules的时候一样，同样的方式dispatch action\r\n  changeName() {\r\n   this.$store.dispatch("changeName", "Jason")\r\n  }\r\n }\r\n}\r\n<\/script>\r\n```\r\n### 6, 局部参数\r\n::: tip\r\n虽然dispatch action和 commit mutations 可以全局使用，但是写在module 中的actions, mutations 和getters, 它们获得的默认参数却不是全局的，都是局部的，被限定在它们所在的模块中的。比如mutations和getters 会获得state 作为第一个默认参数，这个state参数，就是限定在mutations 和getters 所在模块的state对象，login 文件夹下的mutations 和getters 只会获取到当前index.js 中的 state 作为参数 。 actions 会获得一个context 对象作为参数，这个context 对象就是当前module 的实例，module 相当于一个小store.\r\n那么怎样才能获取到根store 中的state 和 getters 呢？ Vuex 提供了 rootState, rootGetters 作为module 中 getters 中默认参数, actions中context 对象，也会多了两个属性,**context.getters**, **context.rootState**, 这些全局的默认参数，都排在局部参数的后面。\r\n:::\r\n\r\n我们在store.js中添加 state, getters:\r\n``` js\r\nexport default new Vuex.Store({\r\n  // 通过modules属性引入login 模块。\r\n  modules: {\r\n    login: login\r\n  },\r\n \r\n  // 新增state, getters\r\n  state: {\r\n    job: "web"\r\n  },\r\n  getters: {\r\n    jobTitle (state){\r\n      return state.job + "developer"\r\n    }\r\n  }\r\n})\r\n```\r\nlogin 目录下的 index.js\r\n``` js\r\nconst actions = {\r\n  // actions 中的context参数对象多了 rootState 参数\r\n  changeName ({commit, rootState},anotherName) {\r\n    if(rootState.job =="web") {\r\n      commit("change_name", anotherName)\r\n    }\r\n  }\r\n};\r\n \r\nconst getters = {\r\n  // getters 获取到 rootState, rootGetters 作为参数。\r\n  // rootState和 rootGetter参数顺序不要写反，一定是state在前，getter在后面，这是vuex的默认参数传递顺序， 可以打印出来看一下。\r\n  localJobTitle (state,getters,rootState,rootGetters) { \r\n    console.log(rootState);\r\n    console.log(rootGetters);\r\n    return rootGetters.jobTitle + " aka " + rootState.job \r\n  }\r\n};\r\n```\r\napp.vue 增加h2 展示 loacaJobTitle, 这个同时证明了getters 也是被注册到全局中的。\r\n``` vue\r\n<template>\r\n <div id="app">\r\n  <img src="./assets/logo.png">\r\n  <h1>{{useName}}</h1>\r\n \r\n  \x3c!-- 增加h2 展示 localJobTitle --\x3e\r\n  <h2>{{localJobTitle}}</h2>\r\n  \x3c!-- 添加按钮 --\x3e\r\n  <div>\r\n   <button @click="changeName"> change to json</button>\r\n  </div>\r\n </div>\r\n</template>\r\n \r\n<script>\r\nimport {mapActions, mapState,mapGetters} from "vuex";\r\nexport default {\r\n // computed属性，从store 中获取状态state，不要忘记login命名空间。\r\n computed: {\r\n  ...mapState({\r\n   useName: state => state.login.useName\r\n  }),\r\n \r\n  // mapGeter 直接获得全局注册的getters\r\n  ...mapGetters(["localJobTitle"])\r\n },\r\n methods: {\r\n  changeName() {\r\n   this.$store.dispatch("changeName", "Jason")\r\n  }\r\n }\r\n}\r\n<\/script>\r\n```\r\n### 7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：\r\n``` js\r\nconst state = {\r\n  useName: "sam"\r\n};\r\nconst mutations = {\r\n  change_name (state, anotherName) {\r\n    state.useName = anotherName;\r\n  }\r\n};\r\nconst actions = {\r\n  changeName ({commit, rootState},anotherName) {\r\n    if(rootState.job =="web") {\r\n      commit("change_name", anotherName)\r\n    }\r\n  },\r\n  alertName({state}) {\r\n    alert(state.useName)\r\n  }\r\n};\r\nconst getters = {\r\n  localJobTitle (state,getters,rootState,rootGetters) { \r\n    return rootGetters.jobTitle + " aka " + rootState.job \r\n  }\r\n};\r\n// namespaced 属性，限定命名空间\r\nexport default {\r\n  namespaced:true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}\r\n```\r\n::: tip\r\n当所有的actions, mutations, getters 都被限定到模块的命名空间下，我们dispatch actions, commit mutations 都需要用到命名空间。如 dispacth("changeName"), 就要变成 dispatch("login/changeName"); getters.localJobTitle 就要变成 getters["login/localJobTitle"]\r\n:::\r\n\r\napp.vue 如下：\r\n``` vue\r\n<template>\r\n <div id="app">\r\n  <img src="./assets/logo.png">\r\n  <h1 @click ="alertName">{{useName}}</h1>\r\n \r\n  \x3c!-- 增加h2 展示 localJobTitle --\x3e\r\n  <h2>{{localJobTitle}}</h2>\r\n  \x3c!-- 添加按钮 --\x3e\r\n  <div>\r\n   <button @click="changeName"> change to json</button>\r\n  </div>\r\n </div>\r\n</template>\r\n \r\n<script>\r\nimport {mapActions, mapState,mapGetters} from "vuex";\r\nexport default {\r\n // computed属性，从store 中获取状态state，不要忘记login命名空间。\r\n computed: {\r\n  ...mapState("login",{\r\n   useName: state => state.useName\r\n  }),\r\n \r\n   localJobTitle() {\r\n    return this.$store.getters["login/localJobTitle"]\r\n   }\r\n },\r\n methods: {\r\n  changeName() {\r\n   this.$store.dispatch("login/changeName", "Jason")\r\n  },\r\n  alertName() {\r\n   this.$store.dispatch("login/alertName")\r\n  }\r\n }\r\n}\r\n<\/script>\r\n```\r\n::: tip \r\n有了命名空间之后，mapState, mapGetters, mapActions 函数也都有了一个参数，用于限定命名空间，每二个参数对象或数组中的属性，都映射到了当前命名空间中。\r\n:::\r\n``` \r\n<script>\r\nimport {mapActions, mapState,mapGetters} from "vuex";\r\nexport default {\r\n computed: {\r\n  // 对象中的state 和数组中的localJobTitle 都是和login中的参数一一对应。\r\n  ...mapState("login",{\r\n   useName: state => state.useName\r\n  }),\r\n  ...mapGetters("login", ["localJobTitle"])\r\n },\r\n methods: {\r\n  changeName() {\r\n   this.$store.dispatch("login/changeName", "Jason")\r\n  },\r\n  ...mapActions(\'login\', [\'alertName\'])\r\n }\r\n}\r\n<\/script>\r\n```\r\n\r\n链接：https://www.jianshu.com/p/a0c11ae01991\r\n来源：简书',contentRendered:'<h3 id="一、什么是module" tabindex="-1"><a class="header-anchor" href="#一、什么是module" aria-hidden="true">#</a> 一、什么是module？</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>背景：在Vue中State使用是单一状态树结构，应该的所有的状态都放在state里面，如果项目比较复杂，那state是一个很大的对象，store对象也将对变得非常大，难于管理。\nmodule：可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</p>\n</div>\n<h3 id="二、怎么用module" tabindex="-1"><a class="header-anchor" href="#二、怎么用module" aria-hidden="true">#</a> 二、怎么用module？</h3>\n<p>一般结构</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>\n <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>\n <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n \n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">a</span><span class="token operator">:</span> moduleA<span class="token punctuation">,</span>\n  <span class="token literal-property property">b</span><span class="token operator">:</span> moduleB<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>模块内部的数据：①内部state，模块内部的state是局部的，也就是模块私有的，比如是car.js模块state中的list数据，我们要通过this.store.state.car.carGetter的结结果是undefined，而通过this.$store.state.carGetter则可以拿到。</p>\n<p>传参：\ngetters====({state(局部状态),getters（全局getters对象),roosState（根状态）})；actions====({state(局部状态),commit,roosState(根状态)}).</p>\n</div>\n<h3 id="三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save" tabindex="-1"><a class="header-anchor" href="#三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save" aria-hidden="true">#</a> 三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>ps: 想了解更多vuex相关知识请点击<a href="https://vuex.vuejs.org/zh/guide/">vuex官网</a></p>\n</div>\n<p><strong>1, 在src 目录下新一个login文件夹，在里面新建index.js 用于存放login 模块的状态。 为了简单起见，我把模块下的state, actions,mutations, getters 全放在index.js文件中。</strong></p>\n<p>先简单给它增加一个状态，userName: “sam”</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">useName</span><span class="token operator">:</span> <span class="token string">"sam"</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>\n \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>\n \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 不要忘记把state, mutations等暴露出去。</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  state<span class="token punctuation">,</span>\n  mutations<span class="token punctuation">,</span>\n  actions<span class="token punctuation">,</span>\n  getters\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>2，在src 目录下，再新建一个 store.js 这是根store, 它通过modules 属性引入 login模块。</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>\n \nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 引入login 模块</span>\n<span class="token keyword">import</span> login <span class="token keyword">from</span> <span class="token string">"./login"</span>\n \n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 通过modules属性引入login 模块。</span>\n  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">login</span><span class="token operator">:</span> login\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>3, 在main.js中引入store, 并注入到vue 根实例中。</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">\'vue\'</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App.vue\'</span>\n \n<span class="token comment">// 引入store</span>\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span>\n \n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n store<span class="token punctuation">,</span> <span class="token comment">// 注入到根实例中。</span>\n <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>4，在 app.vue 中通过computed属性获取到login下的state. 这里要注意，在没有modules 的情况下，组件中通过 this.</strong></p>\n<p><strong>store.state.模块名.属性名，在这里是 this.$store.state.login.userName</strong></p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{useName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n <span class="token comment">// computed属性，从store 中获取状态state，不要忘记login命名空间。</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">useName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>useName\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>组件中成功获取到状态。项目目录和展示如下\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/笔记/vuex/1.webp" alt=""></p>\n<h3 id="_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state" tabindex="-1"><a class="header-anchor" href="#_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state" aria-hidden="true">#</a> 5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.</h3>\n<p>先在login 文件夹 index.js中添加changeName action 和 change_name mutations.</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">change_name</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>useName <span class="token operator">=</span> anotherName<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">changeName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">,</span>anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"change_name"</span><span class="token punctuation">,</span> anotherName<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在app.vue 中添加一个按钮：<button> change to json</button>， 点击时，dispatch 一个 action. 那在组件中怎么dispatch actions 呢？</p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>在模块中，state 是被限制到模块的命名空间下，需要命名空间才能访问。 但actions 和mutations, 其实还有 getters 却没有被限制，在默认情况下，它们是注册到全局命名空间下的，所谓的注册到全局命名空间下，其实就是我们访问它们的方式和原来没有module 的时候是一样的。比如没有module 的时候，this.store.dispatch(“changeName”)， 组件中的getters, 也是通过 this.$store.getters.module中getters 来获取。</p>\n</div>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{useName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- 添加按钮 --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> change to json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n <span class="token comment">// computed属性，从store 中获取状态state，不要忘记login命名空间。</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">useName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>useName\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n \n　　<span class="token comment">// 和没有modules的时候一样，同样的方式dispatch action</span>\n  <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"changeName"</span><span class="token punctuation">,</span> <span class="token string">"Jason"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="_6-局部参数" tabindex="-1"><a class="header-anchor" href="#_6-局部参数" aria-hidden="true">#</a> 6, 局部参数</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>虽然dispatch action和 commit mutations 可以全局使用，但是写在module 中的actions, mutations 和getters, 它们获得的默认参数却不是全局的，都是局部的，被限定在它们所在的模块中的。比如mutations和getters 会获得state 作为第一个默认参数，这个state参数，就是限定在mutations 和getters 所在模块的state对象，login 文件夹下的mutations 和getters 只会获取到当前index.js 中的 state 作为参数 。 actions 会获得一个context 对象作为参数，这个context 对象就是当前module 的实例，module 相当于一个小store.\n那么怎样才能获取到根store 中的state 和 getters 呢？ Vuex 提供了 rootState, rootGetters 作为module 中 getters 中默认参数, actions中context 对象，也会多了两个属性,<strong>context.getters</strong>, <strong>context.rootState</strong>, 这些全局的默认参数，都排在局部参数的后面。</p>\n</div>\n<p>我们在store.js中添加 state, getters:</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 通过modules属性引入login 模块。</span>\n  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">login</span><span class="token operator">:</span> login\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n \n  <span class="token comment">// 新增state, getters</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">job</span><span class="token operator">:</span> <span class="token string">"web"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">jobTitle</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">.</span>job <span class="token operator">+</span> <span class="token string">"developer"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>login 目录下的 index.js</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// actions 中的context参数对象多了 rootState 参数</span>\n  <span class="token function">changeName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">,</span> rootState<span class="token punctuation">}</span><span class="token punctuation">,</span>anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>rootState<span class="token punctuation">.</span>job <span class="token operator">==</span><span class="token string">"web"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"change_name"</span><span class="token punctuation">,</span> anotherName<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// getters 获取到 rootState, rootGetters 作为参数。</span>\n  <span class="token comment">// rootState和 rootGetter参数顺序不要写反，一定是state在前，getter在后面，这是vuex的默认参数传递顺序， 可以打印出来看一下。</span>\n  <span class="token function">localJobTitle</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState<span class="token punctuation">,</span>rootGetters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rootState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rootGetters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> rootGetters<span class="token punctuation">.</span>jobTitle <span class="token operator">+</span> <span class="token string">" aka "</span> <span class="token operator">+</span> rootState<span class="token punctuation">.</span>job \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>app.vue 增加h2 展示 loacaJobTitle, 这个同时证明了getters 也是被注册到全局中的。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{useName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n \n  <span class="token comment">&lt;!-- 增加h2 展示 localJobTitle --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{localJobTitle}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- 添加按钮 --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> change to json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">,</span> mapState<span class="token punctuation">,</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n <span class="token comment">// computed属性，从store 中获取状态state，不要忘记login命名空间。</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token function-variable function">useName</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>useName\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n \n  <span class="token comment">// mapGeter 直接获得全局注册的getters</span>\n  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"localJobTitle"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"changeName"</span><span class="token punctuation">,</span> <span class="token string">"Jason"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性" tabindex="-1"><a class="header-anchor" href="#_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性" aria-hidden="true">#</a> 7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：</h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">useName</span><span class="token operator">:</span> <span class="token string">"sam"</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">change_name</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>useName <span class="token operator">=</span> anotherName<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">changeName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">,</span> rootState<span class="token punctuation">}</span><span class="token punctuation">,</span>anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>rootState<span class="token punctuation">.</span>job <span class="token operator">==</span><span class="token string">"web"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"change_name"</span><span class="token punctuation">,</span> anotherName<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>state<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>useName<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">localJobTitle</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState<span class="token punctuation">,</span>rootGetters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">return</span> rootGetters<span class="token punctuation">.</span>jobTitle <span class="token operator">+</span> <span class="token string">" aka "</span> <span class="token operator">+</span> rootState<span class="token punctuation">.</span>job \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// namespaced 属性，限定命名空间</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">,</span>\n  mutations<span class="token punctuation">,</span>\n  actions<span class="token punctuation">,</span>\n  getters\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>当所有的actions, mutations, getters 都被限定到模块的命名空间下，我们dispatch actions, commit mutations 都需要用到命名空间。如 dispacth(&quot;changeName&quot;), 就要变成 dispatch(&quot;login/changeName&quot;); getters.localJobTitle 就要变成 getters[&quot;login/localJobTitle&quot;]</p>\n</div>\n<p>app.vue 如下：</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">@click</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alertName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{useName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n \n  <span class="token comment">&lt;!-- 增加h2 展示 localJobTitle --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{localJobTitle}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- 添加按钮 --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> change to json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">,</span> mapState<span class="token punctuation">,</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n <span class="token comment">// computed属性，从store 中获取状态state，不要忘记login命名空间。</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n   <span class="token function-variable function">useName</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>useName\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n \n   <span class="token function">localJobTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">"login/localJobTitle"</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"login/changeName"</span><span class="token punctuation">,</span> <span class="token string">"Jason"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"login/alertName"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>有了命名空间之后，mapState, mapGetters, mapActions 函数也都有了一个参数，用于限定命名空间，每二个参数对象或数组中的属性，都映射到了当前命名空间中。</p>\n</div>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;script>\nimport {mapActions, mapState,mapGetters} from "vuex";\nexport default {\n computed: {\n  // 对象中的state 和数组中的localJobTitle 都是和login中的参数一一对应。\n  ...mapState("login",{\n   useName: state => state.useName\n  }),\n  ...mapGetters("login", ["localJobTitle"])\n },\n methods: {\n  changeName() {\n   this.$store.dispatch("login/changeName", "Jason")\n  },\n  ...mapActions(\'login\', [\'alertName\'])\n }\n}\n&lt;/script>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>链接：https://www.jianshu.com/p/a0c11ae01991\n来源：简书</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/Vuex.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Vuex",filePath:"D:/个人博客/blog-demo/docs/base/Vuex.md",filePathRelative:"base/Vuex.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Vuex.html.vue",componentFilePathRelative:"pages/base/Vuex.html.vue",componentFileChunkName:"v-12d0fdc2",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Vuex.html.js",dataFilePathRelative:"pages/base/Vuex.html.js",dataFileChunkName:"v-12d0fdc2",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/Vuex.html",htmlFilePathRelative:"base/Vuex.html"},{data:{key:"v-75aebe31",path:"/base/webpack.html",title:"Webpack",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:50",title:"Webpack",tag:["Webpack"]},excerpt:"",headers:[{level:3,title:"Webpack打包",slug:"webpack打包",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-75aebe31",path:"/base/webpack.html",title:"Webpack",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:50",title:"Webpack",tag:["Webpack"]},excerpt:"",headers:[{level:3,title:"Webpack打包",slug:"webpack打包",children:[]}],content:"### Webpack打包\r\n...",contentRendered:'<h3 id="webpack打包" tabindex="-1"><a class="header-anchor" href="#webpack打包" aria-hidden="true">#</a> Webpack打包</h3>\n<p>...</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/webpack.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"webpack",filePath:"D:/个人博客/blog-demo/docs/base/webpack.md",filePathRelative:"base/webpack.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/webpack.html.vue",componentFilePathRelative:"pages/base/webpack.html.vue",componentFileChunkName:"v-75aebe31",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/webpack.html.js",dataFilePathRelative:"pages/base/webpack.html.js",dataFileChunkName:"v-75aebe31",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/webpack.html",htmlFilePathRelative:"base/webpack.html"},{data:{key:"v-4a48c612",path:"/issue/axios.html",title:"Axios",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Axios",tag:["axios"]},excerpt:"",headers:[{level:3,title:"axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined",slug:"axios报错-typeerror-cannot-read-property-canceltoken-of-undefined",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-4a48c612",path:"/issue/axios.html",title:"Axios",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Axios",tag:["axios"]},excerpt:"",headers:[{level:3,title:"axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined",slug:"axios报错-typeerror-cannot-read-property-canceltoken-of-undefined",children:[]}],content:'::: tip \r\n\r\n记录的是本所遇到的bug\r\n\r\n:::\r\n\r\n### axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined\r\n报错 axios报错：TypeError: Cannot read property ‘cancelToken’ of undefined\r\n解决：1.应该是没有返回数据\r\n2.是请求的函数写错\r\n例如：\r\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/axios/1.png" alt="">\r\n\r\n正确的是: \r\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/axios/2.png" alt="">',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>记录的是本所遇到的bug</p>\n</div>\n<h3 id="axios报错-typeerror-cannot-read-property-canceltoken-of-undefined" tabindex="-1"><a class="header-anchor" href="#axios报错-typeerror-cannot-read-property-canceltoken-of-undefined" aria-hidden="true">#</a> axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined</h3>\n<p>报错 axios报错：TypeError: Cannot read property ‘cancelToken’ of undefined\n解决：1.应该是没有返回数据\n2.是请求的函数写错\n例如：\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/axios/1.png" alt=""></p>\n<p>正确的是:\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/axios/2.png" alt=""></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/axios.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"axios",filePath:"D:/个人博客/blog-demo/docs/issue/axios.md",filePathRelative:"issue/axios.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/axios.html.vue",componentFilePathRelative:"pages/issue/axios.html.vue",componentFileChunkName:"v-4a48c612",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/axios.html.js",dataFilePathRelative:"pages/issue/axios.html.js",dataFileChunkName:"v-4a48c612",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/axios.html",htmlFilePathRelative:"issue/axios.html"},{data:{key:"v-62e92bf6",path:"/issue/git.html",title:"Git",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Git",description:"记录的是本所遇到的bug",tag:["git"]},excerpt:"",headers:[{level:2,title:"Git报错:“ERROR: Permission to XXX.git denied to user”",slug:"git报错-error-permission-to-xxx-git-denied-to-user",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-62e92bf6",path:"/issue/git.html",title:"Git",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Git",description:"记录的是本所遇到的bug",tag:["git"]},excerpt:"",headers:[{level:2,title:"Git报错:“ERROR: Permission to XXX.git denied to user”",slug:"git报错-error-permission-to-xxx-git-denied-to-user",children:[]}],content:'::: tip \r\n\r\n记录的是本所遇到的bug\r\n\r\n:::\r\n\r\n## Git报错:“ERROR: Permission to XXX.git denied to user”\r\n#### 解决方案\r\n - 1、生成一个新的SSH KEY\r\n``` ruby\r\nAppledeiMac:~ Apple$ cd ~/.ssh\r\nAppledeiMac:.ssh Apple$ ls\r\nid_rsa        id_rsa.pub  known_hosts\r\nAppledeiMac:.ssh Apple$ ssh-keygen -t rsa -C "iMac_personnal_publicKey"\r\nGenerating public/private rsa key pair.\r\nEnter file in which to save the key (/Users/Apple/.ssh/id_rsa):               \r\n/Users/Apple/.ssh/id_rsa_personal\r\nEnter passphrase (empty for no passphrase): \r\nEnter same passphrase again: \r\nYour identification has been saved in /Users/Apple/.ssh/id_rsa_personal.\r\nYour public key has been saved in /Users/Apple/.ssh/id_rsa_personal.pub.\r\nThe key fingerprint is:\r\nSHA256:1gepuxDHwJRnFbKvc0Zq/NGrFGE9kEXS06jxatPPrSQ iMac_personnal_publicKey\r\nThe key\'s randomart image is:\r\n+---[RSA 2048]----+\r\n|      ....=*oo   |\r\n|     o. ooo=+ .  |\r\n|      oo. =+o.   |\r\n|       o =.o..   |\r\n|      . S =o.    |\r\n|       = =++.    |\r\n|      . B.=.Eo.. |\r\n|       o B . +o .|\r\n|          . o.. .. |\r\n+----[SHA256]-----+\r\nAppledeiMac:.ssh Apple$ ls\r\nid_rsa            id_rsa_personal     known_hosts\r\nid_rsa.pub        id_rsa_personal.pub`\r\n```\r\n - 2、打开新生成的~/.ssh/id_rsa2.pub文件，将里面的内容添加到GitHub后台。\r\n - 3、打开~/.ssh/config文件\r\n 没有config文件则创建，终端输入touch config ，创建完以后用Vim打开或者是在Finder打开一样。\r\n在不影响默认的github设置下我们重新添加一个Host：\r\n建一个自己能辨识的github别名，我取的是github-personal，新建的帐号使用这个别名做克隆和更新\r\n\r\n``` ruby\r\nHost github-personal\r\n```\r\nHostName github.com\r\nUser git\r\nIdentityFile ~/.ssh/id_rsa_personal\r\n\r\n编辑完毕之后按下ESC，:wq，:wq是保存并退出vim编辑器\r\n具体在终端代码如下：\r\ncat config 是把config文件里面的内容在终端输出\r\nAppledeiMac:.ssh Apple$ vim config\r\nAppledeiMac:.ssh Apple$ cat config\r\n``` ruby\r\n  #Default GitHub\r\n  Host github.com\r\n  HostName github.com\r\n  User git\r\n  IdentityFile ~/.ssh/id_rsa\r\n\r\n  Host github-personal\r\n  HostName github.com\r\n  User git\r\n  IdentityFile ~/.ssh/id_rsa_personal\r\n```\r\n- 4、将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名。\r\n如原地址是 git@github.com:hbxn740150254/BestoneGitHub.git 替换后应该是：github-personal:hbxn740150254/BestoneGitHub.git 或者git@github-personal:hbxn740150254/BestoneGitHub.git亲测都是可以的，\r\n如果是新建的仓库，直接使用替换后的URL克隆即可。如果已经使用原地址克隆过了，可以使用命令修改：\r\n``` ruby\r\nAppledeiMac:.ssh Apple$ cd /Users/Apple/Desktop/BestoneDemo \r\n//修改之前\r\nApple$ git remote -v\r\ngithub  git@github.com:hbxn740150254/BestoneGitHub.git (fetch)\r\ngithub  git@github.com:hbxn740150254/BestoneGitHub.git (push)\r\n//修改 remote set-url\r\nAppledeiMac:BestoneDemo Apple$ git remote set-url github  github- personal:hbxn740150254/BestoneGitHub.git\r\n//验证是否修改成功    \r\n//使用修改后的github-personal SSH连接，连接成功用户是hbxn740150254，此时公钥是id_rsa_personal\r\nAppledeiMac:BestoneDemo Apple$ ssh -T github-personal\r\nHi hbxn740150254! You\'ve successfully authenticated, but GitHub does not provide shell access.\r\n//使用默认的git@github.com SSH去连接,连接成功用户是FaxeXian，此时公钥是id_rsa\r\nAppledeiMac:.ssh Apple$ ssh -T git@github.com\r\nHi FaxeXian! You\'ve successfully authenticated, but GitHub does not provide shell access.\r\n//修改之后\r\nAppledeiMac:BestoneDemo Apple$ git remote -v\r\ngithub  github-personal:hbxn740150254/BestoneGitHub.git (fetch)\r\ngithub  github-personal:hbxn740150254/BestoneGitHub.git (push)\r\n```\r\n最后我们进行正常的push，fetch 操作，都可以\r\n``` ruby\r\n//更改后的github push成功！\r\nAppledeiMac:BestoneDemo Apple$ git push github testMerge:master\r\nTotal 0 (delta 0), reused 0 (delta 0)\r\nTo github-personal:hbxn740150254/BestoneGitHub.git\r\n cd773e9..f622210  testMerge -> master\r\n\r\n//github默认的节点origin我们也可以正常push操作\r\nAppledeiMac:BestoneDemo Apple$ git push origin testMerge:testMerge\r\nCounting objects: 460, done.\r\nDelta compression using up to 4 threads.\r\nCompressing objects: 100% (240/240), done.\r\nWriting objects: 100% (460/460), 16.69 MiB | 442.00 KiB/s, done.\r\nTotal 460 (delta 211), reused 453 (delta 205)\r\nTo git@git.coding.net:hbxn740150254/Local-Git.git\r\n* [new branch]      testMerge -> testMerge\r\n```\r\ngithub账户如果还是显示之前id_rsa密钥账户的话请把你的密钥加入sshAgent代理中\r\n- 添加你的ssh密钥到ssh-agent中\r\n``` ruby\r\n# start the ssh-agent in the background\r\neval "$(ssh-agent -s)"\r\nAgent pid 59566\r\n```\r\n\r\n- 如果你的密钥不是系统默认的RSA文件名id_rsa，比如像我一样另外创了一对公钥/密钥id_rsa_personal，那么就把他们添加进去，注意：密钥文件是不带扩展名的，公钥扩展名是.pub，代表publicKey，\r\n``` ruby\r\napple:.ssh apple$ eval "$(ssh-agent -s)"\r\nAgent pid 19795\r\n//添加密钥 id_rsa_personal\r\napple:.ssh apple$ ssh-add id_rsa_personal\r\nIdentity added: id_rsa_personal (github-personal)\r\n//添加默认密钥 id_rsa\r\napple:.ssh apple$ ssh-add id_rsa\r\n//密钥有密码的话就会要你提示输入 passphrase\r\nEnter passphrase for id_rsa: \r\n//测试用密钥isa是否连接成功github\r\napple:.ssh apple$ ssh -T git@github.com\r\nHi hbxn740150254! You \'ve successfully authenticated, but GitHub does not provide shell access.\r\n//测试密钥id_rsa_personal是否连接成功github\r\napple:.ssh apple$ ssh -T git@github-personal\r\nHi FaxeXian! You\'ve successfully authenticated, but GitHub does not provide shell access.\r\n```\r\n这样，一台电脑生成的两个公钥让两个用户成功连接，就可以访问别人的远程仓库，可以进行多人开发了！！\r\n\r\n作者：穿山甲到底说了什么\r\n\r\n来源：简书\r\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>记录的是本所遇到的bug</p>\n</div>\n<h2 id="git报错-error-permission-to-xxx-git-denied-to-user" tabindex="-1"><a class="header-anchor" href="#git报错-error-permission-to-xxx-git-denied-to-user" aria-hidden="true">#</a> Git报错:“ERROR: Permission to XXX.git denied to user”</h2>\n<h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h4>\n<ul>\n<li>1、生成一个新的SSH KEY</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>AppledeiMac<span class="token operator">:</span><span class="token operator">~</span> Apple$ cd <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh\n<span class="token symbol">AppledeiMac</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ ls\nid_rsa        id_rsa<span class="token punctuation">.</span>pub  known_hosts\n<span class="token symbol">AppledeiMac</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span><span class="token constant">C</span> <span class="token string-literal"><span class="token string">"iMac_personnal_publicKey"</span></span>\nGenerating <span class="token keyword">public</span><span class="token operator">/</span><span class="token keyword">private</span> rsa key pair<span class="token punctuation">.</span>\nEnter file <span class="token keyword">in</span> which to save the key <span class="token punctuation">(</span><span class="token operator">/</span>Users<span class="token regex-literal"><span class="token regex">/Apple/</span></span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">)</span><span class="token operator">:</span>               \n<span class="token operator">/</span>Users<span class="token regex-literal"><span class="token regex">/Apple/</span></span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_personal\nEnter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span><span class="token operator">:</span> \nEnter same passphrase again<span class="token operator">:</span> \nYour identification has been saved <span class="token keyword">in</span> <span class="token operator">/</span>Users<span class="token regex-literal"><span class="token regex">/Apple/</span></span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_personal<span class="token punctuation">.</span>\nYour <span class="token keyword">public</span> key has been saved <span class="token keyword">in</span> <span class="token operator">/</span>Users<span class="token regex-literal"><span class="token regex">/Apple/</span></span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_personal<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>\nThe key fingerprint is<span class="token operator">:</span>\n<span class="token symbol">SHA256</span><span class="token operator">:</span><span class="token number">1</span>gepuxDHwJRnFbKvc0Zq<span class="token operator">/</span>NGrFGE9kEXS06jxatPPrSQ iMac_personnal_publicKey\nThe key\'s randomart image is<span class="token operator">:</span>\n<span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token constant">RSA</span> <span class="token number">2048</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>\n<span class="token operator">|</span>      <span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">*</span>oo   <span class="token operator">|</span>\n<span class="token operator">|</span>     o<span class="token punctuation">.</span> ooo<span class="token operator">=</span><span class="token operator">+</span> <span class="token punctuation">.</span>  <span class="token operator">|</span>\n<span class="token operator">|</span>      oo<span class="token punctuation">.</span> <span class="token operator">=</span><span class="token operator">+</span>o<span class="token punctuation">.</span>   <span class="token operator">|</span>\n<span class="token operator">|</span>       o <span class="token operator">=</span><span class="token punctuation">.</span>o<span class="token operator">..</span>   <span class="token operator">|</span>\n<span class="token operator">|</span>      <span class="token punctuation">.</span> <span class="token constant">S</span> <span class="token operator">=</span>o<span class="token punctuation">.</span>    <span class="token operator">|</span>\n<span class="token operator">|</span>       <span class="token operator">=</span> <span class="token operator">=</span><span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">.</span>    <span class="token operator">|</span>\n<span class="token operator">|</span>      <span class="token punctuation">.</span> <span class="token constant">B</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token punctuation">.</span>Eo<span class="token operator">..</span> <span class="token operator">|</span>\n<span class="token operator">|</span>       o <span class="token constant">B</span> <span class="token punctuation">.</span> <span class="token operator">+</span>o <span class="token punctuation">.</span><span class="token operator">|</span>\n<span class="token operator">|</span>          <span class="token punctuation">.</span> o<span class="token operator">..</span> <span class="token operator">..</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token constant">SHA256</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>\n<span class="token symbol">AppledeiMac</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ ls\nid_rsa            id_rsa_personal     known_hosts\nid_rsa<span class="token punctuation">.</span>pub        id_rsa_personal<span class="token punctuation">.</span>pub`\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ul>\n<li>2、打开新生成的~/.ssh/id_rsa2.pub文件，将里面的内容添加到GitHub后台。</li>\n<li>3、打开~/.ssh/config文件\n没有config文件则创建，终端输入touch config ，创建完以后用Vim打开或者是在Finder打开一样。\n在不影响默认的github设置下我们重新添加一个Host：\n建一个自己能辨识的github别名，我取的是github-personal，新建的帐号使用这个别名做克隆和更新</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>Host github<span class="token operator">-</span>personal\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>HostName github.com\nUser git\nIdentityFile ~/.ssh/id_rsa_personal</p>\n<p>编辑完毕之后按下ESC，:wq，:wq是保存并退出vim编辑器\n具体在终端代码如下：\ncat config 是把config文件里面的内容在终端输出\nAppledeiMac:.ssh Apple$ vim config\nAppledeiMac:.ssh Apple$ cat config</p>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>  <span class="token comment">#Default GitHub</span>\n  Host github<span class="token punctuation">.</span>com\n  HostName github<span class="token punctuation">.</span>com\n  User git\n  IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa\n\n  Host github<span class="token operator">-</span>personal\n  HostName github<span class="token punctuation">.</span>com\n  User git\n  IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_personal\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul>\n<li>4、将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名。\n如原地址是 git@github.com:hbxn740150254/BestoneGitHub.git 替换后应该是：github-personal:hbxn740150254/BestoneGitHub.git 或者git@github-personal:hbxn740150254/BestoneGitHub.git亲测都是可以的，\n如果是新建的仓库，直接使用替换后的URL克隆即可。如果已经使用原地址克隆过了，可以使用命令修改：</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>AppledeiMac<span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ cd <span class="token operator">/</span>Users<span class="token operator">/</span>Apple<span class="token operator">/</span>Desktop<span class="token operator">/</span>BestoneDemo \n<span class="token operator">/</span><span class="token operator">/</span>修改之前\nApple$ git remote <span class="token operator">-</span>v\ngithub  git<span class="token variable">@github</span><span class="token punctuation">.</span>com<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>\ngithub  git<span class="token variable">@github</span><span class="token punctuation">.</span>com<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span>修改 remote set<span class="token operator">-</span>url\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ git remote set<span class="token operator">-</span>url github  github<span class="token operator">-</span> personal<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git\n<span class="token operator">/</span><span class="token operator">/</span>验证是否修改成功    \n<span class="token operator">/</span><span class="token operator">/</span>使用修改后的github<span class="token operator">-</span>personal <span class="token constant">SSH</span>连接，连接成功用户是hbxn740150254，此时公钥是id_rsa_personal\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ ssh <span class="token operator">-</span><span class="token constant">T</span> github<span class="token operator">-</span>personal\nHi hbxn740150254<span class="token operator">!</span> You\'ve successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span>\n<span class="token operator">/</span><span class="token operator">/</span>使用默认的git<span class="token variable">@github</span><span class="token punctuation">.</span>com <span class="token constant">SSH</span>去连接<span class="token punctuation">,</span>连接成功用户是FaxeXian，此时公钥是id_rsa\n<span class="token symbol">AppledeiMac</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ ssh <span class="token operator">-</span><span class="token constant">T</span> git<span class="token variable">@github</span><span class="token punctuation">.</span>com\nHi FaxeXian<span class="token operator">!</span> You\'ve successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span>\n<span class="token operator">/</span><span class="token operator">/</span>修改之后\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ git remote <span class="token operator">-</span>v\ngithub  github<span class="token operator">-</span>personal<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>\ngithub  github<span class="token operator">-</span>personal<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>最后我们进行正常的push，fetch 操作，都可以</p>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code><span class="token operator">/</span><span class="token operator">/</span>更改后的github push成功！\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ git push github testMerge<span class="token symbol">:master</span>\nTotal <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>\nTo github<span class="token operator">-</span>personal<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git\n cd773e9<span class="token operator">..</span>f622210  testMerge <span class="token operator">-</span><span class="token operator">></span> master\n\n<span class="token operator">/</span><span class="token operator">/</span>github默认的节点origin我们也可以正常push操作\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ git push origin testMerge<span class="token symbol">:testMerge</span>\nCounting objects<span class="token operator">:</span> <span class="token number">460</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>\nDelta compression using up to <span class="token number">4</span> threads<span class="token punctuation">.</span>\nCompressing objects<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">240</span><span class="token operator">/</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>\nWriting objects<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">460</span><span class="token regex-literal"><span class="token regex">/460), 16.69 MiB | 442.00 KiB/s</span></span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>\nTotal <span class="token number">460</span> <span class="token punctuation">(</span>delta <span class="token number">211</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reused <span class="token number">453</span> <span class="token punctuation">(</span>delta <span class="token number">205</span><span class="token punctuation">)</span>\nTo git<span class="token variable">@git</span><span class="token punctuation">.</span>coding<span class="token punctuation">.</span>net<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>Local<span class="token operator">-</span>Git<span class="token punctuation">.</span>git\n<span class="token operator">*</span> <span class="token punctuation">[</span><span class="token keyword">new</span> branch<span class="token punctuation">]</span>      testMerge <span class="token operator">-</span><span class="token operator">></span> testMerge\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>github账户如果还是显示之前id_rsa密钥账户的话请把你的密钥加入sshAgent代理中</p>\n<ul>\n<li>添加你的ssh密钥到ssh-agent中</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code><span class="token comment"># start the ssh-agent in the background</span>\neval <span class="token string-literal"><span class="token string">"$(ssh-agent -s)"</span></span>\nAgent pid <span class="token number">59566</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul>\n<li>如果你的密钥不是系统默认的RSA文件名id_rsa，比如像我一样另外创了一对公钥/密钥id_rsa_personal，那么就把他们添加进去，注意：密钥文件是不带扩展名的，公钥扩展名是.pub，代表publicKey，</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>apple<span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ eval <span class="token string-literal"><span class="token string">"$(ssh-agent -s)"</span></span>\nAgent pid <span class="token number">19795</span>\n<span class="token operator">/</span><span class="token operator">/</span>添加密钥 id_rsa_personal\n<span class="token symbol">apple</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ ssh<span class="token operator">-</span>add id_rsa_personal\nIdentity added<span class="token operator">:</span> id_rsa_personal <span class="token punctuation">(</span>github<span class="token operator">-</span>personal<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span>添加默认密钥 id_rsa\n<span class="token symbol">apple</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ ssh<span class="token operator">-</span>add id_rsa\n<span class="token operator">/</span><span class="token operator">/</span>密钥有密码的话就会要你提示输入 passphrase\nEnter passphrase <span class="token keyword">for</span> id_rsa<span class="token operator">:</span> \n<span class="token operator">/</span><span class="token operator">/</span>测试用密钥isa是否连接成功github\n<span class="token symbol">apple</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ ssh <span class="token operator">-</span><span class="token constant">T</span> git<span class="token variable">@github</span><span class="token punctuation">.</span>com\nHi hbxn740150254<span class="token operator">!</span> You \'ve successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span>\n<span class="token operator">/</span><span class="token operator">/</span>测试密钥id_rsa_personal是否连接成功github\n<span class="token symbol">apple</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ ssh <span class="token operator">-</span><span class="token constant">T</span> git<span class="token variable">@github</span><span class="token operator">-</span>personal\nHi FaxeXian<span class="token operator">!</span> You\'ve successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这样，一台电脑生成的两个公钥让两个用户成功连接，就可以访问别人的远程仓库，可以进行多人开发了！！</p>\n<p>作者：穿山甲到底说了什么</p>\n<p>来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/git.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"git",filePath:"D:/个人博客/blog-demo/docs/issue/git.md",filePathRelative:"issue/git.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/git.html.vue",componentFilePathRelative:"pages/issue/git.html.vue",componentFileChunkName:"v-62e92bf6",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/git.html.js",dataFilePathRelative:"pages/issue/git.html.js",dataFileChunkName:"v-62e92bf6",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/git.html",htmlFilePathRelative:"issue/git.html"},{data:{key:"v-87ea532c",path:"/issue/mini%20apps.html",title:"Mini Apps",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Mini Apps",tag:["小程序"]},excerpt:"",headers:[{level:2,title:"小程序错误：[app.json文件内容错误]app.json未找到",slug:"小程序错误-app-json文件内容错误-app-json未找到",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-87ea532c",path:"/issue/mini%20apps.html",title:"Mini Apps",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Mini Apps",tag:["小程序"]},excerpt:"",headers:[{level:2,title:"小程序错误：[app.json文件内容错误]app.json未找到",slug:"小程序错误-app-json文件内容错误-app-json未找到",children:[]}],content:'\r\n## 小程序错误：[app.json文件内容错误]app.json未找到\r\n\r\n问题描述：\r\n::: tip\r\n在Github上刚刚拉取的代码，导入微信开发者工具打开之后出现如下问题\r\n:::\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/Mini-Apps/1.png" alt="">\r\n\r\n::: tip\r\n解决办法：\r\n1.我自己的原因是项目目录没打开对，打开目录的时候\r\n。此文件夹的二级目录必须包含pages，styles，example等主目录。我是把新建一个文件夹之后把克隆的文件夹放里面，打开的是我自己建的文件夹，所以导致错误，\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/Mini-Apps/2.png" alt="">\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/Mini-Apps/3.png" alt="">\r\n\r\n:::\r\n如上图所示应该打开vip文件夹而不是小程序1文件夹\r\n重新打开之后问题解决\r\n\r\n总结：\r\n::: tip\r\n1、原因是项目目录不对，项目二级目录下必须有pages，styles，example等主目录。我是因为将别人的项目直接解压过来用，实际上应该解压后打开文件夹二级目录下的项目名称才是对的\r\n2、在创建项目 添加项目时选择的项目目录的文件夹下不能有次级文件夹 如果有次级文件夹 即便是空文件就会报“app.json\r\n未找到入口 app.json 文件，或者文件读取失败，请检查后重新编译。”\r\n3、项目下面不能有其他与项目无关的文件\r\n:::\r\n原文链接：https://blog.csdn.net/weixin_44865458/article/details/115689251\r\n\r\n<a href=\'https://developers.weixin.qq.com/miniprogram/dev/framework/config.html\'> 微信小程序文档</a>',contentRendered:'<h2 id="小程序错误-app-json文件内容错误-app-json未找到" tabindex="-1"><a class="header-anchor" href="#小程序错误-app-json文件内容错误-app-json未找到" aria-hidden="true">#</a> 小程序错误：[app.json文件内容错误]app.json未找到</h2>\n<p>问题描述：</p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>在Github上刚刚拉取的代码，导入微信开发者工具打开之后出现如下问题</p>\n</div>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/Mini-Apps/1.png" alt="">\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>解决办法：\n1.我自己的原因是项目目录没打开对，打开目录的时候\n。此文件夹的二级目录必须包含pages，styles，example等主目录。我是把新建一个文件夹之后把克隆的文件夹放里面，打开的是我自己建的文件夹，所以导致错误，\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/Mini-Apps/2.png" alt="">\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/Mini-Apps/3.png" alt=""></p>\n</div>\n<p>如上图所示应该打开vip文件夹而不是小程序1文件夹\n重新打开之后问题解决</p>\n<p>总结：</p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>1、原因是项目目录不对，项目二级目录下必须有pages，styles，example等主目录。我是因为将别人的项目直接解压过来用，实际上应该解压后打开文件夹二级目录下的项目名称才是对的\n2、在创建项目 添加项目时选择的项目目录的文件夹下不能有次级文件夹 如果有次级文件夹 即便是空文件就会报“app.json\n未找到入口 app.json 文件，或者文件读取失败，请检查后重新编译。”\n3、项目下面不能有其他与项目无关的文件</p>\n</div>\n<p>原文链接：https://blog.csdn.net/weixin_44865458/article/details/115689251</p>\n<p><a href=\'https://developers.weixin.qq.com/miniprogram/dev/framework/config.html\'> 微信小程序文档</a></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/mini apps.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"mini apps",filePath:"D:/个人博客/blog-demo/docs/issue/mini apps.md",filePathRelative:"issue/mini apps.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/mini apps.html.vue",componentFilePathRelative:"pages/issue/mini apps.html.vue",componentFileChunkName:"v-87ea532c",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/mini apps.html.js",dataFilePathRelative:"pages/issue/mini apps.html.js",dataFileChunkName:"v-87ea532c",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/mini apps.html",htmlFilePathRelative:"issue/mini apps.html"},{data:{key:"v-f956f2a2",path:"/issue/",title:"欢迎🎉🎉🎉🎉🎉",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],git:{updatedTime:1661586831e3,contributors:[{name:"LIU",email:"917675036@qq.com",commits:1}]}},key:"v-f956f2a2",path:"/issue/",title:"欢迎🎉🎉🎉🎉🎉",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],content:"# 欢迎🎉🎉🎉🎉🎉",contentRendered:'<h1 id="欢迎🎉🎉🎉🎉🎉" tabindex="-1"><a class="header-anchor" href="#欢迎🎉🎉🎉🎉🎉" aria-hidden="true">#</a> 欢迎🎉🎉🎉🎉🎉</h1>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/",pathLocale:"/",permalink:null,routeMeta:{},slug:"README",filePath:"D:/个人博客/blog-demo/docs/issue/README.md",filePathRelative:"issue/README.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/index.html.vue",componentFilePathRelative:"pages/issue/index.html.vue",componentFileChunkName:"v-f956f2a2",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/index.html.js",dataFilePathRelative:"pages/issue/index.html.js",dataFileChunkName:"v-f956f2a2",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/index.html",htmlFilePathRelative:"issue/index.html"},{data:{key:"v-4b663a7c",path:"/issue/vue.html",title:"Vue",lang:"zh-CN",frontmatter:{date:"2022/1/14 20:37",title:"Vue",tag:["Vue"]},excerpt:"",headers:[{level:2,title:"Missing required prop: “value” 报错的解决办法",slug:"missing-required-prop-value-报错的解决办法",children:[]},{level:2,title:"解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题",slug:"解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-4b663a7c",path:"/issue/vue.html",title:"Vue",lang:"zh-CN",frontmatter:{date:"2022/1/14 20:37",title:"Vue",tag:["Vue"]},excerpt:"",headers:[{level:2,title:"Missing required prop: “value” 报错的解决办法",slug:"missing-required-prop-value-报错的解决办法",children:[]},{level:2,title:"解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题",slug:"解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题",children:[]}],content:'\n\n::: tip \n\n记录的是本所遇到的bug\n\n:::\n\n##  Missing required prop: “value” 报错的解决办法\n##### 一. 在VUE中使用element-ui的el-select组件时出现该报错\n\n[Vue warn]: Missing required prop: "value"  \n1\n##### 二. 报错原因\n2.1.el-select中没有进行双向数据绑定（v-model）\n\n2.2 el-option没有进行value赋值\n\n##### 三. 具体示例\n3.1 报错示例一： el-select中没有进行双向数据绑定，且el-option没有进行value赋值\n\n代码如下：\n\n\x3c!-- <el-form-item label="获取积分">\n   <el-select>\n      <el-option label="请选择..."></el-option>\n      <el-option></el-option>\n    </el-select>\n </el-form-item> --\x3e\n\n运行结果： （界面初始加载时会报以下错，且在点击el-select与切换el-option时都会继续报错）\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/3.png" alt="">\n\n3.2 报错示例二： el-select中没有进行双向数据绑定，el-option进行了value赋值\n\n代码如下：\n\n``` vue\n\x3c!-- <el-form-item label="获取积分">\n   <el-select>\n      <el-option label="请选择..." value=""></el-option>\n      <el-option value="item.id"></el-option>\n    </el-select>\n </el-form-item> --\x3e\n ```\n\n运行结果：（界面初始加载时会报以下错，点击el-select与切换el-option时不会再继续报错）\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/4.png" alt="">\n\n3.3 报错示例三： el-select中进行了双向数据绑定，el-option没有进行value赋值\n\n代码如下：\n``` vue\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n      <el-option label="请选择..."></el-option>\n      <el-option></el-option>\n    </el-select>\n</el-form-item> --\x3e\n``` \n运行结果： （界面初始加载时会报以下错，且在点击el-select与切换el-option时都会继续报错）\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/5.png" alt="">\n\n\n##### 四. 解决办法\n☆ el-select进行双向数据绑定，且每一项el-option进行value赋值\n测试代码如下： （没有了上面的报错情况）\n\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n      <el-option label="请选择..." value=""></el-option>\n      <el-option  value="item.id" ></el-option>\n    </el-select>\n </el-form-item> --\x3e\n\n实际编写代码如下： （没有了上面的报错情况）\n\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n     <el-option v-for="(item, index) in channelList" :label="item.name" :value="item.id" :key="index"></el-option>\n   </el-select>\n</el-form-item> --\x3e\n\n补充：若el-select进行了双向数据绑定，且每一项el-option都进行了value赋值，然而还报了这个错，这时需要检查下每一项绑定value的变量是否都在数组中存在。比如上面的例子，就需要检查下channelList数组中每一项是否都有id这个变量。\n\n\n\n\n## 解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题\n在vue项目中，使用npm i 命令安装node modules时，出现报错：\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/1.png" alt="">\n最关键的应该是这一句：\n\nnpm ERR! Cannot read properties of null (reading \'pickAlgorithm\')\n1\n解决方法：\n在终端中运行命令：\nnpm cache clear --force\n\n然后重新运行 npm i 命令，再次安装\n安装完成，没有出现报错\nnpm run serve 运行项目，项目可以正常启动了。\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/2.png" alt="">\n\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>记录的是本所遇到的bug</p>\n</div>\n<h2 id="missing-required-prop-value-报错的解决办法" tabindex="-1"><a class="header-anchor" href="#missing-required-prop-value-报错的解决办法" aria-hidden="true">#</a> Missing required prop: “value” 报错的解决办法</h2>\n<h5 id="一-在vue中使用element-ui的el-select组件时出现该报错" tabindex="-1"><a class="header-anchor" href="#一-在vue中使用element-ui的el-select组件时出现该报错" aria-hidden="true">#</a> 一. 在VUE中使用element-ui的el-select组件时出现该报错</h5>\n<p>[Vue warn]: Missing required prop: &quot;value&quot;<br>\n1</p>\n<h5 id="二-报错原因" tabindex="-1"><a class="header-anchor" href="#二-报错原因" aria-hidden="true">#</a> 二. 报错原因</h5>\n<p>2.1.el-select中没有进行双向数据绑定（v-model）</p>\n<p>2.2 el-option没有进行value赋值</p>\n<h5 id="三-具体示例" tabindex="-1"><a class="header-anchor" href="#三-具体示例" aria-hidden="true">#</a> 三. 具体示例</h5>\n<p>3.1 报错示例一： el-select中没有进行双向数据绑定，且el-option没有进行value赋值</p>\n<p>代码如下：</p>\n\x3c!-- <el-form-item label="获取积分">\n   <el-select>\n      <el-option label="请选择..."></el-option>\n      <el-option></el-option>\n    </el-select>\n </el-form-item> --\x3e\n<p>运行结果： （界面初始加载时会报以下错，且在点击el-select与切换el-option时都会继续报错）\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/3.png" alt=""></p>\n<p>3.2 报错示例二： el-select中没有进行双向数据绑定，el-option进行了value赋值</p>\n<p>代码如下：</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token comment">&lt;!-- &lt;el-form-item label="获取积分">\n   &lt;el-select>\n      &lt;el-option label="请选择..." value="">&lt;/el-option>\n      &lt;el-option value="item.id">&lt;/el-option>\n    &lt;/el-select>\n &lt;/el-form-item> --\x3e</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>运行结果：（界面初始加载时会报以下错，点击el-select与切换el-option时不会再继续报错）\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/4.png" alt=""></p>\n<p>3.3 报错示例三： el-select中进行了双向数据绑定，el-option没有进行value赋值</p>\n<p>代码如下：</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token comment">&lt;!-- &lt;el-form-item label="获取积分">\n   &lt;el-select v-model="channel">\n      &lt;el-option label="请选择...">&lt;/el-option>\n      &lt;el-option>&lt;/el-option>\n    &lt;/el-select>\n&lt;/el-form-item> --\x3e</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>运行结果： （界面初始加载时会报以下错，且在点击el-select与切换el-option时都会继续报错）\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/5.png" alt=""></p>\n<h5 id="四-解决办法" tabindex="-1"><a class="header-anchor" href="#四-解决办法" aria-hidden="true">#</a> 四. 解决办法</h5>\n<p>☆ el-select进行双向数据绑定，且每一项el-option进行value赋值\n测试代码如下： （没有了上面的报错情况）</p>\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n      <el-option label="请选择..." value=""></el-option>\n      <el-option  value="item.id" ></el-option>\n    </el-select>\n </el-form-item> --\x3e\n<p>实际编写代码如下： （没有了上面的报错情况）</p>\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n     <el-option v-for="(item, index) in channelList" :label="item.name" :value="item.id" :key="index"></el-option>\n   </el-select>\n</el-form-item> --\x3e\n<p>补充：若el-select进行了双向数据绑定，且每一项el-option都进行了value赋值，然而还报了这个错，这时需要检查下每一项绑定value的变量是否都在数组中存在。比如上面的例子，就需要检查下channelList数组中每一项是否都有id这个变量。</p>\n<h2 id="解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题" tabindex="-1"><a class="header-anchor" href="#解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题" aria-hidden="true">#</a> 解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题</h2>\n<p>在vue项目中，使用npm i 命令安装node modules时，出现报错：\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/1.png" alt="">\n最关键的应该是这一句：</p>\n<p>npm ERR! Cannot read properties of null (reading \'pickAlgorithm\')\n1\n解决方法：\n在终端中运行命令：\nnpm cache clear --force</p>\n<p>然后重新运行 npm i 命令，再次安装\n安装完成，没有出现报错\nnpm run serve 运行项目，项目可以正常启动了。\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/2.png" alt=""></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/vue.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"vue",filePath:"D:/个人博客/blog-demo/docs/issue/vue.md",filePathRelative:"issue/vue.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/vue.html.vue",componentFilePathRelative:"pages/issue/vue.html.vue",componentFileChunkName:"v-4b663a7c",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/vue.html.js",dataFilePathRelative:"pages/issue/vue.html.js",dataFileChunkName:"v-4b663a7c",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/vue.html",htmlFilePathRelative:"issue/vue.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/register/index.html.vue",componentFilePathRelative:"pages/register/index.html.vue",componentFileChunkName:"v-031dfb13",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/register/index.html.js",dataFilePathRelative:"pages/register/index.html.js",dataFileChunkName:"v-031dfb13",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/register/index.html",htmlFilePathRelative:"register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],git:{}},key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/next-mood/index.html.vue",componentFilePathRelative:"pages/next-mood/index.html.vue",componentFileChunkName:"v-4382d077",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/next-mood/index.html.js",dataFilePathRelative:"pages/next-mood/index.html.js",dataFileChunkName:"v-4382d077",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/next-mood/index.html",htmlFilePathRelative:"next-mood/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"}]},7039:(n,a,s)=>{s.d(a,{Z:()=>e});const e=[{data:{key:"v-245bbacd",path:"/how-to-write-article.html",title:"主题配置",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:08"},excerpt:"",headers:[],git:{updatedTime:1661586831e3,contributors:[{name:"LIU",email:"917675036@qq.com",commits:1}]}},key:"v-245bbacd",path:"/how-to-write-article.html",title:"主题配置",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:08"},excerpt:"",headers:[],content:'# 主题配置\n``` js\n# date是手动设置此篇文章编写的时间\ndate: "2021/11/26 20:08"\n\n# 手动设置此篇文章封面\ncoverUrl: "https://h2.ioliu.cn/bing/BrassBandTrumpet_ZH-CN8703910231_640x480.jpg?imageslim"\n\n# 是否置顶\nsticky: true\n\n# 设置keyword 多个以,分开\nkeyword: 设置keyword,设置keyword,设置keyword,设置keyword\n\n# 设置description\ndescription: 这是此篇文章的描述\n\n# 手动设置标题，否则使用h1标签作为标题\ntitle: 这是一篇demo文章\n\n# 这是设置标签，数组形式\ntag: [Aurora,demo]\n\n# 这里设置类别，数组形式\ncategories: [类别,demo类别]\n```\n\n\x3c!-- 写内容 --\x3e\n',contentRendered:'<h1 id="主题配置" tabindex="-1"><a class="header-anchor" href="#主题配置" aria-hidden="true">#</a> 主题配置</h1>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code># date是手动设置此篇文章编写的时间\n<span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token string">"2021/11/26 20:08"</span>\n\n# 手动设置此篇文章封面\n<span class="token literal-property property">coverUrl</span><span class="token operator">:</span> <span class="token string">"https://h2.ioliu.cn/bing/BrassBandTrumpet_ZH-CN8703910231_640x480.jpg?imageslim"</span>\n\n# 是否置顶\n<span class="token literal-property property">sticky</span><span class="token operator">:</span> <span class="token boolean">true</span>\n\n# 设置keyword 多个以<span class="token punctuation">,</span>分开\n<span class="token literal-property property">keyword</span><span class="token operator">:</span> 设置keyword<span class="token punctuation">,</span>设置keyword<span class="token punctuation">,</span>设置keyword<span class="token punctuation">,</span>设置keyword\n\n# 设置description\n<span class="token literal-property property">description</span><span class="token operator">:</span> 这是此篇文章的描述\n\n# 手动设置标题，否则使用h1标签作为标题\n<span class="token literal-property property">title</span><span class="token operator">:</span> 这是一篇demo文章\n\n# 这是设置标签，数组形式\n<span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token punctuation">[</span>Aurora<span class="token punctuation">,</span>demo<span class="token punctuation">]</span>\n\n# 这里设置类别，数组形式\n<span class="token literal-property property">categories</span><span class="token operator">:</span> <span class="token punctuation">[</span>类别<span class="token punctuation">,</span>demo类别<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>\x3c!-- 写内容 --\x3e\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/how-to-write-article.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"how-to-write-article",filePath:"D:/个人博客/blog-demo/docs/how-to-write-article.md",filePathRelative:"how-to-write-article.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/how-to-write-article.html.vue",componentFilePathRelative:"pages/how-to-write-article.html.vue",componentFileChunkName:"v-245bbacd",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/how-to-write-article.html.js",dataFilePathRelative:"pages/how-to-write-article.html.js",dataFileChunkName:"v-245bbacd",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/how-to-write-article.html",htmlFilePathRelative:"how-to-write-article.html"},{data:{key:"v-e9f472bc",path:"/live2d.html",title:"",lang:"zh-CN",frontmatter:{layout:"Live2d"},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-e9f472bc",path:"/live2d.html",title:"",lang:"zh-CN",frontmatter:{layout:"Live2d"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/live2d.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"live2d",filePath:"D:/个人博客/blog-demo/docs/live2d.md",filePathRelative:"live2d.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/live2d.html.vue",componentFilePathRelative:"pages/live2d.html.vue",componentFileChunkName:"v-e9f472bc",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/live2d.html.js",dataFilePathRelative:"pages/live2d.html.js",dataFileChunkName:"v-e9f472bc",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/live2d.html",htmlFilePathRelative:"live2d.html"},{data:{key:"v-7128c52e",path:"/mood.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"layout: Mood",slug:"layout-mood",children:[{level:3,title:"xx日记",slug:"xx日记",children:[]}]}],git:{updatedTime:null,contributors:[]}},key:"v-7128c52e",path:"/mood.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"layout: Mood",slug:"layout-mood",children:[{level:3,title:"xx日记",slug:"xx日记",children:[]}]}],content:"\r\n---\r\nlayout: Mood\r\n---\r\n### xx日记",contentRendered:'<hr>\n<h2 id="layout-mood" tabindex="-1"><a class="header-anchor" href="#layout-mood" aria-hidden="true">#</a> layout: Mood</h2>\n<h3 id="xx日记" tabindex="-1"><a class="header-anchor" href="#xx日记" aria-hidden="true">#</a> xx日记</h3>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/mood.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"mood",filePath:"D:/个人博客/blog-demo/docs/mood.md",filePathRelative:"mood.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/mood.html.vue",componentFilePathRelative:"pages/mood.html.vue",componentFileChunkName:"v-7128c52e",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/mood.html.js",dataFilePathRelative:"pages/mood.html.js",dataFileChunkName:"v-7128c52e",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/mood.html",htmlFilePathRelative:"mood.html"},{data:{key:"v-2c4aad21",path:"/next-mood.html",title:"",lang:"zh-CN",frontmatter:{layout:"NextMood"},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-2c4aad21",path:"/next-mood.html",title:"",lang:"zh-CN",frontmatter:{layout:"NextMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/next-mood.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"next-mood",filePath:"D:/个人博客/blog-demo/docs/next-mood.md",filePathRelative:"next-mood.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/next-mood.html.vue",componentFilePathRelative:"pages/next-mood.html.vue",componentFileChunkName:"v-2c4aad21",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/next-mood.html.js",dataFilePathRelative:"pages/next-mood.html.js",dataFileChunkName:"v-2c4aad21",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/next-mood.html",htmlFilePathRelative:"next-mood.html"},{data:{key:"v-a1c53cc0",path:"/photo.html",title:"",lang:"zh-CN",frontmatter:{layout:"Photo"},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-a1c53cc0",path:"/photo.html",title:"",lang:"zh-CN",frontmatter:{layout:"Photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/photo.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"photo",filePath:"D:/个人博客/blog-demo/docs/photo.md",filePathRelative:"photo.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/photo.html.vue",componentFilePathRelative:"pages/photo.html.vue",componentFileChunkName:"v-a1c53cc0",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/photo.html.js",dataFilePathRelative:"pages/photo.html.js",dataFileChunkName:"v-a1c53cc0",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/photo.html",htmlFilePathRelative:"photo.html"},{data:{key:"v-79dc7caa",path:"/use.html",title:"代码测试",lang:"zh-CN",frontmatter:{date:"2021/12/20 11:05",sticky:!0,title:"代码测试"},excerpt:"",headers:[{level:2,title:"代码测试",slug:"代码测试",children:[{level:3,title:"312",slug:"_312",children:[]},{level:3,title:"123",slug:"_123",children:[]}]}],git:{updatedTime:1661586831e3,contributors:[{name:"LIU",email:"917675036@qq.com",commits:1}]}},key:"v-79dc7caa",path:"/use.html",title:"代码测试",lang:"zh-CN",frontmatter:{date:"2021/12/20 11:05",sticky:!0,title:"代码测试"},excerpt:"",headers:[{level:2,title:"代码测试",slug:"代码测试",children:[{level:3,title:"312",slug:"_312",children:[]},{level:3,title:"123",slug:"_123",children:[]}]}],content:'## 代码测试<badge text="132"/>\n`AABB上上下下左左右右`\n\n![image-20211026234805318](https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/55.jpg)\n\n### 312 \n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8A%A8%E5%9B%BE/53.gif" alt="">\n\n###  123 <badge text=""/>\n\n``` js\n132\n```\n\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/04.jpg" alt="">\n',contentRendered:'<h2 id="代码测试" tabindex="-1"><a class="header-anchor" href="#代码测试" aria-hidden="true">#</a> 代码测试<badge text="132"/></h2>\n<p><code>AABB上上下下左左右右</code></p>\n<p><img src="https://ooszy.cco.vin/img/blog-public/ljz.gif" alt="image-20211026234805318" originSrc="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/qq%E5%9B%BE%E7%89%87/55.jpg" data="aurora"></p>\n<h3 id="_312" tabindex="-1"><a class="header-anchor" href="#_312" aria-hidden="true">#</a> 312</h3>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/动图/53.gif" alt="">\n<h3 id="_123" tabindex="-1"><a class="header-anchor" href="#_123" aria-hidden="true">#</a> 123 <badge text=""/></h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token number">132</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/04.jpg" alt="">\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/use.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"use",filePath:"D:/个人博客/blog-demo/docs/use.md",filePathRelative:"use.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/use.html.vue",componentFilePathRelative:"pages/use.html.vue",componentFileChunkName:"v-79dc7caa",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/use.html.js",dataFilePathRelative:"pages/use.html.js",dataFileChunkName:"v-79dc7caa",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/use.html",htmlFilePathRelative:"use.html"},{data:{key:"v-7d76a0cf",path:"/base/admin.html",title:"CMD",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"CMD",description:"..."},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-7d76a0cf",path:"/base/admin.html",title:"CMD",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"CMD",description:"..."},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/admin.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"admin",filePath:"D:/个人博客/blog-demo/docs/base/admin.md",filePathRelative:"base/admin.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/admin.html.vue",componentFilePathRelative:"pages/base/admin.html.vue",componentFileChunkName:"v-7d76a0cf",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/admin.html.js",dataFilePathRelative:"pages/base/admin.html.js",dataFileChunkName:"v-7d76a0cf",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/admin.html",htmlFilePathRelative:"base/admin.html"},{data:{key:"v-ed98bed8",path:"/base/Agreement.html",title:"HTTP协议",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:50",title:"HTTP协议",tag:["HTTP"]},excerpt:"",headers:[{level:2,title:"http协议详解",slug:"http协议详解",children:[{level:3,title:"HTTP状态码",slug:"http状态码",children:[]}]}],git:{updatedTime:null,contributors:[]}},key:"v-ed98bed8",path:"/base/Agreement.html",title:"HTTP协议",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:50",title:"HTTP协议",tag:["HTTP"]},excerpt:"",headers:[{level:2,title:"http协议详解",slug:"http协议详解",children:[{level:3,title:"HTTP状态码",slug:"http状态码",children:[]}]}],content:'\r\n## http协议详解\r\n#### 超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网数据通信的基础。\r\n##### HTTP协议概述\r\n\r\nHTTP是一个客户终端（用户）和服务器端（网站)请求和答应是标准（TCP）。通过使用网页浏览，网络爬虫或者其他的工具，客户端发起一个HTTP协议到服务器上指定端口（默认端口为80）。我们成这个客户端为用户代理程序（user agent）。应答的服务器上存着一些资源，比如HTML文件和图像。我们称这个应答服务器为原服务器（origin server）。在用户代理和原服务器中间可能存在多个中间层，比如代理服务器、网关或者隧道（tunnel）。\r\n\r\n尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用他或他支持的层。事实上，HTTP协议可以在任何互联网协议上，或其他网络上实现。HRRP假定其它下层协议提供可靠传输。因此，任何能够提供这种保证的协议都可以被其他使用。因此也就是在其他TCP/IP协议族中使用TCP作为其传输层。\r\n\r\n通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器就会向客户端返回一个状态，比如"HTTP/1.1 200 OK"，以及返回的内容，如请求文件、错误消息、或者其他信息。\r\n\r\n##### HTTP工作原理\r\n\r\nHTTP协议定义web客户端如何从web服务器请求web页面，以及服务器如何把web页面传给客户端。HTTP协议采用了请求/相应模型。客户端向服务器发送一个请求报文，请求报文含请求的方法、URL、协议版本、请求头部和请求数据。\r\n\r\n注：**套接字**(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口。\r\n\r\n**以下是HTTP请求/相应的步骤**\r\n\r\n**1.客户端连接到web服务器**\r\n\r\n一个HTTP客户端，通常是浏览器，与web服务器的HTTP端口建立一个TCP套接字连接。\r\n\r\n **2.发送HTTP请求**\r\n\r\n通过TCP套接字，客户端向web服务器发送一个文本的请求报文。HTTP请求报文由3部分组成（请求行+请求头+请求体）\r\n\r\n**3.服务器接收请求并返回HTTP响应**\r\n\r\nweb服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。响应头由三部分组成\r\n\r\n1、一个数字和文字组成的状态码，用来显示请求成功或者失败。\r\n\r\n2、响应头，和请求头一样，响应头也包含许多有用的信息，比如服务器类型、日期时间、内容类型和长度等。\r\n\r\n3、响应体，也就是响应报文。\r\n\r\n**4.释放连接TCP连接**\r\n\r\n若connection模式为close，则服务器主动关闭连接，客户端被动关闭连接，释放TCP连接。\r\n\r\n若connection模式为keepalive，组该连接会保持一段时间，再改时间内可以说基础接收请求。\r\n\r\n**5.客户端浏览器解析HTML内容**\r\n\r\n客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。\r\n\r\n##### 举个例子\r\n**在浏览器地址栏输入URL之后会经历以下流程**\r\n1.浏览器向DNS服务器清洁解析该URL中是域名所对应的IP地址；\r\n\r\n2.解析出ip地址之后，根据IP地址和默认端口80，和服务器建立TCP连接；\r\n\r\n3.浏览器发出读取文件（URL中域名后面部分对应的文件）的HTTP请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器；\r\n\r\n4.服务器对浏览器请求做出相应，并把对应的html文本发送给浏览器；\r\n\r\n5.释放TCP连接；\r\n\r\n6.浏览器将该html文本解析，并显示内容\r\n\r\n##### 重点知识点\r\n- http协议是基于TCP/IP协议之上的应用层协议\r\n\r\n- 基于请求-响应的模式\r\n\r\n**http协议规定，请求从客户端发出，最后服务器响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收请求之前不会发送响应。**\r\n\r\n- 无状态保存\r\n\r\nHTTP是一种不保存状态，即无状态协议。http协议自身不对请求和响应之间的状态进行保存。也就是说在http这个级别，协议对于发送过的请求或响应都不做持久化处理。\r\n\r\n使用HTTP协议，每当有新的请求发送时，就会有对应的新的响应产生。协议本身并不能保留之前的一切的请求或响应报文信息。这是为了更快的处理大量事务，确保协议的可伸缩性，而特意吧HTTP协议设计成如此简单。可是，随着web的不断发展，因无状态而导致业务处理变得棘手的情况增多了。跳转页面却任然需要保存登录状态这种情况就需要保存状态。http为无状态协议，但是为了实现这种功能就引入了cookie技术。有了cookie再使用HTTP协议，就可以管理状态了。有关cookie的讲解稍后继续。\r\n\r\n**无连接**\r\n\r\n无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并受到客户的应答后，即断开连接。才用这种方式，可以节省传输时间，并且可以提高并发性，不能和每个用户建立长久的连接，请求一次响应一次，服务器和客户端连接就中断了。早期的http是请求一个相应之后直接就断开了，但是现在的http协议1.1版本不是直接断开，而是等待几秒钟，目的是等待用户的后续操作，如果用户在这几秒内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒中，用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数。默认3秒\r\n\r\n#### 七层网络模型\r\n物理层 > 数据链路层 > 网络层 > 传输层 > 会话层 > 表示层 > 应用层\r\n\r\n- 应用层：网络服务与最终用户的一个接口（ 协议有：http，https）\r\n- 表示层：数据的表示安全压缩（五层模型已合并到应用层）\r\n- 会话层：建立、管理、终止会话（五层模型已合并到应用层）对应主机进程，指本地主机与远程主机正在进行的会话\r\n- 传输层：定义传输数据的协议端口号，以及流控和差错校验。（协议有：TCP, UDP数据一旦离开网卡即进入网络传输层）\r\n- 网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。（协议有：ICMP IGMP IP（IPV4 IPV6））\r\n- 数据链路层：建立逻辑连接，进行硬件地址寻址，差错校验等功能（由底层网络定义协议）将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。\r\n- 物理层：建立维护断开物理连接（由底层网络定义协议）TCP/IP层级模型结构，应用层之间的协议通过逐级调用传输层、网络层和物理数据链路层而可以实现应用层的应用程序通讯互联。\r\n#### HTTP请求方法\r\n\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/%E7%AC%94%E8%AE%B0/1.png" alt="">\r\n\r\n##### 比较get和post\r\n**结论：get和post没有实质区别，只是报文格式不同**\r\n**get - 从指定的资源请求数据**\r\n**post - 向指定的资源提交要被处理的数据**\r\n\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/%E7%AC%94%E8%AE%B0/2.png" alt="">\r\n\r\n##### GET方法\r\n请注意查询字符串（名称/值对）是在get请求的url中发送的\r\n\r\n- get请求可被缓存\r\n- get请求保存在浏览器历史记录中\r\n- get请求可被收藏为书签\r\n- get请求不应在处理敏感数据时使用\r\n- get请求有长度限制\r\n- get请求只应当用于取回数据\r\n##### POST方法\r\n请注意，查询字符串（名称/值对）是在post请求的http**主体**中发送的\r\n\r\n- post请求不会被缓存\r\n\r\n- post请求不会保留在浏览器历史记录中\r\n\r\n- post请求不能被收藏为书签\r\n\r\n- post请求对数据长度没有要求\r\n\r\n**post与get安全性比较**\r\n按照网上大部分文章解释，post比get安全，因为地址栏看不见。\r\n\r\n然而从传输角度来说他们都是不安全的，因为http在网络上是明文传输的只要在网络节点上捉包，就能完整的获取数据报文。要想安全传输，就只有加密也就是https。\r\n\r\n**GET产生一个TCP数据包，POST产生两个数据包**\r\n对于get方式请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）\r\n\r\n而对于post，浏览器先发送header，服务器响应100continue，浏览器再发送data，服务器响应200（返回数据）\r\n\r\nso，基于这一点三个注意\r\n\r\n1.get与post都有自己的语义，不能随便混用。\r\n\r\n2.据研究，在网络环境好的情况下，发一次包和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次保的TCP在验证数据包的完整性上，有非常大的优点。\r\n\r\n3.并不是所有的浏览器都发送两次包，Firefox就只发送一次。\r\n\r\n### HTTP状态码\r\n所有HTTP响应的第一行都是状态行，依次是当前http版本号，三位数字组成的状态码，以及描述状态的短语，彼此由空格分隔。\r\n\r\n状态码的第一个数字代表当前响应的类型：\r\n\r\n- 1xx消息——请求已被服务器接收，继续处理\r\n- 2xx成功——请求已成功被服务器接收、理解、并接受\r\n- 3xx重定向——需要后续操作才能完成这一请求\r\n- 4xx请求错误——请求含有词法错误或者无法被执行\r\n- 5xx服务器错误——服务器在处理某个正确请求时发生错误\r\n\r\n|      |             **类型**             |        **原因短语**        |\r\n| ---- | :------------------------------: | :------------------------: |\r\n| 1xx  |    information（信息状态码）     |     接收的请求正在处理     |\r\n| 2xx  |      success（成功状态码）       |     请求正常，处理完毕     |\r\n| 3xx  |   redirection（重定向状态码）    | 需求进行附加操作已完成请求 |\r\n| 4xx  | client error（客户端错误状态码） |     服务器无法处理请求     |\r\n| 5xx  | server error（服务器错误状态码)  |     服务器处理请求出错     |\r\n\r\n\r\n\r\n#### URL\r\nurl = 协议 + 域名或IP + 端口号 + 路径 + 查询字符串 + 锚点\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/%E7%AC%94%E8%AE%B0/3.png" alt="">\r\n\r\n超文本传输协议（http）的统一资源定位符，将从因特网获取信息的五个基本元素，包括在一个简单的地址中；\r\n\r\n路径没有必要有后缀\r\nURL的全称是统一资源定位符\r\n锚点不支持中文，锚点不会传给服务器，无法在network面板看到\r\nDNS\r\nNDS就像是个翻译官，能够把baidu.com翻译成220.181.111.188 让机器理解。\r\n\r\nDNS是用来做域名解析的，他会在你上网输入网址后，把它转换成IP，然后去访问服务器。\r\n\r\n参考文档：https://www.cnblogs.com/weibanggang/p/9454581.html\r\n\r\n参考文档：https://www.w3school.com.cn/tags/html_ref_httpmethods.asp\r\n\r\n参考文档：https://www.cnblogs.com/an-wen/p/11180076.html\r\n\r\n\r\n————————————————\r\n\r\n原文链接：https://blog.csdn.net/weixin_45948938/article/details/104530330',contentRendered:'<h2 id="http协议详解" tabindex="-1"><a class="header-anchor" href="#http协议详解" aria-hidden="true">#</a> http协议详解</h2>\n<h4 id="超文本传输协议-是一种用于分布式、协作式和超媒体信息系统的应用层协议。http是万维网数据通信的基础。" tabindex="-1"><a class="header-anchor" href="#超文本传输协议-是一种用于分布式、协作式和超媒体信息系统的应用层协议。http是万维网数据通信的基础。" aria-hidden="true">#</a> 超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网数据通信的基础。</h4>\n<h5 id="http协议概述" tabindex="-1"><a class="header-anchor" href="#http协议概述" aria-hidden="true">#</a> HTTP协议概述</h5>\n<p>HTTP是一个客户终端（用户）和服务器端（网站)请求和答应是标准（TCP）。通过使用网页浏览，网络爬虫或者其他的工具，客户端发起一个HTTP协议到服务器上指定端口（默认端口为80）。我们成这个客户端为用户代理程序（user agent）。应答的服务器上存着一些资源，比如HTML文件和图像。我们称这个应答服务器为原服务器（origin server）。在用户代理和原服务器中间可能存在多个中间层，比如代理服务器、网关或者隧道（tunnel）。</p>\n<p>尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用他或他支持的层。事实上，HTTP协议可以在任何互联网协议上，或其他网络上实现。HRRP假定其它下层协议提供可靠传输。因此，任何能够提供这种保证的协议都可以被其他使用。因此也就是在其他TCP/IP协议族中使用TCP作为其传输层。</p>\n<p>通常，由HTTP客户端发起一个请求，创建一个到服务器指定端口的TCP连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器就会向客户端返回一个状态，比如&quot;HTTP/1.1 200 OK&quot;，以及返回的内容，如请求文件、错误消息、或者其他信息。</p>\n<h5 id="http工作原理" tabindex="-1"><a class="header-anchor" href="#http工作原理" aria-hidden="true">#</a> HTTP工作原理</h5>\n<p>HTTP协议定义web客户端如何从web服务器请求web页面，以及服务器如何把web页面传给客户端。HTTP协议采用了请求/相应模型。客户端向服务器发送一个请求报文，请求报文含请求的方法、URL、协议版本、请求头部和请求数据。</p>\n<p>注：<strong>套接字</strong>(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口。</p>\n<p><strong>以下是HTTP请求/相应的步骤</strong></p>\n<p><strong>1.客户端连接到web服务器</strong></p>\n<p>一个HTTP客户端，通常是浏览器，与web服务器的HTTP端口建立一个TCP套接字连接。</p>\n<p><strong>2.发送HTTP请求</strong></p>\n<p>通过TCP套接字，客户端向web服务器发送一个文本的请求报文。HTTP请求报文由3部分组成（请求行+请求头+请求体）</p>\n<p><strong>3.服务器接收请求并返回HTTP响应</strong></p>\n<p>web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。响应头由三部分组成</p>\n<p>1、一个数字和文字组成的状态码，用来显示请求成功或者失败。</p>\n<p>2、响应头，和请求头一样，响应头也包含许多有用的信息，比如服务器类型、日期时间、内容类型和长度等。</p>\n<p>3、响应体，也就是响应报文。</p>\n<p><strong>4.释放连接TCP连接</strong></p>\n<p>若connection模式为close，则服务器主动关闭连接，客户端被动关闭连接，释放TCP连接。</p>\n<p>若connection模式为keepalive，组该连接会保持一段时间，再改时间内可以说基础接收请求。</p>\n<p><strong>5.客户端浏览器解析HTML内容</strong></p>\n<p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p>\n<h5 id="举个例子" tabindex="-1"><a class="header-anchor" href="#举个例子" aria-hidden="true">#</a> 举个例子</h5>\n<p><strong>在浏览器地址栏输入URL之后会经历以下流程</strong>\n1.浏览器向DNS服务器清洁解析该URL中是域名所对应的IP地址；</p>\n<p>2.解析出ip地址之后，根据IP地址和默认端口80，和服务器建立TCP连接；</p>\n<p>3.浏览器发出读取文件（URL中域名后面部分对应的文件）的HTTP请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器；</p>\n<p>4.服务器对浏览器请求做出相应，并把对应的html文本发送给浏览器；</p>\n<p>5.释放TCP连接；</p>\n<p>6.浏览器将该html文本解析，并显示内容</p>\n<h5 id="重点知识点" tabindex="-1"><a class="header-anchor" href="#重点知识点" aria-hidden="true">#</a> 重点知识点</h5>\n<ul>\n<li>\n<p>http协议是基于TCP/IP协议之上的应用层协议</p>\n</li>\n<li>\n<p>基于请求-响应的模式</p>\n</li>\n</ul>\n<p><strong>http协议规定，请求从客户端发出，最后服务器响应该请求并返回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收请求之前不会发送响应。</strong></p>\n<ul>\n<li>无状态保存</li>\n</ul>\n<p>HTTP是一种不保存状态，即无状态协议。http协议自身不对请求和响应之间的状态进行保存。也就是说在http这个级别，协议对于发送过的请求或响应都不做持久化处理。</p>\n<p>使用HTTP协议，每当有新的请求发送时，就会有对应的新的响应产生。协议本身并不能保留之前的一切的请求或响应报文信息。这是为了更快的处理大量事务，确保协议的可伸缩性，而特意吧HTTP协议设计成如此简单。可是，随着web的不断发展，因无状态而导致业务处理变得棘手的情况增多了。跳转页面却任然需要保存登录状态这种情况就需要保存状态。http为无状态协议，但是为了实现这种功能就引入了cookie技术。有了cookie再使用HTTP协议，就可以管理状态了。有关cookie的讲解稍后继续。</p>\n<p><strong>无连接</strong></p>\n<p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并受到客户的应答后，即断开连接。才用这种方式，可以节省传输时间，并且可以提高并发性，不能和每个用户建立长久的连接，请求一次响应一次，服务器和客户端连接就中断了。早期的http是请求一个相应之后直接就断开了，但是现在的http协议1.1版本不是直接断开，而是等待几秒钟，目的是等待用户的后续操作，如果用户在这几秒内有新的请求，那么还是通过之前的连接通道来收发消息，如果过了这几秒中，用户没有发送新的请求，那么就会断开连接，这样可以提高效率，减少短时间内建立连接的次数。默认3秒</p>\n<h4 id="七层网络模型" tabindex="-1"><a class="header-anchor" href="#七层网络模型" aria-hidden="true">#</a> 七层网络模型</h4>\n<p>物理层 &gt; 数据链路层 &gt; 网络层 &gt; 传输层 &gt; 会话层 &gt; 表示层 &gt; 应用层</p>\n<ul>\n<li>应用层：网络服务与最终用户的一个接口（ 协议有：http，https）</li>\n<li>表示层：数据的表示安全压缩（五层模型已合并到应用层）</li>\n<li>会话层：建立、管理、终止会话（五层模型已合并到应用层）对应主机进程，指本地主机与远程主机正在进行的会话</li>\n<li>传输层：定义传输数据的协议端口号，以及流控和差错校验。（协议有：TCP, UDP数据一旦离开网卡即进入网络传输层）</li>\n<li>网络层：进行逻辑地址寻址，实现不同网络之间的路径选择。（协议有：ICMP IGMP IP（IPV4 IPV6））</li>\n<li>数据链路层：建立逻辑连接，进行硬件地址寻址，差错校验等功能（由底层网络定义协议）将比特组合成字节进而组合成帧，用MAC地址访问介质，错误发现但不能纠正。</li>\n<li>物理层：建立维护断开物理连接（由底层网络定义协议）TCP/IP层级模型结构，应用层之间的协议通过逐级调用传输层、网络层和物理数据链路层而可以实现应用层的应用程序通讯互联。</li>\n</ul>\n<h4 id="http请求方法" tabindex="-1"><a class="header-anchor" href="#http请求方法" aria-hidden="true">#</a> HTTP请求方法</h4>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/笔记/1.png" alt="">\n<h5 id="比较get和post" tabindex="-1"><a class="header-anchor" href="#比较get和post" aria-hidden="true">#</a> 比较get和post</h5>\n<p><strong>结论：get和post没有实质区别，只是报文格式不同</strong>\n<strong>get - 从指定的资源请求数据</strong>\n<strong>post - 向指定的资源提交要被处理的数据</strong></p>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/笔记/2.png" alt="">\n<h5 id="get方法" tabindex="-1"><a class="header-anchor" href="#get方法" aria-hidden="true">#</a> GET方法</h5>\n<p>请注意查询字符串（名称/值对）是在get请求的url中发送的</p>\n<ul>\n<li>get请求可被缓存</li>\n<li>get请求保存在浏览器历史记录中</li>\n<li>get请求可被收藏为书签</li>\n<li>get请求不应在处理敏感数据时使用</li>\n<li>get请求有长度限制</li>\n<li>get请求只应当用于取回数据</li>\n</ul>\n<h5 id="post方法" tabindex="-1"><a class="header-anchor" href="#post方法" aria-hidden="true">#</a> POST方法</h5>\n<p>请注意，查询字符串（名称/值对）是在post请求的http<strong>主体</strong>中发送的</p>\n<ul>\n<li>\n<p>post请求不会被缓存</p>\n</li>\n<li>\n<p>post请求不会保留在浏览器历史记录中</p>\n</li>\n<li>\n<p>post请求不能被收藏为书签</p>\n</li>\n<li>\n<p>post请求对数据长度没有要求</p>\n</li>\n</ul>\n<p><strong>post与get安全性比较</strong>\n按照网上大部分文章解释，post比get安全，因为地址栏看不见。</p>\n<p>然而从传输角度来说他们都是不安全的，因为http在网络上是明文传输的只要在网络节点上捉包，就能完整的获取数据报文。要想安全传输，就只有加密也就是https。</p>\n<p><strong>GET产生一个TCP数据包，POST产生两个数据包</strong>\n对于get方式请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）</p>\n<p>而对于post，浏览器先发送header，服务器响应100continue，浏览器再发送data，服务器响应200（返回数据）</p>\n<p>so，基于这一点三个注意</p>\n<p>1.get与post都有自己的语义，不能随便混用。</p>\n<p>2.据研究，在网络环境好的情况下，发一次包和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次保的TCP在验证数据包的完整性上，有非常大的优点。</p>\n<p>3.并不是所有的浏览器都发送两次包，Firefox就只发送一次。</p>\n<h3 id="http状态码" tabindex="-1"><a class="header-anchor" href="#http状态码" aria-hidden="true">#</a> HTTP状态码</h3>\n<p>所有HTTP响应的第一行都是状态行，依次是当前http版本号，三位数字组成的状态码，以及描述状态的短语，彼此由空格分隔。</p>\n<p>状态码的第一个数字代表当前响应的类型：</p>\n<ul>\n<li>1xx消息——请求已被服务器接收，继续处理</li>\n<li>2xx成功——请求已成功被服务器接收、理解、并接受</li>\n<li>3xx重定向——需要后续操作才能完成这一请求</li>\n<li>4xx请求错误——请求含有词法错误或者无法被执行</li>\n<li>5xx服务器错误——服务器在处理某个正确请求时发生错误</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style="text-align:center"><strong>类型</strong></th>\n<th style="text-align:center"><strong>原因短语</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td style="text-align:center">information（信息状态码）</td>\n<td style="text-align:center">接收的请求正在处理</td>\n</tr>\n<tr>\n<td>2xx</td>\n<td style="text-align:center">success（成功状态码）</td>\n<td style="text-align:center">请求正常，处理完毕</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td style="text-align:center">redirection（重定向状态码）</td>\n<td style="text-align:center">需求进行附加操作已完成请求</td>\n</tr>\n<tr>\n<td>4xx</td>\n<td style="text-align:center">client error（客户端错误状态码）</td>\n<td style="text-align:center">服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td style="text-align:center">server error（服务器错误状态码)</td>\n<td style="text-align:center">服务器处理请求出错</td>\n</tr>\n</tbody>\n</table>\n<h4 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> URL</h4>\n<p>url = 协议 + 域名或IP + 端口号 + 路径 + 查询字符串 + 锚点\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/笔记/3.png" alt=""></p>\n<p>超文本传输协议（http）的统一资源定位符，将从因特网获取信息的五个基本元素，包括在一个简单的地址中；</p>\n<p>路径没有必要有后缀\nURL的全称是统一资源定位符\n锚点不支持中文，锚点不会传给服务器，无法在network面板看到\nDNS\nNDS就像是个翻译官，能够把baidu.com翻译成220.181.111.188 让机器理解。</p>\n<p>DNS是用来做域名解析的，他会在你上网输入网址后，把它转换成IP，然后去访问服务器。</p>\n<p>参考文档：https://www.cnblogs.com/weibanggang/p/9454581.html</p>\n<p>参考文档：https://www.w3school.com.cn/tags/html_ref_httpmethods.asp</p>\n<p>参考文档：https://www.cnblogs.com/an-wen/p/11180076.html</p>\n<p>————————————————</p>\n<p>原文链接：https://blog.csdn.net/weixin_45948938/article/details/104530330</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/Agreement.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Agreement",filePath:"D:/个人博客/blog-demo/docs/base/Agreement.md",filePathRelative:"base/Agreement.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Agreement.html.vue",componentFilePathRelative:"pages/base/Agreement.html.vue",componentFileChunkName:"v-ed98bed8",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Agreement.html.js",dataFilePathRelative:"pages/base/Agreement.html.js",dataFileChunkName:"v-ed98bed8",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/Agreement.html",htmlFilePathRelative:"base/Agreement.html"},{data:{key:"v-4cf350f9",path:"/base/docs.html",title:"Vue...",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"Vue..."},excerpt:"",headers:[{level:2,title:"vue...",slug:"vue",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-4cf350f9",path:"/base/docs.html",title:"Vue...",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"Vue..."},excerpt:"",headers:[{level:2,title:"vue...",slug:"vue",children:[]}],content:"## vue...",contentRendered:'<h2 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> vue...</h2>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/docs.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"docs",filePath:"D:/个人博客/blog-demo/docs/base/docs.md",filePathRelative:"base/docs.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/docs.html.vue",componentFilePathRelative:"pages/base/docs.html.vue",componentFileChunkName:"v-4cf350f9",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/docs.html.js",dataFilePathRelative:"pages/base/docs.html.js",dataFileChunkName:"v-4cf350f9",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/docs.html",htmlFilePathRelative:"base/docs.html"},{data:{key:"v-48959c4c",path:"/base/Interaction.html",title:"前后端交互详细步骤",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:46",title:"前后端交互详细步骤"},excerpt:"",headers:[{level:2,title:"前后端交互",slug:"前后端交互",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-48959c4c",path:"/base/Interaction.html",title:"前后端交互详细步骤",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:46",title:"前后端交互详细步骤"},excerpt:"",headers:[{level:2,title:"前后端交互",slug:"前后端交互",children:[]}],content:'\r\n## 前后端交互\r\n浏览器输入域名到页面显示完整的流程\r\n##### 1.浏览器输入地址比如http://www.baidu.com，根据域名和端口号通过DNS解析成IP地址\r\n##### 2.根据IP地址以及端口号找到对应的服务器\r\n<a href="http://www.imooc.com/wiki/httplesson/socketprotocol.html">(http协议中的tcp协议) 协议三次握手和四次挥手</a>\r\nhttp的默认端口号80\r\nhttps默认端口号443\r\nftp默认端口21\r\nmysql默认端口号3306\r\n\r\n##### 3.服务器接收到来自前端的请求，分配到对应路由‘/’\r\n\r\n##### 4.在路由里取到对应的文件。例如 index.html\r\n **（1）直接将index.html文件返回**\r\n``` \r\n\ta.有可能首页没什么数据，就是个静态页\r\n\tb.也有可能页面并不完整，但是后端不渲染，先返回给前端，后期前端通过ajax重新渲染\r\n```\r\n  **（2）先取出index.html，然后再从数据库里拿到数据，根据数据完成页面模板替换，数据填充，得到完整的页面html字符串，再返回给前端（后端渲染）**\r\n注：1.前端渲染减轻服务器压力，但是不利于搜索引擎优化**\r\n2.后端渲染服务器压力较大，但是利于搜索引擎优化\r\n\r\n##### 5.浏览器拿到index.html了，就开始渲染\r\n##### 6.如果遇到了link标签，继续向对应服务器发送一个http请求，请求css文件，渲染样式\r\n##### 7.如果遇到了script标签，继续向对应服务器发送一个http请求，请求js文件，执行逻辑\r\n##### 8.如果js里有ajax请求，就会请求对应服务器\r\n（1）异步请求，再回调里才能拿到结果，或者可以使用promise\r\n（2）状态码\r\n（3）数据格式，一般来讲都是json\r\n\r\n##### 9.服务器进入相应的路由，在这个路由代码里就会去查找数据库，得到json格式的数据，再返回给前端\r\n##### 10.前端拿到json数据以后更新页面的部分内容\r\n',contentRendered:'<h2 id="前后端交互" tabindex="-1"><a class="header-anchor" href="#前后端交互" aria-hidden="true">#</a> 前后端交互</h2>\n<p>浏览器输入域名到页面显示完整的流程</p>\n<h5 id="_1-浏览器输入地址比如http-www-baidu-com-根据域名和端口号通过dns解析成ip地址" tabindex="-1"><a class="header-anchor" href="#_1-浏览器输入地址比如http-www-baidu-com-根据域名和端口号通过dns解析成ip地址" aria-hidden="true">#</a> 1.浏览器输入地址比如http://www.baidu.com，根据域名和端口号通过DNS解析成IP地址</h5>\n<h5 id="_2-根据ip地址以及端口号找到对应的服务器" tabindex="-1"><a class="header-anchor" href="#_2-根据ip地址以及端口号找到对应的服务器" aria-hidden="true">#</a> 2.根据IP地址以及端口号找到对应的服务器</h5>\n<p><a href="http://www.imooc.com/wiki/httplesson/socketprotocol.html">(http协议中的tcp协议) 协议三次握手和四次挥手</a>\nhttp的默认端口号80\nhttps默认端口号443\nftp默认端口21\nmysql默认端口号3306</p>\n<h5 id="_3-服务器接收到来自前端的请求-分配到对应路由" tabindex="-1"><a class="header-anchor" href="#_3-服务器接收到来自前端的请求-分配到对应路由" aria-hidden="true">#</a> 3.服务器接收到来自前端的请求，分配到对应路由‘/’</h5>\n<h5 id="_4-在路由里取到对应的文件。例如-index-html" tabindex="-1"><a class="header-anchor" href="#_4-在路由里取到对应的文件。例如-index-html" aria-hidden="true">#</a> 4.在路由里取到对应的文件。例如 index.html</h5>\n<p><strong>（1）直接将index.html文件返回</strong></p>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>\ta.有可能首页没什么数据，就是个静态页\n\tb.也有可能页面并不完整，但是后端不渲染，先返回给前端，后期前端通过ajax重新渲染\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>（2）先取出index.html，然后再从数据库里拿到数据，根据数据完成页面模板替换，数据填充，得到完整的页面html字符串，再返回给前端（后端渲染）</strong>\n注：1.前端渲染减轻服务器压力，但是不利于搜索引擎优化**\n2.后端渲染服务器压力较大，但是利于搜索引擎优化</p>\n<h5 id="_5-浏览器拿到index-html了-就开始渲染" tabindex="-1"><a class="header-anchor" href="#_5-浏览器拿到index-html了-就开始渲染" aria-hidden="true">#</a> 5.浏览器拿到index.html了，就开始渲染</h5>\n<h5 id="_6-如果遇到了link标签-继续向对应服务器发送一个http请求-请求css文件-渲染样式" tabindex="-1"><a class="header-anchor" href="#_6-如果遇到了link标签-继续向对应服务器发送一个http请求-请求css文件-渲染样式" aria-hidden="true">#</a> 6.如果遇到了link标签，继续向对应服务器发送一个http请求，请求css文件，渲染样式</h5>\n<h5 id="_7-如果遇到了script标签-继续向对应服务器发送一个http请求-请求js文件-执行逻辑" tabindex="-1"><a class="header-anchor" href="#_7-如果遇到了script标签-继续向对应服务器发送一个http请求-请求js文件-执行逻辑" aria-hidden="true">#</a> 7.如果遇到了script标签，继续向对应服务器发送一个http请求，请求js文件，执行逻辑</h5>\n<h5 id="_8-如果js里有ajax请求-就会请求对应服务器" tabindex="-1"><a class="header-anchor" href="#_8-如果js里有ajax请求-就会请求对应服务器" aria-hidden="true">#</a> 8.如果js里有ajax请求，就会请求对应服务器</h5>\n<p>（1）异步请求，再回调里才能拿到结果，或者可以使用promise\n（2）状态码\n（3）数据格式，一般来讲都是json</p>\n<h5 id="_9-服务器进入相应的路由-在这个路由代码里就会去查找数据库-得到json格式的数据-再返回给前端" tabindex="-1"><a class="header-anchor" href="#_9-服务器进入相应的路由-在这个路由代码里就会去查找数据库-得到json格式的数据-再返回给前端" aria-hidden="true">#</a> 9.服务器进入相应的路由，在这个路由代码里就会去查找数据库，得到json格式的数据，再返回给前端</h5>\n<h5 id="_10-前端拿到json数据以后更新页面的部分内容" tabindex="-1"><a class="header-anchor" href="#_10-前端拿到json数据以后更新页面的部分内容" aria-hidden="true">#</a> 10.前端拿到json数据以后更新页面的部分内容</h5>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/Interaction.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Interaction",filePath:"D:/个人博客/blog-demo/docs/base/Interaction.md",filePathRelative:"base/Interaction.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Interaction.html.vue",componentFilePathRelative:"pages/base/Interaction.html.vue",componentFileChunkName:"v-48959c4c",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Interaction.html.js",dataFilePathRelative:"pages/base/Interaction.html.js",dataFileChunkName:"v-48959c4c",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/Interaction.html",htmlFilePathRelative:"base/Interaction.html"},{data:{key:"v-711e77e0",path:"/base/mini%20apps.html",title:"微信小程序",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:46",title:"微信小程序",tag:["小程序"]},excerpt:"",headers:[{level:2,title:"微信小程序",slug:"微信小程序",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-711e77e0",path:"/base/mini%20apps.html",title:"微信小程序",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:46",title:"微信小程序",tag:["小程序"]},excerpt:"",headers:[{level:2,title:"微信小程序",slug:"微信小程序",children:[]}],content:"## 微信小程序\r\n",contentRendered:'<h2 id="微信小程序" tabindex="-1"><a class="header-anchor" href="#微信小程序" aria-hidden="true">#</a> 微信小程序</h2>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/mini apps.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"mini apps",filePath:"D:/个人博客/blog-demo/docs/base/mini apps.md",filePathRelative:"base/mini apps.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/mini apps.html.vue",componentFilePathRelative:"pages/base/mini apps.html.vue",componentFileChunkName:"v-711e77e0",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/mini apps.html.js",dataFilePathRelative:"pages/base/mini apps.html.js",dataFileChunkName:"v-711e77e0",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/mini apps.html",htmlFilePathRelative:"base/mini apps.html"},{data:{key:"v-e54ae01a",path:"/base/npm.html",title:"npm指令",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"npm指令",tag:["npm"]},excerpt:"",headers:[{level:2,title:"npm指令",slug:"npm指令",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-e54ae01a",path:"/base/npm.html",title:"npm指令",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"npm指令",tag:["npm"]},excerpt:"",headers:[{level:2,title:"npm指令",slug:"npm指令",children:[]}],content:"## npm指令\r\n...",contentRendered:'<h2 id="npm指令" tabindex="-1"><a class="header-anchor" href="#npm指令" aria-hidden="true">#</a> npm指令</h2>\n<p>...</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/npm.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"npm",filePath:"D:/个人博客/blog-demo/docs/base/npm.md",filePathRelative:"base/npm.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/npm.html.vue",componentFilePathRelative:"pages/base/npm.html.vue",componentFileChunkName:"v-e54ae01a",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/npm.html.js",dataFilePathRelative:"pages/base/npm.html.js",dataFileChunkName:"v-e54ae01a",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/npm.html",htmlFilePathRelative:"base/npm.html"},{data:{key:"v-7e1e277e",path:"/base/plugin.html",title:"vue项目中的接口调用",lang:"zh-CN",frontmatter:{date:"2022/1/15 12:42 ",title:"vue项目中的接口调用",tag:["Vue"]},excerpt:"",headers:[],git:{updatedTime:null,contributors:[]}},key:"v-7e1e277e",path:"/base/plugin.html",title:"vue项目中的接口调用",lang:"zh-CN",frontmatter:{date:"2022/1/15 12:42 ",title:"vue项目中的接口调用",tag:["Vue"]},excerpt:"",headers:[],content:"\r\n\r\n在企业开发过程中，往往有着明确的前后端的分工，前端负责接收、使用接口，后端负责编写、处理接口。\r\n\r\n对于前端如何使用接口，今天在Vue中进行讲解。\r\n\r\n一个项目往往由这几个部分组成。\r\n\r\n<img src=\"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/note/1.png\" alt=\"\">\r\n<img src=\"https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/note/2.png\" alt=\"\" > \r\n\r\n在src文件夹中,有这么些内容。\r\n\r\n\r\n\r\n我们常常把接口文件，新建一个文件夹在src下，命名为api，api内的文件便是接口文件。\r\n\r\n\r\n\r\n \r\n\r\n通常把后端的接口写在api文件夹下，自己命名为xxx.js\r\n\r\n```js\r\n// 登录\r\nexport function login(data) {\r\n  return request({\r\n    url: '/api/court/login',\r\n    method: 'post',\r\n    data\r\n  })\r\n}\r\n// 获取验证码\r\nexport function captchaImage(params) {\r\n  return request({\r\n    url: '/api/captchaImage',\r\n    method: 'get',\r\n    params\r\n  })\r\n}\r\n对于需要添加信息在头部的，可以这么写\r\n\r\n// 获取登录用户信息\r\nexport function getInfo(params) {\r\n  return request({\r\n    url: '/api/court/getInfo',\r\n    method: 'get',\r\n    params,\r\n    headers: {\r\n      'Authorization': JSON.parse(localStorage.Authorization)\r\n  }\r\n  })\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n 这个就是request.js 文件的内容 \r\n\r\n \r\n\r\n``` js\r\nimport axios from 'axios'\r\n// import { getToken } from '@/utils/auth'\r\n\r\n// create an axios instance\r\nconst service = axios.create({\r\n  // 外网更新\r\n  // baseURL: 'http://xxxxx',\r\n  baseURL: '/xxxxx',  \r\n  timeout: 5000 // request timeout\r\n})\r\nexport default service\r\n\r\n```\r\n项目的页面往往写在views中，每个页面设一个文件夹，其中index.vue 内容则是本页面的内容\r\n\r\n\r\n\r\n \r\n\r\n \r\n\r\n ，在页面中，如果我们需要使用某个接口。则需要进行引入操作。通过 import {接口名1、接口名2} from ' api文件地址 '\r\n\r\n```js\r\nimport { login,captchaImage,getInfo,logOut,reset } from '@/api/login'\r\nfrom后所跟的就是api中文件的地址路径\r\n```\r\n\r\n接口往往是在方法中进行调用，对于不同接口 ，需要的参数也不一样，根据需求，我们传入对应的参数即可。图中的 captchaImage、以及login就是接口信息。\r\n\r\n接口的使用格式：\r\n\r\n \r\n\r\n``` js\r\n接口名({参数1:页面中的参1，参数2：页面中的参数2}).then(res => {\r\n            console.log(res)//res就是调用接口后，后台返回过来的结果，一般数据储存在res.data.data中，具体情况而论\r\n           \r\n            })\r\n\r\n```\r\n\r\n \r\n\r\n \r\n\r\n \r\n\r\n 这样就是接口调用的全部过程了。附上控制台信息图以及apipost接口图。\r\n\r\n\r\n\r\n \r\n\r\n \r\n\r\n \r\n\r\n ",contentRendered:'<p>在企业开发过程中，往往有着明确的前后端的分工，前端负责接收、使用接口，后端负责编写、处理接口。</p>\n<p>对于前端如何使用接口，今天在Vue中进行讲解。</p>\n<p>一个项目往往由这几个部分组成。</p>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/note/1.png" alt="">\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/note/2.png" alt="" > \n<p>在src文件夹中,有这么些内容。</p>\n<p>我们常常把接口文件，新建一个文件夹在src下，命名为api，api内的文件便是接口文件。</p>\n<p>通常把后端的接口写在api文件夹下，自己命名为xxx.js</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token comment">// 登录</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">\'/api/court/login\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span>\n    data\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 获取验证码</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">captchaImage</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">\'/api/captchaImage\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span>\n    params\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n对于需要添加信息在头部的，可以这么写\n\n<span class="token comment">// 获取登录用户信息</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">\'/api/court/getInfo\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span>\n    params<span class="token punctuation">,</span>\n    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'Authorization\'</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>Authorization<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这个就是request.js 文件的内容</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">\'axios\'</span>\n<span class="token comment">// import { getToken } from \'@/utils/auth\'</span>\n\n<span class="token comment">// create an axios instance</span>\n<span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 外网更新</span>\n  <span class="token comment">// baseURL: \'http://xxxxx\',</span>\n  <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">\'/xxxxx\'</span><span class="token punctuation">,</span>  \n  <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">5000</span> <span class="token comment">// request timeout</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> service\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>项目的页面往往写在views中，每个页面设一个文件夹，其中index.vue 内容则是本页面的内容</p>\n<p>，在页面中，如果我们需要使用某个接口。则需要进行引入操作。通过 import {接口名1、接口名2} from \' api文件地址 \'</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> login<span class="token punctuation">,</span>captchaImage<span class="token punctuation">,</span>getInfo<span class="token punctuation">,</span>logOut<span class="token punctuation">,</span>reset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@/api/login\'</span>\nfrom后所跟的就是api中文件的地址路径\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接口往往是在方法中进行调用，对于不同接口 ，需要的参数也不一样，根据需求，我们传入对应的参数即可。图中的 captchaImage、以及login就是接口信息。</p>\n<p>接口的使用格式：</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token function">接口名</span><span class="token punctuation">(</span><span class="token punctuation">{</span>参数<span class="token number">1</span><span class="token operator">:</span>页面中的参<span class="token number">1</span>，参数<span class="token number">2</span>：页面中的参数<span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment">//res就是调用接口后，后台返回过来的结果，一般数据储存在res.data.data中，具体情况而论</span>\n           \n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样就是接口调用的全部过程了。附上控制台信息图以及apipost接口图。</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/plugin.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"plugin",filePath:"D:/个人博客/blog-demo/docs/base/plugin.md",filePathRelative:"base/plugin.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/plugin.html.vue",componentFilePathRelative:"pages/base/plugin.html.vue",componentFileChunkName:"v-7e1e277e",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/plugin.html.js",dataFilePathRelative:"pages/base/plugin.html.js",dataFileChunkName:"v-7e1e277e",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/plugin.html",htmlFilePathRelative:"base/plugin.html"},{data:{key:"v-12d0fdc2",path:"/base/Vuex.html",title:"Vuex深入理解 modules",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"Vuex深入理解 modules",tag:["Vuex"]},excerpt:"",headers:[{level:3,title:"一、什么是module？",slug:"一、什么是module",children:[]},{level:3,title:"二、怎么用module？",slug:"二、怎么用module",children:[]},{level:3,title:"三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save",slug:"三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save",children:[]},{level:3,title:"5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.",slug:"_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state",children:[]},{level:3,title:"6, 局部参数",slug:"_6-局部参数",children:[]},{level:3,title:"7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：",slug:"_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-12d0fdc2",path:"/base/Vuex.html",title:"Vuex深入理解 modules",lang:"zh-CN",frontmatter:{date:"2022/3/4 23:11",title:"Vuex深入理解 modules",tag:["Vuex"]},excerpt:"",headers:[{level:3,title:"一、什么是module？",slug:"一、什么是module",children:[]},{level:3,title:"二、怎么用module？",slug:"二、怎么用module",children:[]},{level:3,title:"三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save",slug:"三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save",children:[]},{level:3,title:"5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.",slug:"_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state",children:[]},{level:3,title:"6, 局部参数",slug:"_6-局部参数",children:[]},{level:3,title:"7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：",slug:"_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性",children:[]}],content:'\r\n### 一、什么是module？\r\n::: tip\r\n背景：在Vue中State使用是单一状态树结构，应该的所有的状态都放在state里面，如果项目比较复杂，那state是一个很大的对象，store对象也将对变得非常大，难于管理。\r\nmodule：可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。\r\n:::\r\n\r\n### 二、怎么用module？\r\n一般结构\r\n``` js\r\nconst moduleA = {\r\n state: { ... },\r\n mutations: { ... },\r\n actions: { ... },\r\n getters: { ... }\r\n }\r\nconst moduleB = {\r\n state: { ... },\r\n mutations: { ... },\r\n actions: { ... }\r\n }\r\n \r\nconst store = new Vuex.Store({\r\n modules: {\r\n  a: moduleA,\r\n  b: moduleB})\r\n```\r\n  ::: tip\r\n模块内部的数据：①内部state，模块内部的state是局部的，也就是模块私有的，比如是car.js模块state中的list数据，我们要通过this.store.state.car.carGetter的结结果是undefined，而通过this.$store.state.carGetter则可以拿到。\r\n\r\n传参：\r\ngetters====({state(局部状态),getters（全局getters对象),roosState（根状态）})；actions====({state(局部状态),commit,roosState(根状态)}).\r\n\r\n  :::\r\n  ### 三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save\r\n::: tip\r\n  ps: 想了解更多vuex相关知识请点击<a href="https://vuex.vuejs.org/zh/guide/">vuex官网</a>\r\n:::\r\n\r\n**1, 在src 目录下新一个login文件夹，在里面新建index.js 用于存放login 模块的状态。 为了简单起见，我把模块下的state, actions,mutations, getters 全放在index.js文件中。**\r\n\r\n先简单给它增加一个状态，userName: “sam”\r\n``` js\r\nconst state = {\r\n  useName: "sam"\r\n};\r\nconst mutations = {\r\n \r\n};\r\nconst actions = {\r\n \r\n};\r\nconst getters = {\r\n \r\n};\r\n \r\n// 不要忘记把state, mutations等暴露出去。\r\nexport default {\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}\r\n```\r\n**2，在src 目录下，再新建一个 store.js 这是根store, 它通过modules 属性引入 login模块。**\r\n``` js\r\nimport Vue from "vue";\r\nimport Vuex from "vuex";\r\n \r\nVue.use(Vuex);\r\n \r\n// 引入login 模块\r\nimport login from "./login"\r\n \r\nexport default new Vuex.Store({\r\n  // 通过modules属性引入login 模块。\r\n  modules: {\r\n    login: login\r\n  }\r\n})\r\n```\r\n**3, 在main.js中引入store, 并注入到vue 根实例中。**\r\n``` js\r\nimport Vue from \'vue\'\r\nimport App from \'./App.vue\'\r\n \r\n// 引入store\r\nimport store from "./store"\r\n \r\nnew Vue({\r\n el: \'#app\',\r\n store, // 注入到根实例中。\r\n render: h => h(App)\r\n})\r\n```\r\n**4，在 app.vue 中通过computed属性获取到login下的state. 这里要注意，在没有modules 的情况下，组件中通过 this.**\r\n\r\n**store.state.模块名.属性名，在这里是 this.$store.state.login.userName**\r\n``` vue\r\n<template>\r\n <div id="app">\r\n  <img src="./assets/logo.png">\r\n  <h1>{{useName}}</h1>\r\n </div>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n // computed属性，从store 中获取状态state，不要忘记login命名空间。\r\n computed: {\r\n  useName: function() {\r\n   return this.$store.state.login.useName\r\n  }\r\n }\r\n}\r\n<\/script>\r\n```\r\n\r\n组件中成功获取到状态。项目目录和展示如下\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/%E7%AC%94%E8%AE%B0/vuex/1.webp" alt="">\r\n\r\n### 5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.\r\n先在login 文件夹 index.js中添加changeName action 和 change_name mutations.\r\n\r\n``` js\r\nconst mutations = {\r\n  change_name (state, anotherName) {\r\n    state.useName = anotherName;\r\n  }\r\n};\r\n \r\nconst actions = {\r\n  changeName ({commit},anotherName) {\r\n    commit("change_name", anotherName)\r\n  }\r\n};\r\n```\r\n在app.vue 中添加一个按钮：<button> change to json</button>， 点击时，dispatch 一个 action. 那在组件中怎么dispatch actions 呢？\r\n::: tip\r\n在模块中，state 是被限制到模块的命名空间下，需要命名空间才能访问。 但actions 和mutations, 其实还有 getters 却没有被限制，在默认情况下，它们是注册到全局命名空间下的，所谓的注册到全局命名空间下，其实就是我们访问它们的方式和原来没有module 的时候是一样的。比如没有module 的时候，this.store.dispatch(“changeName”)， 组件中的getters, 也是通过 this.$store.getters.module中getters 来获取。\r\n:::\r\n``` vue\r\n<template>\r\n <div id="app">\r\n  <img src="./assets/logo.png">\r\n  <h1>{{useName}}</h1>\r\n  \x3c!-- 添加按钮 --\x3e\r\n  <div>\r\n   <button @click="changeName"> change to json</button>\r\n  </div>\r\n </div>\r\n</template>\r\n \r\n<script>\r\nexport default {\r\n // computed属性，从store 中获取状态state，不要忘记login命名空间。\r\n computed: {\r\n  useName: function() {\r\n   return this.$store.state.login.useName\r\n  }\r\n },\r\n methods: {\r\n \r\n　　// 和没有modules的时候一样，同样的方式dispatch action\r\n  changeName() {\r\n   this.$store.dispatch("changeName", "Jason")\r\n  }\r\n }\r\n}\r\n<\/script>\r\n```\r\n### 6, 局部参数\r\n::: tip\r\n虽然dispatch action和 commit mutations 可以全局使用，但是写在module 中的actions, mutations 和getters, 它们获得的默认参数却不是全局的，都是局部的，被限定在它们所在的模块中的。比如mutations和getters 会获得state 作为第一个默认参数，这个state参数，就是限定在mutations 和getters 所在模块的state对象，login 文件夹下的mutations 和getters 只会获取到当前index.js 中的 state 作为参数 。 actions 会获得一个context 对象作为参数，这个context 对象就是当前module 的实例，module 相当于一个小store.\r\n那么怎样才能获取到根store 中的state 和 getters 呢？ Vuex 提供了 rootState, rootGetters 作为module 中 getters 中默认参数, actions中context 对象，也会多了两个属性,**context.getters**, **context.rootState**, 这些全局的默认参数，都排在局部参数的后面。\r\n:::\r\n\r\n我们在store.js中添加 state, getters:\r\n``` js\r\nexport default new Vuex.Store({\r\n  // 通过modules属性引入login 模块。\r\n  modules: {\r\n    login: login\r\n  },\r\n \r\n  // 新增state, getters\r\n  state: {\r\n    job: "web"\r\n  },\r\n  getters: {\r\n    jobTitle (state){\r\n      return state.job + "developer"\r\n    }\r\n  }\r\n})\r\n```\r\nlogin 目录下的 index.js\r\n``` js\r\nconst actions = {\r\n  // actions 中的context参数对象多了 rootState 参数\r\n  changeName ({commit, rootState},anotherName) {\r\n    if(rootState.job =="web") {\r\n      commit("change_name", anotherName)\r\n    }\r\n  }\r\n};\r\n \r\nconst getters = {\r\n  // getters 获取到 rootState, rootGetters 作为参数。\r\n  // rootState和 rootGetter参数顺序不要写反，一定是state在前，getter在后面，这是vuex的默认参数传递顺序， 可以打印出来看一下。\r\n  localJobTitle (state,getters,rootState,rootGetters) { \r\n    console.log(rootState);\r\n    console.log(rootGetters);\r\n    return rootGetters.jobTitle + " aka " + rootState.job \r\n  }\r\n};\r\n```\r\napp.vue 增加h2 展示 loacaJobTitle, 这个同时证明了getters 也是被注册到全局中的。\r\n``` vue\r\n<template>\r\n <div id="app">\r\n  <img src="./assets/logo.png">\r\n  <h1>{{useName}}</h1>\r\n \r\n  \x3c!-- 增加h2 展示 localJobTitle --\x3e\r\n  <h2>{{localJobTitle}}</h2>\r\n  \x3c!-- 添加按钮 --\x3e\r\n  <div>\r\n   <button @click="changeName"> change to json</button>\r\n  </div>\r\n </div>\r\n</template>\r\n \r\n<script>\r\nimport {mapActions, mapState,mapGetters} from "vuex";\r\nexport default {\r\n // computed属性，从store 中获取状态state，不要忘记login命名空间。\r\n computed: {\r\n  ...mapState({\r\n   useName: state => state.login.useName\r\n  }),\r\n \r\n  // mapGeter 直接获得全局注册的getters\r\n  ...mapGetters(["localJobTitle"])\r\n },\r\n methods: {\r\n  changeName() {\r\n   this.$store.dispatch("changeName", "Jason")\r\n  }\r\n }\r\n}\r\n<\/script>\r\n```\r\n### 7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：\r\n``` js\r\nconst state = {\r\n  useName: "sam"\r\n};\r\nconst mutations = {\r\n  change_name (state, anotherName) {\r\n    state.useName = anotherName;\r\n  }\r\n};\r\nconst actions = {\r\n  changeName ({commit, rootState},anotherName) {\r\n    if(rootState.job =="web") {\r\n      commit("change_name", anotherName)\r\n    }\r\n  },\r\n  alertName({state}) {\r\n    alert(state.useName)\r\n  }\r\n};\r\nconst getters = {\r\n  localJobTitle (state,getters,rootState,rootGetters) { \r\n    return rootGetters.jobTitle + " aka " + rootState.job \r\n  }\r\n};\r\n// namespaced 属性，限定命名空间\r\nexport default {\r\n  namespaced:true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n}\r\n```\r\n::: tip\r\n当所有的actions, mutations, getters 都被限定到模块的命名空间下，我们dispatch actions, commit mutations 都需要用到命名空间。如 dispacth("changeName"), 就要变成 dispatch("login/changeName"); getters.localJobTitle 就要变成 getters["login/localJobTitle"]\r\n:::\r\n\r\napp.vue 如下：\r\n``` vue\r\n<template>\r\n <div id="app">\r\n  <img src="./assets/logo.png">\r\n  <h1 @click ="alertName">{{useName}}</h1>\r\n \r\n  \x3c!-- 增加h2 展示 localJobTitle --\x3e\r\n  <h2>{{localJobTitle}}</h2>\r\n  \x3c!-- 添加按钮 --\x3e\r\n  <div>\r\n   <button @click="changeName"> change to json</button>\r\n  </div>\r\n </div>\r\n</template>\r\n \r\n<script>\r\nimport {mapActions, mapState,mapGetters} from "vuex";\r\nexport default {\r\n // computed属性，从store 中获取状态state，不要忘记login命名空间。\r\n computed: {\r\n  ...mapState("login",{\r\n   useName: state => state.useName\r\n  }),\r\n \r\n   localJobTitle() {\r\n    return this.$store.getters["login/localJobTitle"]\r\n   }\r\n },\r\n methods: {\r\n  changeName() {\r\n   this.$store.dispatch("login/changeName", "Jason")\r\n  },\r\n  alertName() {\r\n   this.$store.dispatch("login/alertName")\r\n  }\r\n }\r\n}\r\n<\/script>\r\n```\r\n::: tip \r\n有了命名空间之后，mapState, mapGetters, mapActions 函数也都有了一个参数，用于限定命名空间，每二个参数对象或数组中的属性，都映射到了当前命名空间中。\r\n:::\r\n``` \r\n<script>\r\nimport {mapActions, mapState,mapGetters} from "vuex";\r\nexport default {\r\n computed: {\r\n  // 对象中的state 和数组中的localJobTitle 都是和login中的参数一一对应。\r\n  ...mapState("login",{\r\n   useName: state => state.useName\r\n  }),\r\n  ...mapGetters("login", ["localJobTitle"])\r\n },\r\n methods: {\r\n  changeName() {\r\n   this.$store.dispatch("login/changeName", "Jason")\r\n  },\r\n  ...mapActions(\'login\', [\'alertName\'])\r\n }\r\n}\r\n<\/script>\r\n```\r\n\r\n链接：https://www.jianshu.com/p/a0c11ae01991\r\n来源：简书',contentRendered:'<h3 id="一、什么是module" tabindex="-1"><a class="header-anchor" href="#一、什么是module" aria-hidden="true">#</a> 一、什么是module？</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>背景：在Vue中State使用是单一状态树结构，应该的所有的状态都放在state里面，如果项目比较复杂，那state是一个很大的对象，store对象也将对变得非常大，难于管理。\nmodule：可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</p>\n</div>\n<h3 id="二、怎么用module" tabindex="-1"><a class="header-anchor" href="#二、怎么用module" aria-hidden="true">#</a> 二、怎么用module？</h3>\n<p>一般结构</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>\n <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>\n <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n \n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">a</span><span class="token operator">:</span> moduleA<span class="token punctuation">,</span>\n  <span class="token literal-property property">b</span><span class="token operator">:</span> moduleB<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>模块内部的数据：①内部state，模块内部的state是局部的，也就是模块私有的，比如是car.js模块state中的list数据，我们要通过this.store.state.car.carGetter的结结果是undefined，而通过this.$store.state.carGetter则可以拿到。</p>\n<p>传参：\ngetters====({state(局部状态),getters（全局getters对象),roosState（根状态）})；actions====({state(局部状态),commit,roosState(根状态)}).</p>\n</div>\n<h3 id="三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save" tabindex="-1"><a class="header-anchor" href="#三、新建一个项目体验一下-通过vue-–cli新建一个项目-不要忘记安装vuex-cnpm-install-vuex-save" aria-hidden="true">#</a> 三、新建一个项目体验一下，通过vue –cli新建一个项目, 不要忘记安装vuex，cnpm install vuex --save</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>ps: 想了解更多vuex相关知识请点击<a href="https://vuex.vuejs.org/zh/guide/">vuex官网</a></p>\n</div>\n<p><strong>1, 在src 目录下新一个login文件夹，在里面新建index.js 用于存放login 模块的状态。 为了简单起见，我把模块下的state, actions,mutations, getters 全放在index.js文件中。</strong></p>\n<p>先简单给它增加一个状态，userName: “sam”</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">useName</span><span class="token operator">:</span> <span class="token string">"sam"</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>\n \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>\n \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 不要忘记把state, mutations等暴露出去。</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  state<span class="token punctuation">,</span>\n  mutations<span class="token punctuation">,</span>\n  actions<span class="token punctuation">,</span>\n  getters\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p><strong>2，在src 目录下，再新建一个 store.js 这是根store, 它通过modules 属性引入 login模块。</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>\n \nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">// 引入login 模块</span>\n<span class="token keyword">import</span> login <span class="token keyword">from</span> <span class="token string">"./login"</span>\n \n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 通过modules属性引入login 模块。</span>\n  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">login</span><span class="token operator">:</span> login\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>3, 在main.js中引入store, 并注入到vue 根实例中。</strong></p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">\'vue\'</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App.vue\'</span>\n \n<span class="token comment">// 引入store</span>\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span>\n \n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">\'#app\'</span><span class="token punctuation">,</span>\n store<span class="token punctuation">,</span> <span class="token comment">// 注入到根实例中。</span>\n <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>4，在 app.vue 中通过computed属性获取到login下的state. 这里要注意，在没有modules 的情况下，组件中通过 this.</strong></p>\n<p><strong>store.state.模块名.属性名，在这里是 this.$store.state.login.userName</strong></p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{useName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n <span class="token comment">// computed属性，从store 中获取状态state，不要忘记login命名空间。</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">useName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>useName\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>组件中成功获取到状态。项目目录和展示如下\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/笔记/vuex/1.webp" alt=""></p>\n<h3 id="_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state" tabindex="-1"><a class="header-anchor" href="#_5-通过actions-mutations-改变名字-这就涉及到dispatch-action-commit-mutations-mutations-改变state" aria-hidden="true">#</a> 5，通过actions, mutations 改变名字， 这就涉及到dispatch action, commit mutations, mutations 改变state.</h3>\n<p>先在login 文件夹 index.js中添加changeName action 和 change_name mutations.</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">change_name</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>useName <span class="token operator">=</span> anotherName<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">changeName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">,</span>anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"change_name"</span><span class="token punctuation">,</span> anotherName<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在app.vue 中添加一个按钮：<button> change to json</button>， 点击时，dispatch 一个 action. 那在组件中怎么dispatch actions 呢？</p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>在模块中，state 是被限制到模块的命名空间下，需要命名空间才能访问。 但actions 和mutations, 其实还有 getters 却没有被限制，在默认情况下，它们是注册到全局命名空间下的，所谓的注册到全局命名空间下，其实就是我们访问它们的方式和原来没有module 的时候是一样的。比如没有module 的时候，this.store.dispatch(“changeName”)， 组件中的getters, 也是通过 this.$store.getters.module中getters 来获取。</p>\n</div>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{useName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- 添加按钮 --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> change to json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n <span class="token comment">// computed属性，从store 中获取状态state，不要忘记login命名空间。</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">useName</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>useName\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n \n　　<span class="token comment">// 和没有modules的时候一样，同样的方式dispatch action</span>\n  <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"changeName"</span><span class="token punctuation">,</span> <span class="token string">"Jason"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="_6-局部参数" tabindex="-1"><a class="header-anchor" href="#_6-局部参数" aria-hidden="true">#</a> 6, 局部参数</h3>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>虽然dispatch action和 commit mutations 可以全局使用，但是写在module 中的actions, mutations 和getters, 它们获得的默认参数却不是全局的，都是局部的，被限定在它们所在的模块中的。比如mutations和getters 会获得state 作为第一个默认参数，这个state参数，就是限定在mutations 和getters 所在模块的state对象，login 文件夹下的mutations 和getters 只会获取到当前index.js 中的 state 作为参数 。 actions 会获得一个context 对象作为参数，这个context 对象就是当前module 的实例，module 相当于一个小store.\n那么怎样才能获取到根store 中的state 和 getters 呢？ Vuex 提供了 rootState, rootGetters 作为module 中 getters 中默认参数, actions中context 对象，也会多了两个属性,<strong>context.getters</strong>, <strong>context.rootState</strong>, 这些全局的默认参数，都排在局部参数的后面。</p>\n</div>\n<p>我们在store.js中添加 state, getters:</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 通过modules属性引入login 模块。</span>\n  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">login</span><span class="token operator">:</span> login\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n \n  <span class="token comment">// 新增state, getters</span>\n  <span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">job</span><span class="token operator">:</span> <span class="token string">"web"</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">jobTitle</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">return</span> state<span class="token punctuation">.</span>job <span class="token operator">+</span> <span class="token string">"developer"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>login 目录下的 index.js</p>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// actions 中的context参数对象多了 rootState 参数</span>\n  <span class="token function">changeName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">,</span> rootState<span class="token punctuation">}</span><span class="token punctuation">,</span>anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>rootState<span class="token punctuation">.</span>job <span class="token operator">==</span><span class="token string">"web"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"change_name"</span><span class="token punctuation">,</span> anotherName<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n \n<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// getters 获取到 rootState, rootGetters 作为参数。</span>\n  <span class="token comment">// rootState和 rootGetter参数顺序不要写反，一定是state在前，getter在后面，这是vuex的默认参数传递顺序， 可以打印出来看一下。</span>\n  <span class="token function">localJobTitle</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState<span class="token punctuation">,</span>rootGetters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rootState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rootGetters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> rootGetters<span class="token punctuation">.</span>jobTitle <span class="token operator">+</span> <span class="token string">" aka "</span> <span class="token operator">+</span> rootState<span class="token punctuation">.</span>job \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>app.vue 增加h2 展示 loacaJobTitle, 这个同时证明了getters 也是被注册到全局中的。</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{useName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n \n  <span class="token comment">&lt;!-- 增加h2 展示 localJobTitle --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{localJobTitle}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- 添加按钮 --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> change to json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">,</span> mapState<span class="token punctuation">,</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n <span class="token comment">// computed属性，从store 中获取状态state，不要忘记login命名空间。</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n   <span class="token function-variable function">useName</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>login<span class="token punctuation">.</span>useName\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n \n  <span class="token comment">// mapGeter 直接获得全局注册的getters</span>\n  <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"localJobTitle"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"changeName"</span><span class="token punctuation">,</span> <span class="token string">"Jason"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性" tabindex="-1"><a class="header-anchor" href="#_7-其实actions-mutations-getters-也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced-属性" aria-hidden="true">#</a> 7, 其实actions, mutations, getters, 也可以限定在当前模块的命名空间中。只要给我们的模块加一个namespaced 属性：</h3>\n<div class="language-javascript ext-js line-numbers-mode"><pre v-pre class="language-javascript"><code><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">useName</span><span class="token operator">:</span> <span class="token string">"sam"</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">change_name</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    state<span class="token punctuation">.</span>useName <span class="token operator">=</span> anotherName<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">changeName</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">,</span> rootState<span class="token punctuation">}</span><span class="token punctuation">,</span>anotherName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>rootState<span class="token punctuation">.</span>job <span class="token operator">==</span><span class="token string">"web"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"change_name"</span><span class="token punctuation">,</span> anotherName<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>state<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>useName<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">localJobTitle</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getters<span class="token punctuation">,</span>rootState<span class="token punctuation">,</span>rootGetters</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token keyword">return</span> rootGetters<span class="token punctuation">.</span>jobTitle <span class="token operator">+</span> <span class="token string">" aka "</span> <span class="token operator">+</span> rootState<span class="token punctuation">.</span>job \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// namespaced 属性，限定命名空间</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>\n  state<span class="token punctuation">,</span>\n  mutations<span class="token punctuation">,</span>\n  actions<span class="token punctuation">,</span>\n  getters\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>当所有的actions, mutations, getters 都被限定到模块的命名空间下，我们dispatch actions, commit mutations 都需要用到命名空间。如 dispacth(&quot;changeName&quot;), 就要变成 dispatch(&quot;login/changeName&quot;); getters.localJobTitle 就要变成 getters[&quot;login/localJobTitle&quot;]</p>\n</div>\n<p>app.vue 如下：</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">@click</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alertName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{useName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n \n  <span class="token comment">&lt;!-- 增加h2 展示 localJobTitle --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>{{localJobTitle}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- 添加按钮 --\x3e</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> change to json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">,</span> mapState<span class="token punctuation">,</span>mapGetters<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n <span class="token comment">// computed属性，从store 中获取状态state，不要忘记login命名空间。</span>\n <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n   <span class="token function-variable function">useName</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>useName\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n \n   <span class="token function">localJobTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">"login/localJobTitle"</span><span class="token punctuation">]</span>\n   <span class="token punctuation">}</span>\n <span class="token punctuation">}</span><span class="token punctuation">,</span>\n <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"login/changeName"</span><span class="token punctuation">,</span> <span class="token string">"Jason"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"login/alertName"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>有了命名空间之后，mapState, mapGetters, mapActions 函数也都有了一个参数，用于限定命名空间，每二个参数对象或数组中的属性，都映射到了当前命名空间中。</p>\n</div>\n<div class="language-text ext-text line-numbers-mode"><pre v-pre class="language-text"><code>&lt;script>\nimport {mapActions, mapState,mapGetters} from "vuex";\nexport default {\n computed: {\n  // 对象中的state 和数组中的localJobTitle 都是和login中的参数一一对应。\n  ...mapState("login",{\n   useName: state => state.useName\n  }),\n  ...mapGetters("login", ["localJobTitle"])\n },\n methods: {\n  changeName() {\n   this.$store.dispatch("login/changeName", "Jason")\n  },\n  ...mapActions(\'login\', [\'alertName\'])\n }\n}\n&lt;/script>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>链接：https://www.jianshu.com/p/a0c11ae01991\n来源：简书</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/Vuex.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"Vuex",filePath:"D:/个人博客/blog-demo/docs/base/Vuex.md",filePathRelative:"base/Vuex.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Vuex.html.vue",componentFilePathRelative:"pages/base/Vuex.html.vue",componentFileChunkName:"v-12d0fdc2",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/Vuex.html.js",dataFilePathRelative:"pages/base/Vuex.html.js",dataFileChunkName:"v-12d0fdc2",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/Vuex.html",htmlFilePathRelative:"base/Vuex.html"},{data:{key:"v-75aebe31",path:"/base/webpack.html",title:"Webpack",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:50",title:"Webpack",tag:["Webpack"]},excerpt:"",headers:[{level:3,title:"Webpack打包",slug:"webpack打包",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-75aebe31",path:"/base/webpack.html",title:"Webpack",lang:"zh-CN",frontmatter:{date:"2022/2/24 8:50",title:"Webpack",tag:["Webpack"]},excerpt:"",headers:[{level:3,title:"Webpack打包",slug:"webpack打包",children:[]}],content:"### Webpack打包\r\n...",contentRendered:'<h3 id="webpack打包" tabindex="-1"><a class="header-anchor" href="#webpack打包" aria-hidden="true">#</a> Webpack打包</h3>\n<p>...</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/base/webpack.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"webpack",filePath:"D:/个人博客/blog-demo/docs/base/webpack.md",filePathRelative:"base/webpack.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/webpack.html.vue",componentFilePathRelative:"pages/base/webpack.html.vue",componentFileChunkName:"v-75aebe31",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/base/webpack.html.js",dataFilePathRelative:"pages/base/webpack.html.js",dataFileChunkName:"v-75aebe31",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/base/webpack.html",htmlFilePathRelative:"base/webpack.html"},{data:{key:"v-4a48c612",path:"/issue/axios.html",title:"Axios",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Axios",tag:["axios"]},excerpt:"",headers:[{level:3,title:"axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined",slug:"axios报错-typeerror-cannot-read-property-canceltoken-of-undefined",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-4a48c612",path:"/issue/axios.html",title:"Axios",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Axios",tag:["axios"]},excerpt:"",headers:[{level:3,title:"axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined",slug:"axios报错-typeerror-cannot-read-property-canceltoken-of-undefined",children:[]}],content:'::: tip \r\n\r\n记录的是本所遇到的bug\r\n\r\n:::\r\n\r\n### axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined\r\n报错 axios报错：TypeError: Cannot read property ‘cancelToken’ of undefined\r\n解决：1.应该是没有返回数据\r\n2.是请求的函数写错\r\n例如：\r\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/axios/1.png" alt="">\r\n\r\n正确的是: \r\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/axios/2.png" alt="">',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>记录的是本所遇到的bug</p>\n</div>\n<h3 id="axios报错-typeerror-cannot-read-property-canceltoken-of-undefined" tabindex="-1"><a class="header-anchor" href="#axios报错-typeerror-cannot-read-property-canceltoken-of-undefined" aria-hidden="true">#</a> axios报错: TypeError: Cannot read property ‘cancelToken’ of undefined</h3>\n<p>报错 axios报错：TypeError: Cannot read property ‘cancelToken’ of undefined\n解决：1.应该是没有返回数据\n2.是请求的函数写错\n例如：\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/axios/1.png" alt=""></p>\n<p>正确的是:\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/axios/2.png" alt=""></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/axios.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"axios",filePath:"D:/个人博客/blog-demo/docs/issue/axios.md",filePathRelative:"issue/axios.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/axios.html.vue",componentFilePathRelative:"pages/issue/axios.html.vue",componentFileChunkName:"v-4a48c612",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/axios.html.js",dataFilePathRelative:"pages/issue/axios.html.js",dataFileChunkName:"v-4a48c612",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/axios.html",htmlFilePathRelative:"issue/axios.html"},{data:{key:"v-62e92bf6",path:"/issue/git.html",title:"Git",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Git",description:"记录的是本所遇到的bug",tag:["git"]},excerpt:"",headers:[{level:2,title:"Git报错:“ERROR: Permission to XXX.git denied to user”",slug:"git报错-error-permission-to-xxx-git-denied-to-user",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-62e92bf6",path:"/issue/git.html",title:"Git",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Git",description:"记录的是本所遇到的bug",tag:["git"]},excerpt:"",headers:[{level:2,title:"Git报错:“ERROR: Permission to XXX.git denied to user”",slug:"git报错-error-permission-to-xxx-git-denied-to-user",children:[]}],content:'::: tip \r\n\r\n记录的是本所遇到的bug\r\n\r\n:::\r\n\r\n## Git报错:“ERROR: Permission to XXX.git denied to user”\r\n#### 解决方案\r\n - 1、生成一个新的SSH KEY\r\n``` ruby\r\nAppledeiMac:~ Apple$ cd ~/.ssh\r\nAppledeiMac:.ssh Apple$ ls\r\nid_rsa        id_rsa.pub  known_hosts\r\nAppledeiMac:.ssh Apple$ ssh-keygen -t rsa -C "iMac_personnal_publicKey"\r\nGenerating public/private rsa key pair.\r\nEnter file in which to save the key (/Users/Apple/.ssh/id_rsa):               \r\n/Users/Apple/.ssh/id_rsa_personal\r\nEnter passphrase (empty for no passphrase): \r\nEnter same passphrase again: \r\nYour identification has been saved in /Users/Apple/.ssh/id_rsa_personal.\r\nYour public key has been saved in /Users/Apple/.ssh/id_rsa_personal.pub.\r\nThe key fingerprint is:\r\nSHA256:1gepuxDHwJRnFbKvc0Zq/NGrFGE9kEXS06jxatPPrSQ iMac_personnal_publicKey\r\nThe key\'s randomart image is:\r\n+---[RSA 2048]----+\r\n|      ....=*oo   |\r\n|     o. ooo=+ .  |\r\n|      oo. =+o.   |\r\n|       o =.o..   |\r\n|      . S =o.    |\r\n|       = =++.    |\r\n|      . B.=.Eo.. |\r\n|       o B . +o .|\r\n|          . o.. .. |\r\n+----[SHA256]-----+\r\nAppledeiMac:.ssh Apple$ ls\r\nid_rsa            id_rsa_personal     known_hosts\r\nid_rsa.pub        id_rsa_personal.pub`\r\n```\r\n - 2、打开新生成的~/.ssh/id_rsa2.pub文件，将里面的内容添加到GitHub后台。\r\n - 3、打开~/.ssh/config文件\r\n 没有config文件则创建，终端输入touch config ，创建完以后用Vim打开或者是在Finder打开一样。\r\n在不影响默认的github设置下我们重新添加一个Host：\r\n建一个自己能辨识的github别名，我取的是github-personal，新建的帐号使用这个别名做克隆和更新\r\n\r\n``` ruby\r\nHost github-personal\r\n```\r\nHostName github.com\r\nUser git\r\nIdentityFile ~/.ssh/id_rsa_personal\r\n\r\n编辑完毕之后按下ESC，:wq，:wq是保存并退出vim编辑器\r\n具体在终端代码如下：\r\ncat config 是把config文件里面的内容在终端输出\r\nAppledeiMac:.ssh Apple$ vim config\r\nAppledeiMac:.ssh Apple$ cat config\r\n``` ruby\r\n  #Default GitHub\r\n  Host github.com\r\n  HostName github.com\r\n  User git\r\n  IdentityFile ~/.ssh/id_rsa\r\n\r\n  Host github-personal\r\n  HostName github.com\r\n  User git\r\n  IdentityFile ~/.ssh/id_rsa_personal\r\n```\r\n- 4、将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名。\r\n如原地址是 git@github.com:hbxn740150254/BestoneGitHub.git 替换后应该是：github-personal:hbxn740150254/BestoneGitHub.git 或者git@github-personal:hbxn740150254/BestoneGitHub.git亲测都是可以的，\r\n如果是新建的仓库，直接使用替换后的URL克隆即可。如果已经使用原地址克隆过了，可以使用命令修改：\r\n``` ruby\r\nAppledeiMac:.ssh Apple$ cd /Users/Apple/Desktop/BestoneDemo \r\n//修改之前\r\nApple$ git remote -v\r\ngithub  git@github.com:hbxn740150254/BestoneGitHub.git (fetch)\r\ngithub  git@github.com:hbxn740150254/BestoneGitHub.git (push)\r\n//修改 remote set-url\r\nAppledeiMac:BestoneDemo Apple$ git remote set-url github  github- personal:hbxn740150254/BestoneGitHub.git\r\n//验证是否修改成功    \r\n//使用修改后的github-personal SSH连接，连接成功用户是hbxn740150254，此时公钥是id_rsa_personal\r\nAppledeiMac:BestoneDemo Apple$ ssh -T github-personal\r\nHi hbxn740150254! You\'ve successfully authenticated, but GitHub does not provide shell access.\r\n//使用默认的git@github.com SSH去连接,连接成功用户是FaxeXian，此时公钥是id_rsa\r\nAppledeiMac:.ssh Apple$ ssh -T git@github.com\r\nHi FaxeXian! You\'ve successfully authenticated, but GitHub does not provide shell access.\r\n//修改之后\r\nAppledeiMac:BestoneDemo Apple$ git remote -v\r\ngithub  github-personal:hbxn740150254/BestoneGitHub.git (fetch)\r\ngithub  github-personal:hbxn740150254/BestoneGitHub.git (push)\r\n```\r\n最后我们进行正常的push，fetch 操作，都可以\r\n``` ruby\r\n//更改后的github push成功！\r\nAppledeiMac:BestoneDemo Apple$ git push github testMerge:master\r\nTotal 0 (delta 0), reused 0 (delta 0)\r\nTo github-personal:hbxn740150254/BestoneGitHub.git\r\n cd773e9..f622210  testMerge -> master\r\n\r\n//github默认的节点origin我们也可以正常push操作\r\nAppledeiMac:BestoneDemo Apple$ git push origin testMerge:testMerge\r\nCounting objects: 460, done.\r\nDelta compression using up to 4 threads.\r\nCompressing objects: 100% (240/240), done.\r\nWriting objects: 100% (460/460), 16.69 MiB | 442.00 KiB/s, done.\r\nTotal 460 (delta 211), reused 453 (delta 205)\r\nTo git@git.coding.net:hbxn740150254/Local-Git.git\r\n* [new branch]      testMerge -> testMerge\r\n```\r\ngithub账户如果还是显示之前id_rsa密钥账户的话请把你的密钥加入sshAgent代理中\r\n- 添加你的ssh密钥到ssh-agent中\r\n``` ruby\r\n# start the ssh-agent in the background\r\neval "$(ssh-agent -s)"\r\nAgent pid 59566\r\n```\r\n\r\n- 如果你的密钥不是系统默认的RSA文件名id_rsa，比如像我一样另外创了一对公钥/密钥id_rsa_personal，那么就把他们添加进去，注意：密钥文件是不带扩展名的，公钥扩展名是.pub，代表publicKey，\r\n``` ruby\r\napple:.ssh apple$ eval "$(ssh-agent -s)"\r\nAgent pid 19795\r\n//添加密钥 id_rsa_personal\r\napple:.ssh apple$ ssh-add id_rsa_personal\r\nIdentity added: id_rsa_personal (github-personal)\r\n//添加默认密钥 id_rsa\r\napple:.ssh apple$ ssh-add id_rsa\r\n//密钥有密码的话就会要你提示输入 passphrase\r\nEnter passphrase for id_rsa: \r\n//测试用密钥isa是否连接成功github\r\napple:.ssh apple$ ssh -T git@github.com\r\nHi hbxn740150254! You \'ve successfully authenticated, but GitHub does not provide shell access.\r\n//测试密钥id_rsa_personal是否连接成功github\r\napple:.ssh apple$ ssh -T git@github-personal\r\nHi FaxeXian! You\'ve successfully authenticated, but GitHub does not provide shell access.\r\n```\r\n这样，一台电脑生成的两个公钥让两个用户成功连接，就可以访问别人的远程仓库，可以进行多人开发了！！\r\n\r\n作者：穿山甲到底说了什么\r\n\r\n来源：简书\r\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>记录的是本所遇到的bug</p>\n</div>\n<h2 id="git报错-error-permission-to-xxx-git-denied-to-user" tabindex="-1"><a class="header-anchor" href="#git报错-error-permission-to-xxx-git-denied-to-user" aria-hidden="true">#</a> Git报错:“ERROR: Permission to XXX.git denied to user”</h2>\n<h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h4>\n<ul>\n<li>1、生成一个新的SSH KEY</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>AppledeiMac<span class="token operator">:</span><span class="token operator">~</span> Apple$ cd <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh\n<span class="token symbol">AppledeiMac</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ ls\nid_rsa        id_rsa<span class="token punctuation">.</span>pub  known_hosts\n<span class="token symbol">AppledeiMac</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span><span class="token constant">C</span> <span class="token string-literal"><span class="token string">"iMac_personnal_publicKey"</span></span>\nGenerating <span class="token keyword">public</span><span class="token operator">/</span><span class="token keyword">private</span> rsa key pair<span class="token punctuation">.</span>\nEnter file <span class="token keyword">in</span> which to save the key <span class="token punctuation">(</span><span class="token operator">/</span>Users<span class="token regex-literal"><span class="token regex">/Apple/</span></span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">)</span><span class="token operator">:</span>               \n<span class="token operator">/</span>Users<span class="token regex-literal"><span class="token regex">/Apple/</span></span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_personal\nEnter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span><span class="token operator">:</span> \nEnter same passphrase again<span class="token operator">:</span> \nYour identification has been saved <span class="token keyword">in</span> <span class="token operator">/</span>Users<span class="token regex-literal"><span class="token regex">/Apple/</span></span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_personal<span class="token punctuation">.</span>\nYour <span class="token keyword">public</span> key has been saved <span class="token keyword">in</span> <span class="token operator">/</span>Users<span class="token regex-literal"><span class="token regex">/Apple/</span></span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_personal<span class="token punctuation">.</span>pub<span class="token punctuation">.</span>\nThe key fingerprint is<span class="token operator">:</span>\n<span class="token symbol">SHA256</span><span class="token operator">:</span><span class="token number">1</span>gepuxDHwJRnFbKvc0Zq<span class="token operator">/</span>NGrFGE9kEXS06jxatPPrSQ iMac_personnal_publicKey\nThe key\'s randomart image is<span class="token operator">:</span>\n<span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token constant">RSA</span> <span class="token number">2048</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>\n<span class="token operator">|</span>      <span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token operator">*</span>oo   <span class="token operator">|</span>\n<span class="token operator">|</span>     o<span class="token punctuation">.</span> ooo<span class="token operator">=</span><span class="token operator">+</span> <span class="token punctuation">.</span>  <span class="token operator">|</span>\n<span class="token operator">|</span>      oo<span class="token punctuation">.</span> <span class="token operator">=</span><span class="token operator">+</span>o<span class="token punctuation">.</span>   <span class="token operator">|</span>\n<span class="token operator">|</span>       o <span class="token operator">=</span><span class="token punctuation">.</span>o<span class="token operator">..</span>   <span class="token operator">|</span>\n<span class="token operator">|</span>      <span class="token punctuation">.</span> <span class="token constant">S</span> <span class="token operator">=</span>o<span class="token punctuation">.</span>    <span class="token operator">|</span>\n<span class="token operator">|</span>       <span class="token operator">=</span> <span class="token operator">=</span><span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">.</span>    <span class="token operator">|</span>\n<span class="token operator">|</span>      <span class="token punctuation">.</span> <span class="token constant">B</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token punctuation">.</span>Eo<span class="token operator">..</span> <span class="token operator">|</span>\n<span class="token operator">|</span>       o <span class="token constant">B</span> <span class="token punctuation">.</span> <span class="token operator">+</span>o <span class="token punctuation">.</span><span class="token operator">|</span>\n<span class="token operator">|</span>          <span class="token punctuation">.</span> o<span class="token operator">..</span> <span class="token operator">..</span> <span class="token operator">|</span>\n<span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token constant">SHA256</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>\n<span class="token symbol">AppledeiMac</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ ls\nid_rsa            id_rsa_personal     known_hosts\nid_rsa<span class="token punctuation">.</span>pub        id_rsa_personal<span class="token punctuation">.</span>pub`\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ul>\n<li>2、打开新生成的~/.ssh/id_rsa2.pub文件，将里面的内容添加到GitHub后台。</li>\n<li>3、打开~/.ssh/config文件\n没有config文件则创建，终端输入touch config ，创建完以后用Vim打开或者是在Finder打开一样。\n在不影响默认的github设置下我们重新添加一个Host：\n建一个自己能辨识的github别名，我取的是github-personal，新建的帐号使用这个别名做克隆和更新</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>Host github<span class="token operator">-</span>personal\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>HostName github.com\nUser git\nIdentityFile ~/.ssh/id_rsa_personal</p>\n<p>编辑完毕之后按下ESC，:wq，:wq是保存并退出vim编辑器\n具体在终端代码如下：\ncat config 是把config文件里面的内容在终端输出\nAppledeiMac:.ssh Apple$ vim config\nAppledeiMac:.ssh Apple$ cat config</p>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>  <span class="token comment">#Default GitHub</span>\n  Host github<span class="token punctuation">.</span>com\n  HostName github<span class="token punctuation">.</span>com\n  User git\n  IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa\n\n  Host github<span class="token operator">-</span>personal\n  HostName github<span class="token punctuation">.</span>com\n  User git\n  IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_personal\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul>\n<li>4、将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名。\n如原地址是 git@github.com:hbxn740150254/BestoneGitHub.git 替换后应该是：github-personal:hbxn740150254/BestoneGitHub.git 或者git@github-personal:hbxn740150254/BestoneGitHub.git亲测都是可以的，\n如果是新建的仓库，直接使用替换后的URL克隆即可。如果已经使用原地址克隆过了，可以使用命令修改：</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>AppledeiMac<span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ cd <span class="token operator">/</span>Users<span class="token operator">/</span>Apple<span class="token operator">/</span>Desktop<span class="token operator">/</span>BestoneDemo \n<span class="token operator">/</span><span class="token operator">/</span>修改之前\nApple$ git remote <span class="token operator">-</span>v\ngithub  git<span class="token variable">@github</span><span class="token punctuation">.</span>com<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>\ngithub  git<span class="token variable">@github</span><span class="token punctuation">.</span>com<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span>修改 remote set<span class="token operator">-</span>url\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ git remote set<span class="token operator">-</span>url github  github<span class="token operator">-</span> personal<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git\n<span class="token operator">/</span><span class="token operator">/</span>验证是否修改成功    \n<span class="token operator">/</span><span class="token operator">/</span>使用修改后的github<span class="token operator">-</span>personal <span class="token constant">SSH</span>连接，连接成功用户是hbxn740150254，此时公钥是id_rsa_personal\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ ssh <span class="token operator">-</span><span class="token constant">T</span> github<span class="token operator">-</span>personal\nHi hbxn740150254<span class="token operator">!</span> You\'ve successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span>\n<span class="token operator">/</span><span class="token operator">/</span>使用默认的git<span class="token variable">@github</span><span class="token punctuation">.</span>com <span class="token constant">SSH</span>去连接<span class="token punctuation">,</span>连接成功用户是FaxeXian，此时公钥是id_rsa\n<span class="token symbol">AppledeiMac</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh Apple$ ssh <span class="token operator">-</span><span class="token constant">T</span> git<span class="token variable">@github</span><span class="token punctuation">.</span>com\nHi FaxeXian<span class="token operator">!</span> You\'ve successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span>\n<span class="token operator">/</span><span class="token operator">/</span>修改之后\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ git remote <span class="token operator">-</span>v\ngithub  github<span class="token operator">-</span>personal<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git <span class="token punctuation">(</span>fetch<span class="token punctuation">)</span>\ngithub  github<span class="token operator">-</span>personal<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git <span class="token punctuation">(</span>push<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>最后我们进行正常的push，fetch 操作，都可以</p>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code><span class="token operator">/</span><span class="token operator">/</span>更改后的github push成功！\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ git push github testMerge<span class="token symbol">:master</span>\nTotal <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reused <span class="token number">0</span> <span class="token punctuation">(</span>delta <span class="token number">0</span><span class="token punctuation">)</span>\nTo github<span class="token operator">-</span>personal<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>BestoneGitHub<span class="token punctuation">.</span>git\n cd773e9<span class="token operator">..</span>f622210  testMerge <span class="token operator">-</span><span class="token operator">></span> master\n\n<span class="token operator">/</span><span class="token operator">/</span>github默认的节点origin我们也可以正常push操作\n<span class="token symbol">AppledeiMac</span><span class="token symbol">:BestoneDemo</span> Apple$ git push origin testMerge<span class="token symbol">:testMerge</span>\nCounting objects<span class="token operator">:</span> <span class="token number">460</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>\nDelta compression using up to <span class="token number">4</span> threads<span class="token punctuation">.</span>\nCompressing objects<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">240</span><span class="token operator">/</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>\nWriting objects<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">460</span><span class="token regex-literal"><span class="token regex">/460), 16.69 MiB | 442.00 KiB/s</span></span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>\nTotal <span class="token number">460</span> <span class="token punctuation">(</span>delta <span class="token number">211</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reused <span class="token number">453</span> <span class="token punctuation">(</span>delta <span class="token number">205</span><span class="token punctuation">)</span>\nTo git<span class="token variable">@git</span><span class="token punctuation">.</span>coding<span class="token punctuation">.</span>net<span class="token symbol">:hbxn740150254</span><span class="token operator">/</span>Local<span class="token operator">-</span>Git<span class="token punctuation">.</span>git\n<span class="token operator">*</span> <span class="token punctuation">[</span><span class="token keyword">new</span> branch<span class="token punctuation">]</span>      testMerge <span class="token operator">-</span><span class="token operator">></span> testMerge\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>github账户如果还是显示之前id_rsa密钥账户的话请把你的密钥加入sshAgent代理中</p>\n<ul>\n<li>添加你的ssh密钥到ssh-agent中</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code><span class="token comment"># start the ssh-agent in the background</span>\neval <span class="token string-literal"><span class="token string">"$(ssh-agent -s)"</span></span>\nAgent pid <span class="token number">59566</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul>\n<li>如果你的密钥不是系统默认的RSA文件名id_rsa，比如像我一样另外创了一对公钥/密钥id_rsa_personal，那么就把他们添加进去，注意：密钥文件是不带扩展名的，公钥扩展名是.pub，代表publicKey，</li>\n</ul>\n<div class="language-ruby ext-rb line-numbers-mode"><pre v-pre class="language-ruby"><code>apple<span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ eval <span class="token string-literal"><span class="token string">"$(ssh-agent -s)"</span></span>\nAgent pid <span class="token number">19795</span>\n<span class="token operator">/</span><span class="token operator">/</span>添加密钥 id_rsa_personal\n<span class="token symbol">apple</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ ssh<span class="token operator">-</span>add id_rsa_personal\nIdentity added<span class="token operator">:</span> id_rsa_personal <span class="token punctuation">(</span>github<span class="token operator">-</span>personal<span class="token punctuation">)</span>\n<span class="token operator">/</span><span class="token operator">/</span>添加默认密钥 id_rsa\n<span class="token symbol">apple</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ ssh<span class="token operator">-</span>add id_rsa\n<span class="token operator">/</span><span class="token operator">/</span>密钥有密码的话就会要你提示输入 passphrase\nEnter passphrase <span class="token keyword">for</span> id_rsa<span class="token operator">:</span> \n<span class="token operator">/</span><span class="token operator">/</span>测试用密钥isa是否连接成功github\n<span class="token symbol">apple</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ ssh <span class="token operator">-</span><span class="token constant">T</span> git<span class="token variable">@github</span><span class="token punctuation">.</span>com\nHi hbxn740150254<span class="token operator">!</span> You \'ve successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span>\n<span class="token operator">/</span><span class="token operator">/</span>测试密钥id_rsa_personal是否连接成功github\n<span class="token symbol">apple</span><span class="token operator">:</span><span class="token punctuation">.</span>ssh apple$ ssh <span class="token operator">-</span><span class="token constant">T</span> git<span class="token variable">@github</span><span class="token operator">-</span>personal\nHi FaxeXian<span class="token operator">!</span> You\'ve successfully authenticated<span class="token punctuation">,</span> but GitHub does <span class="token keyword">not</span> provide shell access<span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这样，一台电脑生成的两个公钥让两个用户成功连接，就可以访问别人的远程仓库，可以进行多人开发了！！</p>\n<p>作者：穿山甲到底说了什么</p>\n<p>来源：简书\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/git.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"git",filePath:"D:/个人博客/blog-demo/docs/issue/git.md",filePathRelative:"issue/git.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/git.html.vue",componentFilePathRelative:"pages/issue/git.html.vue",componentFileChunkName:"v-62e92bf6",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/git.html.js",dataFilePathRelative:"pages/issue/git.html.js",dataFileChunkName:"v-62e92bf6",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/git.html",htmlFilePathRelative:"issue/git.html"},{data:{key:"v-87ea532c",path:"/issue/mini%20apps.html",title:"Mini Apps",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Mini Apps",tag:["小程序"]},excerpt:"",headers:[{level:2,title:"小程序错误：[app.json文件内容错误]app.json未找到",slug:"小程序错误-app-json文件内容错误-app-json未找到",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-87ea532c",path:"/issue/mini%20apps.html",title:"Mini Apps",lang:"zh-CN",frontmatter:{date:"2021/11/26 20:37",title:"Mini Apps",tag:["小程序"]},excerpt:"",headers:[{level:2,title:"小程序错误：[app.json文件内容错误]app.json未找到",slug:"小程序错误-app-json文件内容错误-app-json未找到",children:[]}],content:'\r\n## 小程序错误：[app.json文件内容错误]app.json未找到\r\n\r\n问题描述：\r\n::: tip\r\n在Github上刚刚拉取的代码，导入微信开发者工具打开之后出现如下问题\r\n:::\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/Mini-Apps/1.png" alt="">\r\n\r\n::: tip\r\n解决办法：\r\n1.我自己的原因是项目目录没打开对，打开目录的时候\r\n。此文件夹的二级目录必须包含pages，styles，example等主目录。我是把新建一个文件夹之后把克隆的文件夹放里面，打开的是我自己建的文件夹，所以导致错误，\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/Mini-Apps/2.png" alt="">\r\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/Mini-Apps/3.png" alt="">\r\n\r\n:::\r\n如上图所示应该打开vip文件夹而不是小程序1文件夹\r\n重新打开之后问题解决\r\n\r\n总结：\r\n::: tip\r\n1、原因是项目目录不对，项目二级目录下必须有pages，styles，example等主目录。我是因为将别人的项目直接解压过来用，实际上应该解压后打开文件夹二级目录下的项目名称才是对的\r\n2、在创建项目 添加项目时选择的项目目录的文件夹下不能有次级文件夹 如果有次级文件夹 即便是空文件就会报“app.json\r\n未找到入口 app.json 文件，或者文件读取失败，请检查后重新编译。”\r\n3、项目下面不能有其他与项目无关的文件\r\n:::\r\n原文链接：https://blog.csdn.net/weixin_44865458/article/details/115689251\r\n\r\n<a href=\'https://developers.weixin.qq.com/miniprogram/dev/framework/config.html\'> 微信小程序文档</a>',contentRendered:'<h2 id="小程序错误-app-json文件内容错误-app-json未找到" tabindex="-1"><a class="header-anchor" href="#小程序错误-app-json文件内容错误-app-json未找到" aria-hidden="true">#</a> 小程序错误：[app.json文件内容错误]app.json未找到</h2>\n<p>问题描述：</p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>在Github上刚刚拉取的代码，导入微信开发者工具打开之后出现如下问题</p>\n</div>\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/Mini-Apps/1.png" alt="">\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>解决办法：\n1.我自己的原因是项目目录没打开对，打开目录的时候\n。此文件夹的二级目录必须包含pages，styles，example等主目录。我是把新建一个文件夹之后把克隆的文件夹放里面，打开的是我自己建的文件夹，所以导致错误，\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/Mini-Apps/2.png" alt="">\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/Mini-Apps/3.png" alt=""></p>\n</div>\n<p>如上图所示应该打开vip文件夹而不是小程序1文件夹\n重新打开之后问题解决</p>\n<p>总结：</p>\n<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>1、原因是项目目录不对，项目二级目录下必须有pages，styles，example等主目录。我是因为将别人的项目直接解压过来用，实际上应该解压后打开文件夹二级目录下的项目名称才是对的\n2、在创建项目 添加项目时选择的项目目录的文件夹下不能有次级文件夹 如果有次级文件夹 即便是空文件就会报“app.json\n未找到入口 app.json 文件，或者文件读取失败，请检查后重新编译。”\n3、项目下面不能有其他与项目无关的文件</p>\n</div>\n<p>原文链接：https://blog.csdn.net/weixin_44865458/article/details/115689251</p>\n<p><a href=\'https://developers.weixin.qq.com/miniprogram/dev/framework/config.html\'> 微信小程序文档</a></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/mini apps.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"mini apps",filePath:"D:/个人博客/blog-demo/docs/issue/mini apps.md",filePathRelative:"issue/mini apps.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/mini apps.html.vue",componentFilePathRelative:"pages/issue/mini apps.html.vue",componentFileChunkName:"v-87ea532c",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/mini apps.html.js",dataFilePathRelative:"pages/issue/mini apps.html.js",dataFileChunkName:"v-87ea532c",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/mini apps.html",htmlFilePathRelative:"issue/mini apps.html"},{data:{key:"v-f956f2a2",path:"/issue/",title:"欢迎🎉🎉🎉🎉🎉",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],git:{updatedTime:1661586831e3,contributors:[{name:"LIU",email:"917675036@qq.com",commits:1}]}},key:"v-f956f2a2",path:"/issue/",title:"欢迎🎉🎉🎉🎉🎉",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],content:"# 欢迎🎉🎉🎉🎉🎉",contentRendered:'<h1 id="欢迎🎉🎉🎉🎉🎉" tabindex="-1"><a class="header-anchor" href="#欢迎🎉🎉🎉🎉🎉" aria-hidden="true">#</a> 欢迎🎉🎉🎉🎉🎉</h1>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/",pathLocale:"/",permalink:null,routeMeta:{},slug:"README",filePath:"D:/个人博客/blog-demo/docs/issue/README.md",filePathRelative:"issue/README.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/index.html.vue",componentFilePathRelative:"pages/issue/index.html.vue",componentFileChunkName:"v-f956f2a2",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/index.html.js",dataFilePathRelative:"pages/issue/index.html.js",dataFileChunkName:"v-f956f2a2",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/index.html",htmlFilePathRelative:"issue/index.html"},{data:{key:"v-4b663a7c",path:"/issue/vue.html",title:"Vue",lang:"zh-CN",frontmatter:{date:"2022/1/14 20:37",title:"Vue",tag:["Vue"]},excerpt:"",headers:[{level:2,title:"Missing required prop: “value” 报错的解决办法",slug:"missing-required-prop-value-报错的解决办法",children:[]},{level:2,title:"解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题",slug:"解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题",children:[]}],git:{updatedTime:null,contributors:[]}},key:"v-4b663a7c",path:"/issue/vue.html",title:"Vue",lang:"zh-CN",frontmatter:{date:"2022/1/14 20:37",title:"Vue",tag:["Vue"]},excerpt:"",headers:[{level:2,title:"Missing required prop: “value” 报错的解决办法",slug:"missing-required-prop-value-报错的解决办法",children:[]},{level:2,title:"解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题",slug:"解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题",children:[]}],content:'\n\n::: tip \n\n记录的是本所遇到的bug\n\n:::\n\n##  Missing required prop: “value” 报错的解决办法\n##### 一. 在VUE中使用element-ui的el-select组件时出现该报错\n\n[Vue warn]: Missing required prop: "value"  \n1\n##### 二. 报错原因\n2.1.el-select中没有进行双向数据绑定（v-model）\n\n2.2 el-option没有进行value赋值\n\n##### 三. 具体示例\n3.1 报错示例一： el-select中没有进行双向数据绑定，且el-option没有进行value赋值\n\n代码如下：\n\n\x3c!-- <el-form-item label="获取积分">\n   <el-select>\n      <el-option label="请选择..."></el-option>\n      <el-option></el-option>\n    </el-select>\n </el-form-item> --\x3e\n\n运行结果： （界面初始加载时会报以下错，且在点击el-select与切换el-option时都会继续报错）\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/3.png" alt="">\n\n3.2 报错示例二： el-select中没有进行双向数据绑定，el-option进行了value赋值\n\n代码如下：\n\n``` vue\n\x3c!-- <el-form-item label="获取积分">\n   <el-select>\n      <el-option label="请选择..." value=""></el-option>\n      <el-option value="item.id"></el-option>\n    </el-select>\n </el-form-item> --\x3e\n ```\n\n运行结果：（界面初始加载时会报以下错，点击el-select与切换el-option时不会再继续报错）\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/4.png" alt="">\n\n3.3 报错示例三： el-select中进行了双向数据绑定，el-option没有进行value赋值\n\n代码如下：\n``` vue\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n      <el-option label="请选择..."></el-option>\n      <el-option></el-option>\n    </el-select>\n</el-form-item> --\x3e\n``` \n运行结果： （界面初始加载时会报以下错，且在点击el-select与切换el-option时都会继续报错）\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/5.png" alt="">\n\n\n##### 四. 解决办法\n☆ el-select进行双向数据绑定，且每一项el-option进行value赋值\n测试代码如下： （没有了上面的报错情况）\n\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n      <el-option label="请选择..." value=""></el-option>\n      <el-option  value="item.id" ></el-option>\n    </el-select>\n </el-form-item> --\x3e\n\n实际编写代码如下： （没有了上面的报错情况）\n\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n     <el-option v-for="(item, index) in channelList" :label="item.name" :value="item.id" :key="index"></el-option>\n   </el-select>\n</el-form-item> --\x3e\n\n补充：若el-select进行了双向数据绑定，且每一项el-option都进行了value赋值，然而还报了这个错，这时需要检查下每一项绑定value的变量是否都在数组中存在。比如上面的例子，就需要检查下channelList数组中每一项是否都有id这个变量。\n\n\n\n\n## 解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题\n在vue项目中，使用npm i 命令安装node modules时，出现报错：\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/1.png" alt="">\n最关键的应该是这一句：\n\nnpm ERR! Cannot read properties of null (reading \'pickAlgorithm\')\n1\n解决方法：\n在终端中运行命令：\nnpm cache clear --force\n\n然后重新运行 npm i 命令，再次安装\n安装完成，没有出现报错\nnpm run serve 运行项目，项目可以正常启动了。\n    <img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/%E5%8D%9A%E5%AE%A2/vue/2.png" alt="">\n\n',contentRendered:'<div class="custom-container tip"><p class="custom-container-title">TIP</p>\n<p>记录的是本所遇到的bug</p>\n</div>\n<h2 id="missing-required-prop-value-报错的解决办法" tabindex="-1"><a class="header-anchor" href="#missing-required-prop-value-报错的解决办法" aria-hidden="true">#</a> Missing required prop: “value” 报错的解决办法</h2>\n<h5 id="一-在vue中使用element-ui的el-select组件时出现该报错" tabindex="-1"><a class="header-anchor" href="#一-在vue中使用element-ui的el-select组件时出现该报错" aria-hidden="true">#</a> 一. 在VUE中使用element-ui的el-select组件时出现该报错</h5>\n<p>[Vue warn]: Missing required prop: &quot;value&quot;<br>\n1</p>\n<h5 id="二-报错原因" tabindex="-1"><a class="header-anchor" href="#二-报错原因" aria-hidden="true">#</a> 二. 报错原因</h5>\n<p>2.1.el-select中没有进行双向数据绑定（v-model）</p>\n<p>2.2 el-option没有进行value赋值</p>\n<h5 id="三-具体示例" tabindex="-1"><a class="header-anchor" href="#三-具体示例" aria-hidden="true">#</a> 三. 具体示例</h5>\n<p>3.1 报错示例一： el-select中没有进行双向数据绑定，且el-option没有进行value赋值</p>\n<p>代码如下：</p>\n\x3c!-- <el-form-item label="获取积分">\n   <el-select>\n      <el-option label="请选择..."></el-option>\n      <el-option></el-option>\n    </el-select>\n </el-form-item> --\x3e\n<p>运行结果： （界面初始加载时会报以下错，且在点击el-select与切换el-option时都会继续报错）\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/3.png" alt=""></p>\n<p>3.2 报错示例二： el-select中没有进行双向数据绑定，el-option进行了value赋值</p>\n<p>代码如下：</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token comment">&lt;!-- &lt;el-form-item label="获取积分">\n   &lt;el-select>\n      &lt;el-option label="请选择..." value="">&lt;/el-option>\n      &lt;el-option value="item.id">&lt;/el-option>\n    &lt;/el-select>\n &lt;/el-form-item> --\x3e</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>运行结果：（界面初始加载时会报以下错，点击el-select与切换el-option时不会再继续报错）\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/4.png" alt=""></p>\n<p>3.3 报错示例三： el-select中进行了双向数据绑定，el-option没有进行value赋值</p>\n<p>代码如下：</p>\n<div class="language-vue ext-vue line-numbers-mode"><pre v-pre class="language-vue"><code><span class="token comment">&lt;!-- &lt;el-form-item label="获取积分">\n   &lt;el-select v-model="channel">\n      &lt;el-option label="请选择...">&lt;/el-option>\n      &lt;el-option>&lt;/el-option>\n    &lt;/el-select>\n&lt;/el-form-item> --\x3e</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>运行结果： （界面初始加载时会报以下错，且在点击el-select与切换el-option时都会继续报错）\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/5.png" alt=""></p>\n<h5 id="四-解决办法" tabindex="-1"><a class="header-anchor" href="#四-解决办法" aria-hidden="true">#</a> 四. 解决办法</h5>\n<p>☆ el-select进行双向数据绑定，且每一项el-option进行value赋值\n测试代码如下： （没有了上面的报错情况）</p>\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n      <el-option label="请选择..." value=""></el-option>\n      <el-option  value="item.id" ></el-option>\n    </el-select>\n </el-form-item> --\x3e\n<p>实际编写代码如下： （没有了上面的报错情况）</p>\n\x3c!-- <el-form-item label="获取积分">\n   <el-select v-model="channel">\n     <el-option v-for="(item, index) in channelList" :label="item.name" :value="item.id" :key="index"></el-option>\n   </el-select>\n</el-form-item> --\x3e\n<p>补充：若el-select进行了双向数据绑定，且每一项el-option都进行了value赋值，然而还报了这个错，这时需要检查下每一项绑定value的变量是否都在数组中存在。比如上面的例子，就需要检查下channelList数组中每一项是否都有id这个变量。</p>\n<h2 id="解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题" tabindex="-1"><a class="header-anchor" href="#解决npm-err-cannot-read-properties-of-null-reading-pickalgorithm-报错问题" aria-hidden="true">#</a> 解决npm ERR! Cannot read properties of null (reading ‘pickAlgorithm‘)报错问题</h2>\n<p>在vue项目中，使用npm i 命令安装node modules时，出现报错：\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/1.png" alt="">\n最关键的应该是这一句：</p>\n<p>npm ERR! Cannot read properties of null (reading \'pickAlgorithm\')\n1\n解决方法：\n在终端中运行命令：\nnpm cache clear --force</p>\n<p>然后重新运行 npm i 命令，再次安装\n安装完成，没有出现报错\nnpm run serve 运行项目，项目可以正常启动了。\n<img src="https://tuchuang-1313331077.cos.ap-beijing.myqcloud.com/博客/vue/2.png" alt=""></p>\n',date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:"/issue/vue.html",pathLocale:"/",permalink:null,routeMeta:{},slug:"vue",filePath:"D:/个人博客/blog-demo/docs/issue/vue.md",filePathRelative:"issue/vue.md",componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/vue.html.vue",componentFilePathRelative:"pages/issue/vue.html.vue",componentFileChunkName:"v-4b663a7c",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/issue/vue.html.js",dataFilePathRelative:"pages/issue/vue.html.js",dataFileChunkName:"v-4b663a7c",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/issue/vue.html",htmlFilePathRelative:"issue/vue.html"},{data:{key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],git:{}},key:"v-3706649a",path:"/404.html",title:"",lang:"zh-CN",frontmatter:{layout:"404"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/404.html.vue",componentFilePathRelative:"pages/404.html.vue",componentFileChunkName:"v-3706649a",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/404.html.js",dataFilePathRelative:"pages/404.html.js",dataFileChunkName:"v-3706649a",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/404.html",htmlFilePathRelative:"404.html"},{data:{key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],git:{}},key:"v-8daa1a0e",path:"/",title:"",lang:"zh-CN",frontmatter:{layout:"Layout",home:!0},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/index.html.vue",componentFilePathRelative:"pages/index.html.vue",componentFileChunkName:"v-8daa1a0e",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/index.html.js",dataFilePathRelative:"pages/index.html.js",dataFileChunkName:"v-8daa1a0e",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/index.html",htmlFilePathRelative:"index.html"},{data:{key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],git:{}},key:"v-74bc627b",path:"/about/",title:"",lang:"zh-CN",frontmatter:{layout:"About",slug:"aurora-about"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/about/index.html.vue",componentFilePathRelative:"pages/about/index.html.vue",componentFileChunkName:"v-74bc627b",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/about/index.html.js",dataFilePathRelative:"pages/about/index.html.js",dataFileChunkName:"v-74bc627b",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/about/index.html",htmlFilePathRelative:"about/index.html"},{data:{key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],git:{}},key:"v-14f724bf",path:"/mood/",title:"",lang:"zh-CN",frontmatter:{layout:"Mood",slug:"aurora-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/mood/index.html.vue",componentFilePathRelative:"pages/mood/index.html.vue",componentFileChunkName:"v-14f724bf",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/mood/index.html.js",dataFilePathRelative:"pages/mood/index.html.js",dataFileChunkName:"v-14f724bf",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/mood/index.html",htmlFilePathRelative:"mood/index.html"},{data:{key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],git:{}},key:"v-14e6501c",path:"/link/",title:"",lang:"zh-CN",frontmatter:{layout:"Link",slug:"aurora-link"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/link/index.html.vue",componentFilePathRelative:"pages/link/index.html.vue",componentFileChunkName:"v-14e6501c",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/link/index.html.js",dataFilePathRelative:"pages/link/index.html.js",dataFileChunkName:"v-14e6501c",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/link/index.html",htmlFilePathRelative:"link/index.html"},{data:{key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],git:{}},key:"v-744d024e",path:"/tag/",title:"",lang:"zh-CN",frontmatter:{layout:"Tag",slug:"aurora-tag"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/tag/index.html.vue",componentFilePathRelative:"pages/tag/index.html.vue",componentFileChunkName:"v-744d024e",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/tag/index.html.js",dataFilePathRelative:"pages/tag/index.html.js",dataFileChunkName:"v-744d024e",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/tag/index.html",htmlFilePathRelative:"tag/index.html"},{data:{key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],git:{}},key:"v-705c21a6",path:"/archive/",title:"",lang:"zh-CN",frontmatter:{layout:"Archive",slug:"aurora-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/archive/index.html.vue",componentFilePathRelative:"pages/archive/index.html.vue",componentFileChunkName:"v-705c21a6",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/archive/index.html.js",dataFilePathRelative:"pages/archive/index.html.js",dataFileChunkName:"v-705c21a6",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/archive/index.html",htmlFilePathRelative:"archive/index.html"},{data:{key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],git:{}},key:"v-6629f178",path:"/aurora-coze/",title:"",lang:"zh-CN",frontmatter:{layout:"CozeMood",slug:"aurora-coze-mood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-coze/index.html.vue",componentFilePathRelative:"pages/aurora-coze/index.html.vue",componentFileChunkName:"v-6629f178",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-coze/index.html.js",dataFilePathRelative:"pages/aurora-coze/index.html.js",dataFileChunkName:"v-6629f178",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/aurora-coze/index.html",htmlFilePathRelative:"aurora-coze/index.html"},{data:{key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],git:{}},key:"v-031dfb13",path:"/register/",title:"",lang:"zh-CN",frontmatter:{layout:"RegisterUser",slug:"aurora-coze-register"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/register/index.html.vue",componentFilePathRelative:"pages/register/index.html.vue",componentFileChunkName:"v-031dfb13",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/register/index.html.js",dataFilePathRelative:"pages/register/index.html.js",dataFileChunkName:"v-031dfb13",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/register/index.html",htmlFilePathRelative:"register/index.html"},{data:{key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],git:{}},key:"v-e2acc714",path:"/photo/",title:"",lang:"zh-CN",frontmatter:{layout:"CozePhoto",slug:"aurora-photo"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/photo/index.html.vue",componentFilePathRelative:"pages/photo/index.html.vue",componentFileChunkName:"v-e2acc714",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/photo/index.html.js",dataFilePathRelative:"pages/photo/index.html.js",dataFileChunkName:"v-e2acc714",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/photo/index.html",htmlFilePathRelative:"photo/index.html"},{data:{key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],git:{}},key:"v-4382d077",path:"/next-mood/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraCozeMood",slug:"aurora-AuroraCozeMood"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/next-mood/index.html.vue",componentFilePathRelative:"pages/next-mood/index.html.vue",componentFileChunkName:"v-4382d077",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/next-mood/index.html.js",dataFilePathRelative:"pages/next-mood/index.html.js",dataFileChunkName:"v-4382d077",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/next-mood/index.html",htmlFilePathRelative:"next-mood/index.html"},{data:{key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],git:{}},key:"v-3279cf61",path:"/aurora-archive/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraArchive",slug:"aurora-plugin-archive"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-archive/index.html.vue",componentFilePathRelative:"pages/aurora-archive/index.html.vue",componentFileChunkName:"v-3279cf61",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-archive/index.html.js",dataFilePathRelative:"pages/aurora-archive/index.html.js",dataFileChunkName:"v-3279cf61",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/aurora-archive/index.html",htmlFilePathRelative:"aurora-archive/index.html"},{data:{key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],git:{}},key:"v-3c506944",path:"/aurora-music/",title:"",lang:"zh-CN",frontmatter:{layout:"AuroraMusic",slug:"aurora-plugin-music"},excerpt:"",headers:[],content:"",contentRendered:"",date:"0000-00-00",deps:[],hoistedTags:[],links:[],pathInferred:null,pathLocale:"/",permalink:null,routeMeta:{},slug:"",filePath:null,filePathRelative:null,componentFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-music/index.html.vue",componentFilePathRelative:"pages/aurora-music/index.html.vue",componentFileChunkName:"v-3c506944",dataFilePath:"D:/个人博客/blog-demo/docs/.vuepress/.temp/pages/aurora-music/index.html.js",dataFilePathRelative:"pages/aurora-music/index.html.js",dataFileChunkName:"v-3c506944",htmlFilePath:"D:/个人博客/blog-demo/docs/.vuepress/dist/aurora-music/index.html",htmlFilePathRelative:"aurora-music/index.html"}]},4482:(n,a,s)=>{n.exports=s.p+"assets/img/10.61f170a0.gif"},8307:(n,a,s)=>{n.exports=s.p+"assets/img/2.9520b3f0.jpg"},4445:(n,a,s)=>{n.exports=s.p+"assets/img/6.8cf2eec9.jpg"},731:(n,a,s)=>{n.exports=s.p+"assets/img/9.e6b30bfd.jpg"}},n=>{n.O(0,[76,594],(()=>(5698,n(n.s=5698)))),n.O()}]);